#line 2 "lex.yy.cpp"

#line 4 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer yyansi_c_create_buffer
#define yy_delete_buffer yyansi_c_delete_buffer
#define yy_flex_debug yyansi_c_flex_debug
#define yy_init_buffer yyansi_c_init_buffer
#define yy_flush_buffer yyansi_c_flush_buffer
#define yy_load_buffer_state yyansi_c_load_buffer_state
#define yy_switch_to_buffer yyansi_c_switch_to_buffer
#define yyin yyansi_cin
#define yyleng yyansi_cleng
#define yylex yyansi_clex
#define yylineno yyansi_clineno
#define yyout yyansi_cout
#define yyrestart yyansi_crestart
#define yytext yyansi_ctext
#define yywrap yyansi_cwrap
#define yyalloc yyansi_calloc
#define yyrealloc yyansi_crealloc
#define yyfree yyansi_cfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyansi_crestart(yyansi_cin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyansi_cleng;

extern FILE *yyansi_cin, *yyansi_cout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yyansi_ctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yyansi_ctext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyansi_crestart()), so that the user can continue scanning by
	 * just pointing yyansi_cin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yyansi_ctext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyansi_cleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yyansi_cwrap()'s to do buffer switches
 * instead of setting up a fresh yyansi_cin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyansi_crestart (FILE *input_file  );
void yyansi_c_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yyansi_c_create_buffer (FILE *file,int size  );
void yyansi_c_delete_buffer (YY_BUFFER_STATE b  );
void yyansi_c_flush_buffer (YY_BUFFER_STATE b  );
void yyansi_cpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yyansi_cpop_buffer_state (void );

static void yyansi_censure_buffer_stack (void );
static void yyansi_c_load_buffer_state (void );
static void yyansi_c_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yyansi_c_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yyansi_c_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yyansi_c_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yyansi_c_scan_bytes (yyconst char *bytes,int len  );

void *yyansi_calloc (yy_size_t  );
void *yyansi_crealloc (void *,yy_size_t  );
void yyansi_cfree (void *  );

#define yy_new_buffer yyansi_c_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyansi_censure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyansi_censure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyansi_cin = (FILE *) 0, *yyansi_cout = (FILE *) 0;

typedef int yy_state_type;

extern int yyansi_clineno;

int yyansi_clineno = 1;

extern char *yyansi_ctext;
#define yytext_ptr yyansi_ctext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yyansi_ctext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyansi_cleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 332
#define YY_END_OF_BUFFER 333
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2890] =
    {   0,
        0,    0,    0,    0,    5,    5,   10,   10,    0,    0,
      280,  280,  279,  279,    0,    0,    0,    0,    0,    0,
      298,  298,  311,  311,  320,  320,    0,    0,  329,  329,
      288,  288,    0,    0,    0,    0,  333,    1,  275,   20,
       19,   19,  275,  275,   26,  270,  275,  275,  275,  275,
      275,  275,  275,  275,  271,  271,  275,  274,  275,  275,
      275,  270,  275,  275,  275,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  273,  275,    5,    7,    6,
        6,   10,    9,   18,   15,   14,   14,   18,   17,   18,

       18,   18,  280,  281,  279,  279,  332,  278,  284,  283,
      282,  287,  286,  285,  277,  276,  300,  298,  299,  299,
      300,  300,  315,  311,  312,  312,  313,  314,  315,  313,
      313,  313,  313,  313,  313,  323,  320,  321,  321,  323,
      323,  322,  323,  323,  316,  317,  323,  323,  318,  323,
      323,  323,  319,  319,  323,  323,  323,  323,  323,  323,
      323,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  323,  327,  324,  325,  326,  331,  329,  330,  330,
      328,  331,  296,  288,  289,  289,  291,  296,  296,  296,

      296,  290,   20,   26,  256,  229,  231,    0,  227,   12,
      235,  236,    0,  234,  233,  225,   26,   26,   26,   26,
       26,   26,   26,   26,  270,  262,  257,  267,    0,    0,
      260,  249,  263,  250,  264,  248,  119,    0,  272,    2,
        8,  261,  272,  271,    0,    0,    0,  272,  271,    0,
      271,  271,  271,  271,  121,  251,  253,  255,  254,  252,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   19,
        0,    0,    0,  268,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,   36,

      270,  270,  270,  270,  270,  270,  270,  270,   44,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  269,  258,    5,    3,
        4,   10,   15,   17,    0,   13,    0,   17,   17,   17,
       17,    0,   14,    0,  280,  279,  279,  278,  298,    0,
      297,  299,  311,  313,  312,  313,  313,  313,  313,  313,
      313,  320,  227,  235,  236,  234,  233,  225,  322,  319,
        0,  319,    0,  319,  319,  319,  319,  321,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,

      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,   36,  322,  322,  322,  322,  322,  322,
      322,  322,   44,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  329,
      330,  288,  289,    0,    0,    0,   26,   26,   21,   21,
       26,   26,   26,   26,   26,   26,   26,   11,  120,  259,
        0,  272,  272,    0,  271,    0,  272,  271,    0,    0,
        0,  271,    0,    0,    0,  271,  265,    0,  230,  266,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,   91,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,   42,  270,  270,
      270,   46,  270,  270,  270,  270,  103,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  211,  270,  270,  270,  270,
      270,  270,  270,  270,  270,   17,   17,   16,   16,   17,

       17,   17,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  319,  319,    0,    0,    0,  319,    0,    0,
        0,  319,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,   91,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,   42,  322,
      322,  322,   46,  322,  322,  322,  322,  103,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,

      322,  322,  322,  322,  322,  322,  211,  322,  322,  322,
      322,  322,  322,  322,  322,  322,    0,    0,    0,   21,
       26,   26,   26,   26,   26,    0,  272,    0,  272,  271,
      271,    0,  271,    0,  271,    0,    0,  232,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,

      270,  270,  270,  270,  270,  270,  270,  270,  270,   27,
       93,  270,   30,  270,   31,  270,  270,  270,  270,  270,
      270,  270,   38,   39,  270,  270,  270,  270,  270,  270,
       43,  270,  270,   47,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  111,  270,  270,  270,  270,  270,  270,  270,
       60,  270,  270,  270,   16,   17,  313,  313,  313,  313,
      313,  313,  309,  313,  313,  313,  319,  319,  319,  319,
        0,    0,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,

      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,   27,   93,  322,   30,  322,   31,  322,  322,  322,
      322,  322,  322,  322,   38,   39,  322,  322,  322,  322,
      322,  322,   43,  322,  322,   47,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  111,  322,  322,  322,  322,  322,
      322,  322,   60,  322,  322,  322,    0,  295,    0,   26,

       26,   26,   26,   26,    0,    0,    0,  271,    0,    0,
        0,  272,    0,    0,    0,  271,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  160,    0,    0,    0,  237,
      270,  270,   28,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,   90,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  192,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  190,  270,  270,  198,  270,
      210,  270,  270,  270,  181,  270,  270,  270,  270,  270,
      270,  270,  270,   29,   94,   95,   33,  270,  270,  270,

      270,  270,  270,  270,  270,  270,   41,  270,  270,  217,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,   51,  270,  270,  270,  270,  270,  270,  270,  113,
      270,  270,  270,  270,   58,  270,  116,  270,  270,  270,
       62,   17,  313,  313,  313,  313,  313,  313,  313,  313,
      313,    0,    0,    0,  319,    0,    0,    0,  319,  322,
      322,   28,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,   90,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  192,  322,  322,  322,  322,  322,  322,  322,

      322,  322,  322,  322,  190,  322,  322,  198,  322,  210,
      322,  322,  322,  181,  322,  322,  322,  322,  322,  322,
      322,  322,   29,   94,   95,   33,  322,  322,  322,  322,
      322,  322,  322,  322,  322,   41,  322,  322,  217,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
       51,  322,  322,  322,  322,  322,  322,  322,  113,  322,
      322,  322,  322,   58,  322,  116,  322,  322,  322,   62,
        0,    0,   26,   23,   26,   26,   25,    0,    0,    0,
      272,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  238,    0,  270,  270,  270,  270,  270,

      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,   79,  270,  270,  270,  270,
       68,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  188,
       77,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      195,  270,  174,  270,  270,  270,  270,  270,  270,  270,
      270,  270,   97,   37,  215,  270,   40,  270,  100,   45,
      270,  270,  270,  270,  270,  270,  270,  108,  270,  270,
       50,   52,   53,   54,   55,   56,  270,  270,  270,  114,

      270,  202,  270,  270,  270,  270,   17,  313,  313,  313,
      313,  313,  313,  303,  313,  313,    0,    0,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,   79,  322,
      322,  322,  322,   68,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  188,   77,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  195,  322,  174,  322,  322,  322,  322,
      322,  322,  322,  322,  322,   97,   37,  215,  322,   40,

      322,  100,   45,  322,  322,  322,  322,  322,  322,  322,
      108,  322,  322,   50,   52,   53,   54,   55,   56,  322,
      322,  322,  114,  322,  202,  322,  322,  322,  322,    0,
        0,   24,   23,   23,   22,   25,   25,    0,  272,    0,
        0,  156,    0,    0,  163,  162,    0,    0,    0,  228,
      226,  270,  270,  242,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  189,   92,  270,  270,  175,  270,
      182,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,   69,   70,   71,  270,  270,  270,  270,  270,

      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      216,  270,  270,  270,   72,   73,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  206,
      270,  270,  270,  270,  270,   35,  270,  213,  101,  270,
      104,  270,  270,  106,  270,  270,  270,  270,  270,  270,
       57,  270,  270,  117,  270,  118,  313,  313,  313,  313,
      313,  301,  313,  313,  322,  322,  242,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  189,   92,  322,
      322,  175,  322,  182,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,

      322,  322,  322,  322,  322,   69,   70,   71,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  216,  322,  322,  322,   72,   73,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  206,  322,  322,  322,  322,  322,   35,  322,
      213,  101,  322,  104,  322,  322,  106,  322,  322,  322,
      322,  322,  322,   57,  322,  322,  117,  322,  118,    0,
        0,   24,   24,   22,   22,    0,  157,    0,  161,    0,
        0,    0,  240,  241,   32,  270,  243,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,

      270,  270,  270,  214,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,   78,
      207,   64,  270,  270,  270,  270,  270,  270,  270,  270,
      143,  270,  270,  270,  270,  270,  270,  270,  270,  193,
      166,   76,  270,  184,  201,  270,  270,  239,  203,  270,
      270,  270,  270,  270,  177,  270,  270,   34,   98,   99,
      270,   84,  105,  270,   48,   49,  270,  110,  270,  115,
       59,   61,  313,  310,  313,  313,  313,  313,  313,  240,
      241,   32,  322,  243,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,

      214,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,   78,  207,   64,  322,
      322,  322,  322,  322,  322,  322,  322,  143,  322,  322,
      322,  322,  322,  322,  322,  322,  193,  166,   76,  322,
      184,  201,  322,  322,  239,  203,  322,  322,  322,  322,
      322,  177,  322,  322,   34,   98,   99,  322,   84,  105,
      322,   48,   49,  322,  110,  322,  115,   59,   61,    0,
      292,    0,    0,    0,    0,    0,  270,  270,  270,  270,
      245,  270,  270,  270,  270,  270,  169,   87,  270,  270,
      176,   75,  183,  270,  270,  270,  270,  212,  270,  270,

      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  141,  270,  270,
      270,  270,  270,  270,  270,  209,  270,  270,  270,  178,
      270,  270,  270,  270,  270,  165,  179,  270,   96,  102,
      107,  270,  270,  313,  313,  313,  313,  313,  313,  322,
      322,  322,  322,  245,  322,  322,  322,  322,  322,  169,
       87,  322,  322,  176,   75,  183,  322,  322,  322,  322,
      212,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      141,  322,  322,  322,  322,  322,  322,  322,  209,  322,

      322,  322,  178,  322,  322,  322,  322,  322,  165,  179,
      322,   96,  102,  107,  322,  322,    0,    0,    0,    0,
        0,    0,  270,   65,   66,  244,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  164,  122,  270,  180,
       63,  270,  270,  270,  124,  270,  270,  270,  270,  270,
      270,  270,  208,  270,  270,  137,  270,  270,  140,  270,
      270,  270,  270,  270,  270,  149,  270,  270,  172,  185,
      270,  204,  270,  186,  270,  270,  270,  270,  313,  304,
      313,  313,  313,  313,  322,   65,   66,  244,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  164,  122,

      322,  180,   63,  322,  322,  322,  124,  322,  322,  322,
      322,  322,  322,  322,  208,  322,  322,  137,  322,  322,
      140,  322,  322,  322,  322,  322,  322,  149,  322,  322,
      172,  185,  322,  204,  322,  186,  322,  322,  322,  322,
      293,    0,  159,  153,    0,    0,   67,  270,  270,   88,
      270,  270,  270,  270,  270,  191,  170,   86,  168,  270,
      270,  270,  270,   74,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  151,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  147,  270,  270,  270,  270,  270,  270,
      270,  196,  270,  270,  270,  302,  313,  313,  313,  307,

       67,  322,  322,   88,  322,  322,  322,  322,  322,  191,
      170,   86,  168,  322,  322,  322,  322,   74,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  151,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  147,  322,  322,
      322,  322,  322,  322,  322,  196,  322,  322,  322,    0,
        0,  155,    0,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  197,
      123,  270,  270,  270,  270,  270,  270,  270,  136,  270,
      270,  270,  270,  270,  270,  270,  270,   83,  173,  270,
      270,  187,  270,  270,  112,  313,  313,  313,  322,  322,

      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  197,  123,  322,  322,  322,  322,
      322,  322,  322,  136,  322,  322,  322,  322,  322,  322,
      322,  322,   83,  173,  322,  322,  187,  322,  322,  112,
      294,    0,    0,  270,  247,  270,  270,  270,  270,  270,
      270,  270,  167,  270,  270,  270,  270,  171,  205,  270,
      270,  270,  270,  270,  270,  135,  270,  139,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  109,  313,  313,
      313,  322,  247,  322,  322,  322,  322,  322,  322,  322,
      167,  322,  322,  322,  322,  171,  205,  322,  322,  322,

      322,  322,  322,  135,  322,  139,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  109,    0,    0,  246,  270,
      270,  270,  224,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  145,
      146,  270,  270,  199,  270,  270,  313,  313,  313,  246,
      322,  322,  322,  224,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      145,  146,  322,  322,  199,  322,  322,    0,    0,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  125,
      270,  270,  270,  270,  270,  270,  270,  152,  270,  270,

      270,  270,  270,  270,  194,   80,  313,  308,  313,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  125,
      322,  322,  322,  322,  322,  322,  322,  152,  322,  322,
      322,  322,  322,  322,  194,   80,  158,    0,  270,  218,
      270,  220,  219,  270,  270,  270,  270,   81,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  144,  270,  150,
      270,  313,  313,  322,  218,  322,  220,  219,  322,  322,
      322,  322,   81,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  144,  322,  150,  322,    0,  270,  270,  270,
       89,  270,  270,  270,  270,  270,  270,  270,  270,  270,

      270,  270,  270,  270,  270,  200,  313,  305,  322,  322,
      322,   89,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  200,    0,  221,  270,
      270,   82,  270,  270,  270,  128,  270,  270,  131,  270,
      270,  270,  270,  270,  270,  313,  221,  322,  322,   82,
      322,  322,  322,  128,  322,  322,  131,  322,  322,  322,
      322,  322,  322,    0,  223,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  138,  270,  270,  313,  223,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  138,  322,
      322,    0,  270,  270,  126,  270,  129,  270,  270,  270,

      270,  142,  270,  313,  322,  322,  126,  322,  129,  322,
      322,  322,  322,  142,  322,    0,  270,  270,  270,  270,
      270,  133,  270,  270,  306,  322,  322,  322,  322,  322,
      133,  322,  322,    0,  222,  270,  270,  270,  270,  270,
      270,  222,  322,  322,  322,  322,  322,  322,    0,  270,
      270,  270,  270,  270,  148,  322,  322,  322,  322,  322,
      148,    0,  270,  270,  270,  132,  134,  322,  322,  322,
      132,  134,    0,  270,  127,  130,  322,  127,  130,    0,
      270,  322,    0,  270,  322,  154,   85,   85,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    3,    4,
        5,    5,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,    1,    1,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   43,   46,   43,   47,   48,   49,
       43,   50,   51,   52,   53,   54,   43,   55,   43,   43,
       56,   57,   58,   59,   60,    1,   61,   62,   63,   64,

       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   86,   87,   88,   89,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,   90,
        1,   91,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[93] =
    {   0,
        1,    1,    1,    2,    1,    1,    1,    1,    3,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    6,    5,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        1,    1,    1,    1,    1,    8,    8,    8,    8,    7,
        7,    3,    3,    9,    9,    9,    3,    3,   10,    3,
        3,    3,    9,    3,    3,    1,    1,    1,   11,    3,
        8,    8,    8,    8,    7,    7,    3,    3,    9,    9,
        3,    9,    3,    3,    3,   10,    3,    3,    3,    3,
        9,    3,    3,    3,    3,    3,   11,    1,   12,    1,
        1,    1

    } ;

static yyconst flex_int16_t yy_base[2936] =
    {   0,
        0,    0,    0,    0,   89,   90, 4391, 4390,   92,  108,
     4304, 4303,   98,  103,  104,  110,  115,  117,   94,  116,
      122,  129,  192,    0,  284,    0,  133,  154,  374,  377,
      380,  391,    0,    0,    0,    0, 4391, 4396, 4396,  133,
     4396, 4396,   69,  385,  476,    0, 4356,  129, 4332, 4354,
      132,  121,  384,  149,  539,  605, 4356, 4396,  110, 4352,
      141,  165,  387,  415, 4351,  651,   72,  103,  354,  105,
      344,  352, 4309,  351,  358, 4302,  374,  370,  110, 4317,
      376,  404,  463,  388,  408, 4396,  355,    0, 4396, 4361,
     4365,    0, 4396, 4396,  480, 4396, 4396,  434,  487, 4372,

     4374,  425,    0, 4396,    0,  397, 4396, 4396, 4396, 4396,
     4396, 4396, 4396, 4396, 4396, 4396, 4396, 4374, 4396, 4396,
      461, 4372, 4396, 4372, 4396, 4396,    0, 4396, 4370, 4313,
     4300, 4296, 4309, 4291, 4303, 4396, 4364, 4396, 4396,  453,
      522,    0, 4332,  485, 4396, 4396, 4331,  386, 4396,  504,
      506, 4330,  713,  777, 4332,  452, 4328,  459,  574,  516,
     4327,  823,  103,  448,  527,  453,  457,  458, 4285,  387,
      481, 4278,  489,  524,  493, 4293,  538,  576,  499,  478,
      530,  515, 4396, 4396, 4396, 4396, 4396, 4354, 4396, 4396,
     4396, 4352, 4396, 4352, 4396, 4396, 4396, 4350, 4293, 4277,

     4276, 4396,  607,  903, 4396, 4396, 4396,  565,  605, 4396,
      606,  609,    0,  610,  612,  635,    0,  982, 1061, 4285,
     4285, 4279, 4269, 4272,    0, 4396, 4396, 4396,  579, 4333,
     4396, 4396, 4396, 4396, 4396, 4329, 4396, 4324, 1098, 4396,
     4396, 4396, 1150,  623,  640,  616,  810, 4396,  679,    0,
      743, 1204,  709,  866, 4396, 4308, 4307, 4305, 4396, 4305,
      661, 4281,  790, 4301,  592, 4261, 4270, 4259, 4252, 4396,
     4248,  514, 4253, 4396,  568, 4255, 4254, 4263, 4262, 4253,
     4250, 4244, 4255, 1250, 4258, 4256, 4259, 4245, 4238, 4256,
     4243, 4235, 4239, 4248,  577, 4251, 4250, 4236,  628, 4228,

     4229, 4226,  621, 4232, 4230, 4226, 4234, 4222,    0,  592,
     4240, 4226, 4219, 4225, 4214, 4224, 4229, 4229,  604, 4231,
      629, 4217,  465,  621, 4222, 4217,  635, 4204, 4212, 4280,
      643, 4217, 4207,  647, 4216, 4214, 4396, 4396,    0, 4396,
     4396,    0,  718,  965,  720, 4396,    0,    0,  995, 1331,
     4213,  735, 4396, 4274,    0,    0,  740, 4396, 4277,  743,
     4396, 4396, 4276,    0, 4396,  818, 4209, 4213, 4213, 4214,
     4211, 4270, 4396, 4396, 4396, 4396, 4396, 4396,    0, 1368,
      707,  870,    0, 1026, 1429,  987, 1088, 4396,  672, 4197,
     4196, 4205, 4204, 4195, 4192, 4186, 4197, 1475, 4200, 4198,

     4201, 4187, 4180, 4198, 4185, 4177, 4181, 4190,  684, 4193,
     4192, 4178,  708, 4170, 4171, 4168,  801, 4174, 4172, 4168,
     4176, 4164,    0,  689, 4182, 4168, 4161, 4167, 4156, 4166,
     4171, 4171,  739, 4173,  777, 4159,  709,  764, 4164, 4159,
      740, 4146, 4154,  741, 4160, 4150,  747, 4159, 4157, 4222,
     4396, 4221, 4396, 4141, 4142, 4149,  846,  904, 4396,  880,
     1556,  892, 4154, 4154, 4144, 4156, 4152, 4396, 4396, 4396,
     1181,  911, 1593, 1237, 1328, 1124, 1645, 1358,  825, 4192,
     4189, 4396,  849, 4190, 4187, 4396, 4396, 4176, 4396, 4396,
     4150, 4140, 4132, 4143,  802, 4125, 4136, 4135, 4131, 4124,

     4120, 4131, 4124, 4123, 4124, 4133, 4121, 4133, 4115, 4131,
     4113, 4144, 4140, 4141,  841, 4106,  709, 4121, 4101,  901,
     4112, 4122,  880,  857, 4116,  921, 4116,  961,  960,  670,
      839, 4115, 4116, 4099, 4105, 4112, 4097,    0, 4099, 4101,
     4111, 4106, 4107, 4091, 4089,  774, 4095, 4105, 4100, 4102,
     4098, 4089, 4096, 4088, 4094, 4097, 4096,    0, 4091, 4080,
     4085,    0, 4071, 4085, 4090, 4085,    0, 4077, 4069, 4069,
     4064, 4065, 4072, 4074, 4062, 4060, 4062, 4065, 4073, 4057,
     4055, 4055, 4058, 4054,  869,    0, 4067, 4056, 4061, 4055,
     4048, 4063, 4065, 4064, 4052,  992, 1057, 4396, 1072, 1715,

     1098, 4049, 4050, 4046, 4059, 4041, 4053, 4050, 4051, 4044,
     4040, 4033, 1423, 1294,  918, 4089, 4086, 4396,  937, 4087,
     4084, 4396, 4039, 4032, 4031, 4032, 4041, 4029, 4041, 4023,
     4039, 4021, 4052, 4048, 4049, 1001, 4014,  899, 4029, 4009,
     1036, 4020, 4030, 1173,  904, 4024, 1104, 4024, 1202, 1031,
      768, 1135, 4023, 4024, 4007, 4013, 4020, 4005,    0, 4007,
     4009, 4019, 4014, 4015, 3999, 3997,  934, 4003, 4013, 4008,
     4010, 4006, 3997, 4004, 3996, 4002, 4005, 4004,    0, 3999,
     3988, 3993,    0, 3979, 3993, 3998, 3993,    0, 3985, 3977,
     3977, 3972, 3973, 3980, 3982, 3970, 3968, 3970, 3973, 3981,

     3965, 3963, 3963, 3966, 3962,  964,    0, 3975, 3964, 3969,
     3963, 3956, 3971, 3973, 3972, 3960, 3956, 3955, 3968, 4396,
     3959, 3953, 3961, 3958, 3959, 1274, 1752, 1499, 1804, 1298,
     1419,  634, 1433, 1546, 1583, 3994, 3993, 4396, 1238, 3941,
     3945, 3938, 3953, 3936, 3938, 3951, 3935, 3934, 3951, 3946,
     3943, 3936, 3936, 3931, 3937, 3940, 3937, 3938, 3922, 3936,
     3956, 3949, 3946, 3928, 3923, 3915, 3925, 3928,  953, 3929,
      972, 3912, 3916, 3914, 3910, 3912, 3907, 3925, 3923, 1020,
     3906, 3922, 3919, 3919, 3913, 3915, 3916, 3898, 3897,  887,
     3907, 3910, 3906, 3907, 3907, 3891, 3883, 3891, 3894, 3893,

     3939, 3902, 3893, 3898, 3888, 3879, 3889, 3894, 3896,    0,
        0, 3884,    0, 3886,    0, 3874, 3872, 3882, 3870, 3868,
     3868, 3875,    0,    0, 3870, 3876, 3866, 3871, 3862, 3867,
        0, 3866, 3874,    0, 3876, 3858, 3860, 3870, 3873, 3872,
     3867, 3862, 3841, 3830, 3818, 3804, 3816, 3788, 3774, 3779,
     3778, 3759,    0, 3735, 3701, 1341, 3698, 3696, 3693, 3657,
        0, 3657, 3658, 3665, 4396, 3664, 3659, 3654, 3632, 3622,
     3608, 3588,    0, 3594, 3570, 3572, 1632, 1681, 1677, 1739,
     3612, 3611, 3572, 3554, 3543,   46,  317,  336,  440,  490,
      517,  578,  703,  736,  739,  742,  744,  765,  804,  815,

     1001,  836, 1050,  822,  869,  875,  893,  903,  921,  955,
      981, 1021,  967,  987, 1007, 1017, 1028, 1041, 1045, 1053,
     1057, 1122, 1069, 1074, 1074, 1092, 1096, 1083, 1081, 1105,
     1114, 1115, 1163, 1128, 1123, 1130, 1126, 1132, 1145, 1154,
     1158,    0,    0, 1150,    0, 1156,    0, 1156, 1156, 1168,
     1158, 1159, 1161, 1170,    0,    0, 1167, 1185, 1178, 1196,
     1192, 1204,    0, 1206, 1216,    0, 1221, 1211, 1215, 1227,
     1232, 1244, 1241, 1238, 1229, 1231, 1232, 1240, 1256, 1248,
     1255, 1264, 1268, 1265,    0, 1280, 1262, 1443, 1272, 1281,
     1295, 1284,    0, 1289, 1293, 1311, 1306, 4396, 1300, 1308,

     1303, 1621, 1311, 1319, 1395, 1363, 1362, 4396, 1350, 1571,
     1814, 1856, 1396, 1378, 1381, 4396, 1333, 1342, 1343, 1356,
     1351, 1359, 1371, 1355, 1372, 4396, 1356, 1377, 1375, 4396,
     1386, 1392,    0, 1390, 1393, 1392, 1402, 1400, 1412, 1422,
     1442, 1437, 1451, 1423, 1434, 1418, 1425, 1443, 1432, 1430,
     1443, 1451, 1465, 1451, 1471, 1472, 1471, 1473, 1485, 1491,
     1479, 1479, 1582,    0, 1618, 1484, 1470, 1484, 1495, 1521,
     1608, 1525, 1519, 1522, 1529,    0, 1528, 1562, 1566, 1565,
        0, 1566, 1559, 1580,    0, 1583, 1576, 1585, 1581, 1598,
     1610, 1627, 1631,    0,    0,    0, 1630, 1624, 1621, 1635,

     1644, 1647, 1636, 1661, 1654, 1657,    0, 1667, 1667,    0,
     1661, 1659, 1668, 1672, 1674, 1675, 1693, 1694, 1679, 1691,
     1690,    0, 1701, 1701, 1706, 1690, 1703, 1725, 1723,    0,
     1723, 1725, 1729, 1725,    0, 1720,    0, 1734, 1730, 1740,
        0, 1866, 1734, 1737, 1732, 1730, 1725, 1741, 1743, 1734,
     1734, 1790, 1791, 1790, 4396, 1796, 1793, 1821, 4396, 1773,
     1782,    0, 1780, 1780, 1776, 1786, 1776, 1788, 1797, 1817,
     1812, 1825, 1795, 1803, 1786, 1793, 1803, 1791, 1789, 1799,
     1807, 1810, 1818, 1838, 1842, 1841, 1843, 1846, 1842, 1841,
     1840, 1888,    0, 1868, 1846, 1831, 1835, 1847, 1852, 1896,

     1856, 1852, 1847, 1860,    0, 1855, 1873, 1879, 1875,    0,
     1876, 1861, 1882,    0, 1874, 1868, 1879, 1873, 1890, 1880,
     1894, 1895,    0,    0,    0, 1892, 1884, 1874, 1888, 1896,
     1897, 1883, 1901, 1891, 1894,    0, 1903, 1903,    0, 1897,
     1894, 1891, 1892, 1893, 1894, 1912, 1913, 1897, 1909, 1905,
        0, 1916, 1915, 1919, 1903, 1916, 1924, 1922,    0, 1922,
     1924, 1928, 1924,    0, 1917,    0, 1931, 1924, 1934,    0,
     1934, 1927, 1932, 1995, 1996, 1939, 1998, 1973, 2011, 1982,
     2021, 1984, 1936, 1936, 1951, 1965, 1966, 1951, 1987, 1973,
     1980, 1990, 1977, 4396, 1985, 1997, 1996, 1995, 2000, 1994,

     1990, 1987, 2006, 2006, 2024, 2019, 2035, 2001, 2016, 2008,
     1998, 2007, 2008, 2001, 2003, 2008, 2011, 2023, 2016, 2009,
     2027, 2033, 2034, 2012, 2023, 2039, 2027, 2079, 2080, 2079,
        0, 2043, 2046, 2037, 2045, 2044, 2037, 2038, 2054, 2055,
     2047, 2061, 2051, 2060, 2061, 2062, 2055, 2106, 2105,    0,
     2071, 2054, 2068, 2068, 2074, 2067, 2076, 2063, 2074, 2060,
        0, 2076,    0, 2066, 2082, 2079, 2073, 2068, 2063, 2067,
     2073, 2070,    0,    0,    0, 2082,    0, 2067,    0,    0,
     2088, 2093, 2077, 2081, 2082, 2093, 2079,    0, 2095, 2098,
        0,    0,    0, 2102,    0,    0, 2083, 2104, 2099,    0,

     2093,    0, 2102, 2096, 2097, 2090, 2168, 2098, 2113, 2109,
     2096, 2101, 2113,    0, 2117, 2119, 2151, 2152, 2124, 2119,
     2118, 2123, 2117, 2113, 2107, 2137, 2137, 2155, 2149, 2165,
     2131, 2146, 2138, 2128, 2137, 2138, 2131, 2133, 2138, 2141,
     2153, 2145, 2138, 2154, 2159, 2160, 2138, 2149, 2165, 2153,
     2205, 2206, 2205,    0, 2169, 2172, 2163, 2171, 2170, 2163,
     2164, 2180, 2181, 2173, 2187, 2177, 2186, 2187, 2188, 2181,
     2232, 2231,    0, 2197, 2180, 2194, 2194, 2200, 2193, 2202,
     2189, 2200, 2186,    0, 2202,    0, 2192, 2208, 2205, 2199,
     2194, 2189, 2193, 2199, 2196,    0,    0,    0, 2208,    0,

     2193,    0,    0, 2214, 2219, 2203, 2207, 2208, 2219, 2205,
        0, 2221, 2224,    0,    0,    0, 2228,    0,    0, 2209,
     2230, 2225,    0, 2219,    0, 2228, 2222, 2223, 2216, 2217,
     2226, 2296,    0, 2297, 2298,    0, 2299, 2282, 2292, 2250,
     2244, 4396, 2262, 2254, 4396, 4396, 2266, 2246, 2269, 4396,
     4396, 2251, 2265,    0, 2248, 2262, 2272, 2278, 2262, 2281,
     2282, 2295, 2304, 2306, 2281,    0, 2285, 2279, 2289, 2285,
     2291, 2276, 2268, 2274, 2276, 2296, 2287, 2338, 2294, 2293,
     2287, 2292, 2299, 2294, 2292, 2292, 2303, 2304, 2294, 2315,
     2311, 2348,    0,    0,    0, 2299, 2300, 2319, 2307, 2310,

     2307, 2303, 2305, 2322, 2321, 2327, 2316, 2321, 2319, 2332,
        0, 2313, 2331, 2335,    0,    0, 2337, 2329, 2335, 2324,
     2329, 2328, 2339, 2338, 2345, 2337, 2332, 2343, 2337,    0,
     2338, 2344, 2336, 2348, 2349,    0, 2335,    0,    0, 2353,
        0, 2351, 2340,    0, 2354, 2342, 2341, 2361, 2358, 2352,
        0, 2360, 2362,    0, 2362,    0, 2363, 2369, 2366, 2355,
     2354,    0, 2355, 2355, 2356, 2370,    0, 2353, 2366, 2376,
     2379, 2363, 2382, 2383, 2396, 2405, 2407, 2382,    0, 2386,
     2380, 2390, 2386, 2392, 2377, 2369, 2375, 2377, 2397, 2387,
     2438, 2392, 2390, 2384, 2389, 2396, 2391, 2389, 2389, 2400,

     2401, 2391, 2412, 2408, 2445,    0,    0,    0, 2396, 2397,
     2416, 2404, 2407, 2404, 2400, 2402, 2419, 2418, 2424, 2413,
     2418, 2416, 2429,    0, 2410, 2428, 2432,    0,    0, 2434,
     2426, 2432, 2421, 2426, 2425, 2436, 2435, 2442, 2434, 2429,
     2440, 2434,    0, 2435, 2441, 2433, 2445, 2446,    0, 2432,
        0,    0, 2450,    0, 2448, 2437,    0, 2451, 2439, 2438,
     2458, 2455, 2449,    0, 2457, 2459,    0, 2459,    0, 2456,
     2461,    0, 2524,    0, 2525, 2468, 4396, 2465, 4396, 2469,
     2471, 2472,    0,    0,    0, 2512,    0, 2457, 2463, 2477,
     2468, 2500, 2492, 2493, 2480, 2479, 2465, 2473, 2488, 2465,

     2490, 2486, 2476,    0, 2484, 2482, 2470, 2533, 2483, 2498,
     2480, 2484, 2487, 2482, 2494, 2499, 2487, 2487, 2507,    0,
     2508,    0, 2489, 2505, 2492, 2490, 2508, 2494, 2502, 2511,
        0, 2492, 2518, 2507, 2504, 2506, 2501, 2523, 2509,    0,
        0,    0, 2522, 2526,    0, 2515, 2524,    0, 2529, 2521,
     2519, 2518, 2530, 2522,    0, 2535, 2518,    0,    0,    0,
     2532,    0,    0, 2534,    0,    0, 2520,    0, 2525,    0,
        0,    0, 2537,    0, 2542, 2542, 2544, 2540, 2537,    0,
        0,    0, 2585,    0, 2530, 2536, 2550, 2541, 2573, 2565,
     2566, 2553, 2552, 2538, 2546, 2561, 2538, 2563, 2559, 2549,

        0, 2557, 2555, 2543, 2606, 2556, 2571, 2553, 2557, 2560,
     2555, 2567, 2572, 2560, 2560, 2580,    0, 2581,    0, 2562,
     2578, 2565, 2563, 2581, 2567, 2575, 2584,    0, 2565, 2591,
     2580, 2577, 2579, 2574, 2596, 2582,    0,    0,    0, 2595,
     2599,    0, 2588, 2597,    0, 2602, 2594, 2592, 2591, 2603,
     2595,    0, 2608, 2591,    0,    0,    0, 2605,    0,    0,
     2607,    0,    0, 2593,    0, 2598,    0,    0,    0, 2602,
     4396, 2595, 2597, 2605, 2606, 2605, 2657, 2658, 2657, 2598,
        0, 2605, 2610, 2626, 2627, 2628, 2629, 2630, 2611, 2632,
        0, 2633,    0, 2631, 2630, 2621, 2625,    0, 2669, 2627,

     2622, 2632, 2617, 2642, 2636, 2623, 2628, 2627, 2628, 2644,
     2650, 2633, 2652, 2634, 2649, 2648, 2631,    0, 2639, 2645,
     2658, 2655, 2650, 2649, 2659,    0, 2659, 2646, 2667,    0,
     2659, 2669, 2656, 2666, 2660,    0,    0, 2653,    0,    0,
        0, 2655, 2672, 2676, 2677, 2660, 2660, 2666, 2655, 2719,
     2720, 2719, 2660,    0, 2667, 2672, 2688, 2689, 2690, 2691,
     2692, 2673, 2694,    0, 2695,    0, 2693, 2692, 2683, 2687,
        0, 2731, 2689, 2684, 2694, 2679, 2704, 2698, 2685, 2690,
     2689, 2690, 2706, 2712, 2695, 2714, 2696, 2711, 2710, 2693,
        0, 2701, 2707, 2720, 2717, 2712, 2711, 2721,    0, 2721,

     2708, 2729,    0, 2721, 2731, 2718, 2728, 2722,    0,    0,
     2715,    0,    0,    0, 2717, 2734, 2733, 2748, 2721, 2736,
     2721, 2729, 2775,    0,    0,    0, 2726, 2743, 2747, 2747,
     2750, 2751, 2754, 2750, 2755, 2757,    0,    0, 2744,    0,
        0, 2750, 2755, 2754,    0, 2750, 2745, 2755, 2765, 2745,
     2749, 2745,    0, 2770, 2757,    0, 2755, 2773,    0, 2770,
     2763, 2761, 2768, 2777, 2777,    0, 2783, 2784, 2785,    0,
     2768,    0, 2787, 2788, 2764, 2765, 2786, 2791, 2793,    0,
     2789, 2786, 2776, 2792, 2829,    0,    0,    0, 2780, 2797,
     2801, 2801, 2804, 2805, 2808, 2804, 2809, 2811,    0,    0,

     2798,    0,    0, 2804, 2809, 2808,    0, 2804, 2799, 2809,
     2819, 2799, 2803, 2799,    0, 2824, 2811,    0, 2809, 2827,
        0, 2824, 2817, 2815, 2822, 2831, 2831,    0, 2837, 2838,
     2839,    0, 2822,    0, 2841, 2842, 2818, 2819, 2840, 2845,
     2847, 2828, 4396, 4396, 2844, 2835,    0, 2846, 2851,    0,
     2835, 2845, 2832, 2842, 2850,    0,    0,    0, 2859, 2849,
     2856, 2838, 2863,    0, 2865, 2852, 2860, 2854, 2860, 2855,
     2870, 2868, 2872,    0, 2865, 2872, 2870, 2857, 2858, 2878,
     2862, 2863, 2881,    0, 2883, 2881, 2885, 2886, 2882, 2870,
     2889,    0, 2874, 2873, 2880,    0, 2879, 2868, 2895,    0,

        0, 2891, 2896,    0, 2880, 2890, 2877, 2887, 2895,    0,
        0,    0, 2904, 2894, 2901, 2883, 2908,    0, 2910, 2897,
     2905, 2899, 2905, 2900, 2915, 2913, 2917,    0, 2910, 2917,
     2915, 2902, 2903, 2923, 2907, 2908, 2926,    0, 2928, 2926,
     2930, 2931, 2927, 2915, 2934,    0, 2919, 2918, 2925, 2938,
     2921, 4396, 2920, 2923, 2930, 2925, 2929, 2925, 2931, 2938,
     2930, 2931, 2950, 2942, 2946, 2937, 2954, 2955, 2951,    0,
        0, 2931, 2935, 2947, 2955, 2949, 2943, 2943,    0, 2955,
     2960, 2963, 2951, 2967, 2950, 2948, 2959,    0,    0, 2969,
     2968,    0, 2969, 2955,    0, 2956, 2972, 2957, 2961, 2968,

     2963, 2967, 2963, 2969, 2976, 2968, 2969, 2988, 2980, 2984,
     2975, 2992, 2993, 2989,    0,    0, 2969, 2973, 2985, 2993,
     2987, 2981, 2981,    0, 2993, 2998, 3001, 2989, 3005, 2988,
     2986, 2997,    0,    0, 3007, 3006,    0, 3007, 2993,    0,
     4396, 3005, 3014, 2996,    0, 3016, 3005, 2997, 3008, 3002,
     3021, 3018,    0, 3017, 3006, 3021, 3026,    0,    0, 3023,
     3029, 3030, 3012, 3032, 3013,    0, 3032,    0, 3030, 3028,
     3012, 3019, 3038, 3039, 3021, 3035, 3028,    0, 3044, 3045,
     3032, 3027,    0, 3047, 3036, 3028, 3039, 3033, 3052, 3049,
        0, 3048, 3037, 3052, 3057,    0,    0, 3054, 3060, 3061,

     3043, 3063, 3044,    0, 3063,    0, 3061, 3059, 3043, 3050,
     3069, 3070, 3052, 3066, 3059,    0, 3061, 3056,    0, 3052,
     3069, 3074,    0, 3060, 3069, 3081, 3069, 3079, 3066, 3068,
     3069, 3087, 3088, 3073, 3090, 3076, 3084, 3097, 3089,    0,
        0, 3087, 3081, 3101, 3083, 3097, 3083, 3105, 3097,    0,
     3082, 3099, 3104,    0, 3090, 3099, 3111, 3099, 3109, 3096,
     3098, 3099, 3117, 3118, 3103, 3120, 3106, 3114, 3127, 3119,
        0,    0, 3117, 3111, 3131, 3113, 3127, 3127, 3126, 3136,
     3134, 3135, 3120, 3128, 3137, 3127, 3123, 3144, 3138,    0,
     3127, 3132, 3129, 3134, 3145, 3133, 3147,    0, 3148, 3151,

     3152, 3135, 3138, 3140,    0,    0, 3145,    0, 3145, 3161,
     3159, 3160, 3145, 3153, 3162, 3152, 3148, 3169, 3163,    0,
     3152, 3157, 3154, 3159, 3170, 3158, 3172,    0, 3173, 3176,
     3177, 3160, 3163, 3165,    0,    0, 4396, 3169, 3170,    0,
     3166,    0,    0, 3187, 3182, 3174, 3187,    0, 3172, 3178,
     3174, 3181, 3177, 3177, 3180, 3200, 3189,    0, 3197,    0,
     3235, 3195, 3191, 3191,    0, 3187,    0,    0, 3208, 3203,
     3195, 3208,    0, 3193, 3199, 3195, 3202, 3198, 3198, 3201,
     3221, 3210,    0, 3218,    0, 3256, 3211, 3220, 3212, 3216,
        0, 3223, 3215, 3222, 3213, 3208, 3225, 3216, 3211, 3217,

     3235, 3219, 3220, 3240, 3242,    0, 3228,    0, 3238, 3230,
     3234,    0, 3241, 3233, 3240, 3231, 3226, 3243, 3234, 3229,
     3235, 3253, 3237, 3238, 3258, 3260,    0, 3261,    0, 3244,
     3248,    0, 3251, 3258, 3246,    0, 3260, 3248,    0, 3251,
     3250, 3253, 3257, 3254, 3271, 3261,    0, 3258, 3262,    0,
     3265, 3272, 3260,    0, 3274, 3262,    0, 3265, 3264, 3267,
     3271, 3268, 3285, 3288,    0, 3287, 3275, 3278, 3275, 3280,
     3277, 3275, 3282, 3277,    0, 3280, 3288, 3301,    0, 3299,
     3287, 3290, 3287, 3292, 3289, 3287, 3294, 3289,    0, 3292,
     3300, 3293, 3313, 3314,    0, 3295,    0, 3296, 3315, 3301,

     3317,    0, 3320, 3322, 3322, 3323,    0, 3304,    0, 3305,
     3324, 3310, 3326,    0, 3329, 3311, 3320, 3313, 3331, 3332,
     3316,    0, 3317, 3319,    0, 3327, 3320, 3338, 3339, 3323,
        0, 3324, 3326, 3328,    0, 3338, 3328, 3329, 3335, 3336,
     3333,    0, 3344, 3334, 3335, 3341, 3342, 3339, 3350, 3358,
     3346, 3347, 3345, 3346,    0, 3363, 3351, 3352, 3350, 3351,
        0, 3368, 3359, 3354, 3355,    0,    0, 3362, 3357, 3358,
        0,    0, 3356, 3373,    0,    0, 3374,    0,    0, 3360,
     3381, 3382, 3378, 3368, 3369, 4396,    0,    0, 4396, 3445,
     3457, 3469, 3481, 3493, 3505, 3517, 3529, 3541, 3553, 3565,

     3577, 3589, 3601, 3613, 3625, 3635, 3645, 3657, 3669, 3681,
     3693, 3705, 3716, 3724, 3732, 3742, 3749, 3750, 3758, 3770,
     3782, 3794, 3806, 3818, 3829, 3837, 3841, 3849, 3861, 3868,
     3872, 3882, 3894, 3906, 3918
    } ;

static yyconst flex_int16_t yy_def[2936] =
    {   0,
     2890, 2890, 2889,    3, 2891, 2891, 2892, 2892, 2893, 2893,
     2894, 2894, 2895, 2895, 2896, 2896, 2897, 2897, 2898, 2898,
     2899, 2899, 2889,   23, 2889,   25, 2900, 2900, 2901, 2901,
     2902, 2902, 2903, 2903, 2903, 2903, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2904, 2905, 2906, 2889, 2889, 2907, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2906, 2889, 2889, 2889, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2889, 2889, 2908, 2889, 2889,
     2889, 2909, 2889, 2889, 2889, 2889, 2889, 2910, 2911, 2889,

     2889, 2889, 2912, 2889, 2913, 2913, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2914, 2889, 2889, 2914,
     2914, 2914, 2914, 2914, 2914, 2889, 2889, 2889, 2889, 2889,
     2889, 2915, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,

     2889, 2889, 2889, 2905, 2889, 2889, 2889, 2904, 2904, 2889,
     2904, 2904, 2904, 2904, 2904, 2904, 2905, 2905, 2916, 2905,
     2905, 2905, 2905, 2905, 2906, 2889, 2889, 2889, 2907, 2907,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889,   55, 2917, 2889, 2889, 2889, 2889, 2918,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2904, 2907, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,

     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2889, 2889, 2919, 2889,
     2889, 2920, 2889, 2921, 2922, 2889, 2922, 2921, 2921, 2923,
     2921, 2922, 2889, 2889, 2924, 2925, 2925, 2889, 2889, 2889,
     2889, 2889, 2889, 2926, 2889, 2926, 2926, 2926, 2926, 2926,
     2926, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2915, 2889,
     2889, 2889, 2927, 2889, 2889, 2889, 2889, 2889, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,

     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2928, 2928, 2889, 2928,
     2928, 2928, 2929, 2929, 2929, 2929, 2929, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2930, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,

     2889, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2923, 2923, 2889, 2923, 2923,

     2923, 2921, 2926, 2926, 2926, 2926, 2926, 2926, 2926, 2926,
     2926, 2926, 2889, 2927, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,

     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2889, 2889, 2889, 2889,
     2929, 2929, 2929, 2929, 2929, 2889, 2889, 2889, 2889, 2889,
     2889, 2931, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,

     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2889, 2921, 2926, 2926, 2926, 2926,
     2926, 2926, 2926, 2926, 2926, 2926, 2889, 2889, 2889, 2889,
     2889, 2889, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,

     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2889, 2889, 2889, 2929,

     2929, 2929, 2929, 2929, 2889, 2889, 2889, 2889, 2931, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,

     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2921, 2926, 2926, 2926, 2926, 2926, 2926, 2926, 2926,
     2926, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,

     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2889, 2889, 2929, 2932, 2929, 2929, 2933, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2906, 2906, 2906, 2906, 2906,

     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,

     2906, 2906, 2906, 2906, 2906, 2906, 2921, 2926, 2926, 2926,
     2926, 2926, 2926, 2926, 2926, 2926, 2889, 2889, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,

     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2889,
     2889, 2934, 2932, 2932, 2935, 2933, 2933, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,

     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2926, 2926, 2926, 2926,
     2926, 2926, 2926, 2926, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,

     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2889,
     2889, 2934, 2934, 2935, 2935, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,

     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2926, 2926, 2926, 2926, 2926, 2926, 2926, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,

     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,

     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2926, 2926, 2926, 2926, 2926, 2926, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,

     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2889, 2889, 2889, 2889,
     2889, 2889, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2926, 2926,
     2926, 2926, 2926, 2926, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,

     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2889, 2889, 2889, 2889, 2889, 2889, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2926, 2926, 2926, 2926, 2926,

     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2889,
     2889, 2889, 2889, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2926, 2926, 2926, 2915, 2915,

     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2889, 2889, 2889, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2926, 2926,
     2926, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,

     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2889, 2889, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2926, 2926, 2926, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2889, 2889, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,

     2906, 2906, 2906, 2906, 2906, 2906, 2926, 2926, 2926, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2889, 2889, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2926, 2926, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2889, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,

     2906, 2906, 2906, 2906, 2906, 2906, 2926, 2926, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2889, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2926, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2889, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2926, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2889, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,

     2906, 2906, 2906, 2926, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2889, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2926, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2889, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2889, 2906,
     2906, 2906, 2906, 2906, 2906, 2915, 2915, 2915, 2915, 2915,
     2915, 2889, 2906, 2906, 2906, 2906, 2906, 2915, 2915, 2915,
     2915, 2915, 2889, 2906, 2906, 2906, 2915, 2915, 2915, 2889,
     2906, 2915, 2889, 2906, 2915, 2889, 2906, 2915,    0, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,

     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889
    } ;

static yyconst flex_int16_t yy_nxt[4489] =
    {   0,
       39,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   39,   39,   50,   51,   39,   52,   53,   54,
       55,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       57,   58,   59,   60,   61,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   62,   46,   46,   46,   46,
       46,   46,   62,   46,   46,   63,   64,   39,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   46,   74,   46,
       46,   75,   76,   77,   78,   79,   46,   80,   81,   82,
       83,   84,   85,   46,   46,   46,   86,   87,   39,   39,
       39,   39,   89,   89,   95,   96,   97,  107,   98,   99,

      106,  107,  205,   90,   90,  106,  107,  107,   91,   91,
       95,   96,   97,  107,   98,   99,  110,  111,  107,  107,
      107, 1163,  110,  111,  118,  119,  120,  113,  114,  113,
      114,  118,  119,  120,  121,  203,  107,  100,  234,  227,
      204,  121,  256,  257,  100,  184,  185,  232,  101,  186,
      291,  116,  292,  100,  235,  236,  107,  107,  206,  207,
      100,  107,  228,  240,  101,  233,  184,  185,  241,  299,
      186,  261,  102,  116,  259,  260,  262,  293,  122,  300,
      294,  405,  242,  406,  108,  122,  107,  319,  102,  108,
      320,  107,  123,  123,  124,  125,  126,  123,  123,  123,

      127,  123,  123,  123,  123,  128,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  123,  129,  123,
      123,  130,  131,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  132,  127,  127,  133,  127,  127,
      127,  134,  127,  135,  127,  127,  127,  127,  123,  123,
      123,  123,  123,  123,  136,  136,  137,  138,  139,  140,
      141,  136,  142,  143,  144,  136,  145,  146,  147,  148,

      149,  150,  151,  152,  153,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  155,  136,  156,  157,  158,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  159,
      160,  136,  161,  162,  163,  164,  165,  166,  167,  168,
      169,  142,  170,  142,  142,  171,  172,  173,  174,  175,
      142,  176,  177,  178,  179,  180,  181,  142,  142,  142,
      136,  182,  136,  136,  136,  136,  188,  189,  190,  188,
      189,  190,  194,  195,  196, 1164,  209,  191,  337,  263,
      191,  210,  197,  194,  195,  196,  211,  212,  237,  357,

     1165,  232,  238,  197,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  295,  301,  309,  302,  270,  233,
      304,  296,  311,  305,  310,  297,  306,  303,  298,  307,
      192,  352,  312,  192,  314,  317,  198,  264,  315,  199,
      346,  213,  338,  322,  323,  318,  200,  198,  214,  215,
      199,  265,  423,  354,  316,  324,  333,  200,  325,  266,
      424,  201,  334,  360,  267,  268,  202,  269,  326,  261,
      335,  327,  201,  361,  262,  336,  216,  202,  218,  271,
      272,  328,  343,  358,  256,  257,  205,  344,  329,  349,
      347,  330,  259,  260,  273,  227,  219,  219,  219,  219,

      219,  219,  219,  219,  219,  219, 1166,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  413,  228,  388,
      237,  234,  407,  373,  238,  408,  418,  414,  415,  419,
      416,  578,  420,  374,  375,  421,  331,  235,  236,  220,
      417,  332,  206,  207,  221,  425,  446,  222,  337,  428,
      579,  223,  447,  429, 1167,  426,  224,  243,  351,  244,
      244,  244,  244,  244,  244,  244,  244,  245,  245,  430,
      433,  210,  444,  434,  499,  246,  263,  445,  247,  248,
      271,  272,  249,  249,  249,  376,  377,  409,  500,  431,
      468,  249,  448,  250,  410,  273, 1168,  449,  411,  432,

      246,  412,  338,  247,  248,  436,  437,  251,  249,  203,
      249,  210,  210,  378,  204,  210,  210,  438,  210,  249,
      439,  213,  250,  243,  264,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  230,  475,  475,  265,  502,
      440,  210, 1169,  441,  247,  248,  266,  503,  253,  253,
      253,  267,  268,  442,  269,  542,  543,  253,  243, 2889,
      443,  213,  213,  561,  492,  213,  213,  210,  213,  247,
      248,  562,  571,  254,  253,  493,  253, 2889,  572,  247,
      248,  580, 1010,  553, 2889,  253,  275,  276,  277,  278,
      547,  213,  279,  548,  280,  574,  554,  281,  581,  549,

      555,  282,  283,  584,  247,  248, 2889,  575,  576, 1010,
      284,  588,  585,  285,  286,  592,  287,  213,  593,  288,
      343,  589,  249,  249,  249,  344,  346,  613,  613,  289,
      799,  249,  290,  380,  380,  380,  380,  380,  380,  380,
      380,  346,  357,  623,  800,  360, 1170,  249,  249,  381,
      249,  624,  253,  253,  253,  361,  382,  382,  382,  249,
      682,  253,  663,  664,  479,  382,  480,  383,  683,  481,
      668,  482,  768,  669,  381,  699,  347,  253,  253,  670,
      253,  384,  382,  769,  382, 1171,  249,  249,  249,  253,
     1172,  347,  263,  382,  700,  249,  383,  385,  385,  385,

      385,  385,  385,  385,  385,  385,  385,  692,  705,  709,
     1173,  249,  249,  693,  249,  713, 1174,  706,  714,  710,
      386,  386,  386,  249,  701,  476,  358,  476,  931,  386,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      264,  702,  932,  695, 1175,  387,  386,  736,  386,  459,
      460,  482,  817,  818,  265,  696,  697,  386,  389,  390,
      391,  392,  266,  674,  393,  801,  394,  267,  268,  395,
      269,  737, 1176,  396,  397,  486,  675,  743,  603, 1177,
      676,  744,  398,  459,  460,  399,  400,  483,  401,  484,
      604,  402,  485,  605,  486,  720,  460,  606, 1180,  607,

     1183,  403,  462,  802,  404,  218,  458,  459,  460,  253,
      253,  253,  764,  382,  382,  382,  803,  783,  253,  765,
      766,  784,  382,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  854,  253,  253,  462,  253,  382,  382,
      881,  382, 1184,  855,  618,  778,  253, 1073,  462, 1185,
      382,  472,  779,  780,  472,  472,  472,  781,  782,  882,
      462,  772,  900,  622,  915, 1074,  220,  349,  916,  773,
     1186,  221,  774,  901,  222,  775,  472, 1187,  223,  472,
      472,  786,  472,  224,  218,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  598,  599,  349,  787, 1188,

      788,  789,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  949,  950, 1189,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350, 1049, 1050,  796,  986,  791,
      386,  386,  386,  792, 1052,  793,  351,  797,  987,  386,
      794, 1190,  795, 1193,  798,  220, 1194,  615,  601,  616,
      221, 1053,  617,  222,  618,  386,  386,  223,  386,  597,
      598,  599,  224,  458,  459,  460,  351,  386, 1195,  382,
      382,  382,  896, 1178, 1179,  598,  599, 1196,  382,  897,
      898,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461, 1062, 1191, 1197,  382,  382,  904,  382,  928, 1063,

     1192,  865,  599, 1198,  905, 1199,  382,  906,  929,  619,
      907,  620, 1181,  601,  621,  930,  622,  462,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  601, 1182,
     1200,  386,  386,  386, 1201, 1204, 1205,  471,  472, 1206,
      386,  472,  472,  472,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  601, 1207,  386,  386, 1208,  386,
     1209,  933,  471,  472,  918, 1210,  472,  472,  386,  472,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
     1211,  919, 1202,  920,  921, 1212, 1213, 1214, 1215,  474,
      472, 1216, 1217,  472,  472,  472,  726, 1218,  726,  934,

     1203,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727, 1219,  935, 1220,  474,  472, 1221, 1222,  472,  472,
     1223,  472,  243, 1224,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252, 1225, 1226, 1227, 1228,  910, 1229,
     1230, 1231, 1232,  247,  248,  911,  912,  253,  253,  253,
      913,  914,  728, 1233,  728, 1234,  253,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729, 1235,  247,  248,
      923, 1236,  254,  253,  924,  253,  925, 1237, 1017, 1238,
     1239,  926, 1240,  927,  253,  512, 1018,  513, 1019, 1241,
     1242, 1243, 1244,  514,  727,  727,  727,  727,  727,  727,

      727,  727,  727,  727, 1245, 1246, 1247, 1248, 1249, 1250,
      515,  516,  517,  518,  519,  520,  521,  522,  523, 1251,
     1252,  524, 1253, 1254,  525,  526, 1255,  527,  528,  529,
     1256,  530,  531,  597,  598,  599, 1257,  879,  879,  879,
     1258,  730,  730,  730, 1259, 1264,  879, 1265,  475,  475,
      730,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600, 1266,  880,  879, 1267,  879,  730,  730, 1268,  730,
     1269,  730,  730,  730,  879, 1270,  732, 1271,  730, 1272,
      730, 1273, 1274, 1276, 1277, 1008, 1008,  601,  380,  380,
      380,  380,  380,  380,  380,  380,  731,  730, 1279,  730,

     1016,  733,  733,  733, 1131, 1016,  734, 1283,  730, 1132,
      733,  382,  382,  382, 1133, 1134, 1284, 1278, 1282, 1285,
      382, 1008, 1016, 1286, 1287, 1279,  735,  733, 1288,  733,
     1289, 1290, 1291,  734, 1292, 1293,  384,  382,  733,  382,
     1005, 1294, 1006,  613,  613, 1007, 1295, 1008,  382,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385, 1296,
     1297, 1298,  730,  730,  730, 1299,  877,  877,  877, 1300,
     1301,  730,  386,  386,  386,  877,  733,  733,  733, 1302,
     1303,  386, 1304, 1305, 1306,  733, 1307,  730,  730, 1308,
      730,  878,  877, 1309,  877, 1310, 1311,  387,  386,  730,

      386,  733,  733,  877,  733, 1312, 1260, 1313, 1314,  386,
      633, 1261,  634,  733, 1315, 1316, 1262, 1263,  635,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729, 1317,
     1318, 1319, 1320, 1321, 1322,  636,  637,  638,  639,  640,
      641,  642,  643,  644, 1323, 1326,  645, 1327, 1343,  646,
      647, 1344,  648,  649,  650, 1324,  651,  652,  458,  459,
      460, 1011, 1345, 1011, 1325, 1346, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461, 1280, 1347, 1280, 1350,
     1351, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,

     1281, 1352, 1353, 1328, 1013, 1329, 1014, 1354, 1330, 1015,
     1331, 1016,  462,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473, 1275, 1355, 1356,  733,  733,  733, 1357,
     1358, 1348,  474,  472, 1349,  733,  472,  472,  472, 1359,
     1360,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  733,  733, 1361,  733, 1362, 1363,  474,  472, 1364,
     1365,  472,  472,  733,  472,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  877,  877,  877, 1332, 1333,
     1334, 1335, 1336, 1366,  877,  472, 1337, 1367,  472,  472,
      472, 1368,  222, 1338, 1369, 1339, 1340, 1370, 1341, 1342,

      877,  877, 1152,  877, 1153, 1371, 1372, 1154, 1373, 1155,
      472, 1374,  877,  472,  472, 1375,  472,  597,  598,  599,
      879,  879,  879, 1376,  877,  877,  877, 1377, 1378,  879,
     1379, 1380, 1381,  877, 1382,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  879,  879, 1383,  879,  877,
      877, 1384,  877, 1385, 1386, 1387, 1388,  879, 1389, 1390,
     1156,  877, 1157, 1391, 1392, 1158, 1393, 1159, 1394, 1395,
     1396,  601,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  879,  879,  879, 1397, 1398, 1399, 1400, 1401,
     1402,  879,  472, 1403, 1404,  472,  472,  472, 1405, 1406,

     1408, 1409, 1410, 1411, 1412, 1413, 1414,  879,  879, 1415,
      879, 1416, 1417, 1155, 1155, 1159, 1155,  472, 1418,  879,
      472,  472, 1159,  472,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729, 1012, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012,  472, 1159, 1419,  472,  472,  472,
     1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
     1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1407,  472,
     1438, 1439,  472,  472, 1440,  472, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  472, 1441, 1442,  472,

      472,  472, 1443, 1444, 1445, 1446, 1447, 1449, 1450, 1451,
     1466, 1452, 1467, 1468, 1453, 1448, 1454, 1469, 1470, 1471,
     1473,  472, 1472, 1474,  472,  472, 1475,  472, 1455, 1456,
     1457, 1458, 1459, 1476, 1477, 1478, 1460,  351, 1479, 1480,
     1481, 1482, 1483, 1461, 1484, 1462, 1463, 1485, 1464, 1465,
     1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
     1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
     1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515,
     1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
     1526, 1527, 1528, 1529, 1530, 1531, 1532, 1534, 1275, 1535,

     1537, 1008, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1016, 1540, 1541, 1542,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219, 1538, 1543, 1538, 1544,
     1545, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1554, 1555,
     1556,  472, 1557, 1558,  472,  472,  472, 1559, 1560, 1561,
     1562, 1553, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
     1571, 1572, 1573, 1574, 1575, 1576,  472, 1577, 1578,  472,
      472, 1579,  472, 1580, 1581, 1588, 1582, 1589, 1590, 1583,

     1591, 1592, 1594, 1595, 1596, 1593, 1597, 1584, 1598, 1600,
     1603, 1599, 1604, 1585, 1586, 1587, 1601, 1602, 1605, 1606,
     1608, 1609, 1610, 1607, 1611, 1612, 1613, 1614, 1615, 1616,
     1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626,
     1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
     1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646,
     1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656,
     1407, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1155,
     1159, 1667, 1668, 1669, 1665, 1670, 1671, 1672,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350, 1666, 1673,

     1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683,
     1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693,
     1694, 1701, 1695, 1702, 1703, 1696, 1704, 1705, 1707, 1708,
     1709, 1706, 1710, 1697, 1711, 1713, 1716, 1712, 1717, 1698,
     1699, 1700, 1714, 1715, 1718, 1719, 1721, 1722, 1723, 1720,
     1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
     1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
     1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
     1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
     1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1773, 1534,

     1775, 1537, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
     1784, 1785,  472, 1786, 1787,  472,  472,  472, 1788, 1789,
     1790, 1791, 1792, 1793, 1794, 1795, 1797, 1798, 1799, 1800,
     1801, 1802, 1803, 1804, 1805, 1796, 1806,  472, 1807, 1808,
      472,  472, 1809,  472, 1810, 1811, 1812, 1813, 1814, 1815,
     1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,
     1826, 1827, 1828, 1829, 1830, 1831, 1833, 1834, 1835, 1836,
     1837, 1838, 1839, 1832, 1840, 1841, 1842, 1843, 1844, 1845,

     1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
     1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865,
     1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875,
     1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885,
     1886, 1887, 1888, 1889, 1890, 1891, 1892, 1894, 1895, 1896,
     1897, 1898, 1899, 1900, 1901, 1902, 1893, 1903, 1904, 1905,
     1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
     1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925,
     1926, 1927, 1928, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
     1929, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,

     1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
     1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965,
     1966, 1967, 1968, 1969, 1970, 1971, 1773, 1775, 1972, 1973,
     1974, 1975, 1976, 1977, 1980, 1978, 1981, 1982, 1979, 1983,
     1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993,
     1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
     2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
     2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023,
     2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033,
     2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043,

     2044, 2045, 2046, 2047, 2048, 2049, 2050, 2053, 2051, 2054,
     2055, 2052, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063,
     2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073,
     2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083,
     2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093,
     2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103,
     2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113,
     2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123,
     2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133,
     2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143,

     2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153,
     2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2164,
     2163, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173,
     2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183,
     2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193,
     2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203,
     2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213,
     2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223,
     2224, 2226, 2225, 2227, 2228, 2229, 2230, 2231, 2232, 2233,
     2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243,

     2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2256,
     2257, 2253, 2254, 2258, 2259, 2260, 2264, 2265, 2266, 2267,
     2268, 2269, 2270, 2271, 2272, 2273, 2255, 2274, 2275, 2261,
     2276, 2277, 2278, 2279, 2262, 2280, 2263, 2281, 2282, 2283,
     2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293,
     2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303,
     2304, 2305, 2306, 2310, 2311, 2307, 2308, 2312, 2313, 2314,
     2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327,
     2309, 2328, 2329, 2315, 2330, 2331, 2332, 2333, 2316, 2334,
     2317, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342, 2343,

     2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353,
     2354, 2355, 2356, 2358, 2357, 2360, 2361, 2362, 2363, 2359,
     2364, 2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373,
     2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383,
     2384, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 2393,
     2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2403, 2402,
     2405, 2406, 2407, 2408, 2404, 2409, 2410, 2411, 2412, 2413,
     2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423,
     2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433,
     2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443,

     2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453,
     2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463,
     2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473,
     2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483,
     2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493,
     2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503,
     2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513,
     2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523,
     2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533,
     2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541, 2542, 2543,

     2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551, 2552, 2553,
     2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2562, 2563,
     2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573,
     2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583,
     2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591, 2593, 2592,
     2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603,
     2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613,
     2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2623, 2622,
     2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633,
     2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643,

     2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653,
     2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663,
     2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673,
     2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683,
     2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693,
     2694, 2695, 2697, 2696, 2698, 2700, 2699, 2701, 2702, 2703,
     2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713,
     2714, 2715, 2716, 2718, 2717, 2719, 2721, 2720, 2722, 2723,
     2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733,
     2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743,

     2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753,
     2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763,
     2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773,
     2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783,
     2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793,
     2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803,
     2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813,
     2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823,
     2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833,
     2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843,

     2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853,
     2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863,
     2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873,
     2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2883,
     2884, 2885, 2886, 2887, 2888,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,  103,  103,  103,  103,  103,  103,  103,

      103,  103,  103,  103,  103,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,

      193,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  208, 1162,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  217, 1161,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  225, 1160,  622,
      618,  225,  225,  225,  225,  229, 1151,  229, 1150,  229,
      229,  229,  229,  229,  229,  229,  229,  339, 1149,  339,
      339, 1148,  339,  339,  339,  339,  339,  339,  339,  342,
     1147,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  345, 1146,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  348, 1145,  348,  348,  348,  348,  348,

      348,  348,  348,  348,  348,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  356, 1144,  356,  356,
      356,  356,  356,  356,  356,  356,  364, 1143, 1142, 1141,
      364,  364,  364,  364,  379, 1140, 1139, 1138,  379,  379,
      379,  379,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  245,  245,  478,  478,  339, 1137,
      339,  339, 1136,  339,  339,  339,  339,  339,  339,  339,
      342, 1135,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  348, 1130,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  345, 1129,  345,  345,  345,  345,

      345,  345,  345,  345,  345,  345,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  356,
     1128,  356,  356,  356,  356,  356,  356,  356,  356,  364,
     1127, 1126, 1125,  364,  364,  364,  364,  614,  614,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  217, 1124,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  478,  478,  478,  478,  478, 1009, 1009,
     1123, 1009, 1533, 1122, 1533, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1536, 1121, 1536, 1536, 1536, 1536,

     1536, 1536, 1536, 1536, 1536, 1536, 1772, 1120, 1772, 1772,
     1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1774, 1119,
     1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774,
     1118, 1117, 1116, 1115, 1114, 1113, 1112, 1111, 1110, 1109,
     1108, 1107, 1106, 1105, 1104, 1103, 1102, 1101, 1100, 1099,
     1098, 1097, 1096, 1095, 1094, 1093, 1092, 1091, 1090, 1089,
     1088, 1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080, 1079,
     1078, 1077, 1076, 1075, 1072, 1071, 1070, 1069, 1068, 1067,
     1066, 1065, 1064, 1061, 1060, 1059, 1058, 1057, 1056, 1055,
     1054, 1051, 1048, 1047, 1046, 1045, 1044, 1043, 1042, 1041,

     1040, 1039, 1038, 1037, 1036, 1035, 1034, 1033, 1032, 1031,
     1030, 1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022, 1021,
     1020,  486,  482, 1004, 1003, 1002, 1001, 1000,  999,  998,
      997,  996,  995,  994,  993,  992,  991,  990,  989,  988,
      985,  984,  983,  982,  981,  980,  979,  978,  977,  976,
      975,  974,  973,  972,  971,  970,  969,  968,  967,  966,
      965,  964,  963,  962,  961,  960,  959,  958,  957,  956,
      955,  954,  953,  952,  951,  948,  947,  946,  945,  944,
      943,  942,  941,  940,  939,  938,  937,  936,  922,  917,
      909,  908,  903,  902,  899,  895,  894,  893,  892,  891,

      890,  889,  888,  887,  886,  885,  884,  883,  622,  622,
      618,  618,  876,  875,  874,  873,  872,  871,  870,  869,
      868,  867,  866,  864,  863,  862,  861,  860,  859,  858,
      857,  856,  853,  852,  851,  850,  849,  848,  847,  846,
      845,  844,  843,  842,  841,  840,  839,  838,  837,  836,
      835,  834,  833,  832,  831,  830,  829,  828,  827,  826,
      825,  824,  823,  822,  821,  820,  819,  816,  815,  814,
      813,  812,  811,  810,  809,  808,  807,  806,  805,  804,
      790,  785,  777,  776,  771,  770,  767,  763,  762,  761,
      760,  759,  758,  757,  756,  755,  754,  753,  752,  751,

      750,  749,  748,  747,  746,  745,  742,  741,  740,  739,
      738,  486,  486,  482,  482,  725,  724,  723,  722,  721,
      719,  718,  717,  452,  450,  716,  715,  712,  711,  708,
      707,  704,  703,  698,  694,  691,  690,  689,  688,  687,
      686,  685,  684,  681,  680,  679,  678,  677,  673,  672,
      671,  667,  666,  665,  662,  661,  660,  659,  658,  657,
      656,  655,  654,  653,  632,  631,  630,  629,  628,  627,
      626,  625,  372,  612,  611,  610,  609,  608,  363,  359,
      352,  602,  595,  594,  591,  590,  261,  587,  586,  583,
      582,  577,  573,  570,  569,  568,  567,  566,  565,  564,

      563,  560,  559,  558,  557,  556,  552,  551,  550,  546,
      545,  544,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  532,  511,  510,  509,  508,  507,  506,  505,  504,
      501,  498,  497,  496,  495,  494,  491,  230,  490,  489,
      488,  487,  470,  469,  229,  467,  466,  465,  464,  463,
      456,  455,  454,  453,  452,  451,  450,  435,  427,  422,
      274,  258,  255,  242,  231,  226,  372,  371,  370,  369,
      368,  367,  366,  365,  363,  362,  359,  353,  352,  341,
      340,  321,  313,  308,  274,  258,  255,  231,  230,  226,
     2889,  104,  104,   93,   93,   37, 2889, 2889, 2889, 2889,

     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889
    } ;

static yyconst flex_int16_t yy_chk[4489] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    6,    9,    9,    9,   19,    9,    9,

       13,   13,   43,    5,    6,   14,   14,   15,    5,    6,
       10,   10,   10,   16,   10,   10,   15,   15,   17,   20,
       18,  886,   16,   16,   21,   21,   21,   17,   17,   18,
       18,   22,   22,   22,   21,   40,   27,    9,   52,   48,
       40,   22,   59,   59,    9,   27,   27,   51,    9,   27,
       67,   19,   67,   10,   52,   52,   13,   28,   43,   43,
       10,   14,   48,   54,   10,   51,   28,   28,   54,   70,
       28,   62,    9,   20,   61,   61,   62,   68,   21,   70,
       68,  163,   54,  163,   13,   22,   13,   79,   10,   14,
       79,   14,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   29,   29,   29,   30,
       30,   30,   31,   31,   31,  887,   44,   29,   87,   63,
       30,   44,   31,   32,   32,   32,   44,   44,   53,  106,

      888,  148,   53,   32,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   69,   71,   74,   71,   64,  148,
       72,   69,   75,   72,   74,   69,   72,   71,   69,   72,
       29,  102,   75,   30,   77,   78,   31,   63,   77,   31,
       98,   44,   87,   81,   81,   78,   31,   32,   44,   44,
       32,   63,  170,  102,   77,   81,   84,   32,   81,   63,
      170,   31,   84,  121,   63,   63,   31,   63,   82,   83,
       85,   82,   32,  121,   83,   85,   44,   32,   45,   64,
       64,   82,   95,  106,  156,  156,  140,   95,   82,   99,
       98,   83,  158,  158,   64,  144,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,  889,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,  166,  144,  160,
      151,  150,  164,  141,  151,  164,  168,  166,  167,  168,
      167,  323,  168,  141,  141,  168,   83,  150,  150,   45,
      167,   83,  140,  140,   45,  171,  180,   45,  182,  173,
      323,   45,  180,  173,  890,  171,   45,   55,   99,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,  173,
      175,  208,  179,  175,  272,   55,  159,  179,   55,   55,
      160,  160,   55,   55,   55,  141,  141,  165,  272,  174,
      229,   55,  181,   55,  165,  160,  891,  181,  165,  174,

       55,  165,  182,   55,   55,  177,  177,   55,   55,  203,
       55,  209,  211,  141,  203,  212,  214,  177,  215,   55,
      177,  208,   55,   56,  159,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,  229,  246,  246,  159,  275,
      178,  216,  892,  178,   56,   56,  159,  275,   56,   56,
       56,  159,  159,  178,  159,  295,  295,   56,  245,  244,
      178,  209,  211,  310,  265,  212,  214,  261,  215,   56,
       56,  310,  319,   56,   56,  265,   56,  244,  319,  245,
      245,  324,  732,  303,  244,   56,   66,   66,   66,   66,
      299,  216,   66,  299,   66,  321,  303,   66,  324,  299,

      303,   66,   66,  327,  245,  245,  244,  321,  321,  732,
       66,  331,  327,   66,   66,  334,   66,  261,  334,   66,
      343,  331,  249,  249,  249,  343,  345,  381,  381,   66,
      530,  249,   66,  153,  153,  153,  153,  153,  153,  153,
      153,  352,  357,  389,  530,  360,  893,  249,  249,  153,
      249,  389,  253,  253,  253,  360,  153,  153,  153,  249,
      424,  253,  409,  409,  251,  153,  251,  153,  424,  251,
      413,  251,  517,  413,  153,  437,  345,  253,  253,  413,
      253,  153,  153,  517,  153,  894,  251,  251,  251,  253,
      895,  352,  263,  153,  437,  251,  153,  154,  154,  154,

      154,  154,  154,  154,  154,  154,  154,  433,  441,  444,
      896,  251,  251,  433,  251,  447,  897,  441,  447,  444,
      154,  154,  154,  251,  438,  247,  357,  247,  651,  154,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      263,  438,  651,  435,  898,  154,  154,  479,  154,  457,
      457,  479,  546,  546,  263,  435,  435,  154,  162,  162,
      162,  162,  263,  417,  162,  531,  162,  263,  263,  162,
      263,  483,  899,  162,  162,  483,  417,  495,  366,  900,
      417,  495,  162,  460,  460,  162,  162,  254,  162,  254,
      366,  162,  254,  366,  254,  462,  462,  366,  902,  366,

      904,  162,  457,  531,  162,  204,  458,  458,  458,  254,
      254,  254,  515,  382,  382,  382,  531,  524,  254,  515,
      515,  524,  382,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  585,  254,  254,  460,  254,  382,  382,
      615,  382,  905,  585,  615,  523,  254,  790,  462,  906,
      382,  472,  523,  523,  472,  472,  472,  523,  523,  619,
      458,  520,  638,  619,  645,  790,  204,  344,  645,  520,
      907,  204,  520,  638,  204,  520,  472,  908,  204,  472,
      472,  526,  472,  204,  218,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  596,  596,  349,  526,  909,

      526,  526,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  667,  667,  910,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  769,  769,  529,  706,  528,
      386,  386,  386,  528,  771,  528,  344,  529,  706,  386,
      528,  911,  528,  913,  529,  218,  914,  384,  596,  384,
      218,  771,  384,  218,  384,  386,  386,  218,  386,  597,
      597,  597,  218,  219,  219,  219,  349,  386,  915,  384,
      384,  384,  636,  901,  901,  599,  599,  916,  384,  636,
      636,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  780,  912,  917,  384,  384,  641,  384,  650,  780,

      912,  601,  601,  918,  641,  919,  384,  641,  650,  387,
      641,  387,  903,  597,  387,  650,  387,  219,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  599,  903,
      920,  387,  387,  387,  921,  923,  924,  239,  239,  925,
      387,  239,  239,  239,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  601,  926,  387,  387,  927,  387,
      928,  652,  239,  239,  647,  929,  239,  239,  387,  239,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      930,  647,  922,  647,  647,  931,  932,  933,  934,  243,
      243,  935,  936,  243,  243,  243,  471,  937,  471,  652,

      922,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  938,  652,  939,  243,  243,  940,  941,  243,  243,
      944,  243,  252,  946,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  948,  949,  950,  951,  644,  952,
      953,  954,  957,  252,  252,  644,  644,  252,  252,  252,
      644,  644,  474,  958,  474,  959,  252,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  960,  252,  252,
      649,  961,  252,  252,  649,  252,  649,  962,  739,  964,
      965,  649,  967,  649,  252,  284,  739,  284,  739,  968,
      969,  970,  971,  284,  726,  726,  726,  726,  726,  726,

      726,  726,  726,  726,  972,  973,  974,  975,  976,  977,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  978,
      979,  284,  980,  981,  284,  284,  982,  284,  284,  284,
      983,  284,  284,  350,  350,  350,  984,  614,  614,  614,
      986,  730,  730,  730,  987,  989,  614,  990,  475,  475,
      730,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  991,  614,  614,  992,  614,  730,  730,  994,  730,
      995,  475,  475,  475,  614,  996,  478,  997,  730,  999,
      475, 1000, 1001, 1003, 1004, 1006, 1007,  350,  380,  380,
      380,  380,  380,  380,  380,  380,  475,  475, 1009,  475,

     1014,  478,  478,  478,  856, 1015,  478, 1017,  475,  856,
      478,  380,  380,  380,  856,  856, 1018, 1005, 1013, 1018,
      380, 1005, 1013, 1019, 1020, 1009,  478,  478, 1021,  478,
     1022, 1023, 1024,  478, 1025, 1027,  380,  380,  478,  380,
      731, 1028,  731,  613,  613,  731, 1029,  731,  380,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385, 1031,
     1032, 1034,  731,  731,  731, 1035,  613,  613,  613, 1036,
     1037,  731,  385,  385,  385,  613,  733,  733,  733, 1038,
     1039,  385, 1040, 1041, 1042,  733, 1043,  731,  731, 1044,
      731,  613,  613, 1045,  613, 1046, 1047,  385,  385,  731,

      385,  733,  733,  613,  733, 1048,  988, 1049, 1050,  385,
      398,  988,  398,  733, 1051, 1052,  988,  988,  398,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728, 1053,
     1054, 1055, 1056, 1057, 1058,  398,  398,  398,  398,  398,
      398,  398,  398,  398, 1059, 1061,  398, 1062, 1066,  398,
      398, 1067,  398,  398,  398, 1060,  398,  398,  461,  461,
      461,  734, 1068,  734, 1060, 1069,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461, 1010, 1070, 1010, 1072,
     1073, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,

     1010, 1074, 1075, 1063,  735, 1063,  735, 1077, 1063,  735,
     1063,  735,  461,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473, 1002, 1078, 1079,  735,  735,  735, 1080,
     1082, 1071,  473,  473, 1071,  735,  473,  473,  473, 1083,
     1084, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002,  735,  735, 1086,  735, 1087, 1088,  473,  473, 1089,
     1090,  473,  473,  735,  473,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  877,  877,  877, 1065, 1065,
     1065, 1065, 1065, 1091,  877,  477, 1065, 1092,  477,  477,
      477, 1093, 1002, 1065, 1097, 1065, 1065, 1098, 1065, 1065,

      877,  877,  878,  877,  878, 1099, 1100,  878, 1101,  878,
      477, 1102,  877,  477,  477, 1103,  477,  600,  600,  600,
      879,  879,  879, 1104,  878,  878,  878, 1105, 1106,  879,
     1108, 1109, 1111,  878, 1112,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  879,  879, 1113,  879,  878,
      878, 1114,  878, 1115, 1116, 1117, 1118,  879, 1119, 1120,
      880,  878,  880, 1121, 1123,  880, 1124,  880, 1125, 1126,
     1127,  600,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  880,  880,  880, 1128, 1129, 1131, 1132, 1133,
     1134,  880,  727, 1136, 1138,  727,  727,  727, 1139, 1140,

     1143, 1144, 1145, 1146, 1147, 1148, 1149,  880,  880, 1150,
      880, 1151, 1152, 1153, 1154, 1157, 1152,  727, 1156,  880,
      727,  727, 1156,  727,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011,  729, 1158, 1160,  729,  729,  729,
     1161, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
     1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1142,  729,
     1180, 1181,  729,  729, 1182,  729, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1012, 1183, 1184, 1012,

     1012, 1012, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
     1195, 1192, 1196, 1197, 1192, 1189, 1192, 1198, 1199, 1200,
     1201, 1012, 1200, 1202, 1012, 1012, 1203, 1012, 1194, 1194,
     1194, 1194, 1194, 1204, 1206, 1207, 1194, 1142, 1208, 1209,
     1211, 1212, 1213, 1194, 1215, 1194, 1194, 1216, 1194, 1194,
     1217, 1218, 1219, 1220, 1221, 1222, 1226, 1227, 1228, 1229,
     1230, 1231, 1232, 1233, 1234, 1235, 1237, 1238, 1240, 1241,
     1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1252,
     1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1263,
     1265, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1276,

     1277, 1278, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1282, 1283, 1284, 1285, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1279, 1286, 1279, 1287,
     1288, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1297, 1298,
     1299, 1281, 1300, 1301, 1281, 1281, 1281, 1302, 1303, 1304,
     1305, 1296, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
     1314, 1315, 1315, 1316, 1317, 1318, 1281, 1319, 1320, 1281,
     1281, 1321, 1281, 1322, 1323, 1324, 1323, 1325, 1326, 1323,

     1327, 1328, 1329, 1330, 1332, 1328, 1333, 1323, 1334, 1335,
     1337, 1334, 1338, 1323, 1323, 1323, 1336, 1336, 1339, 1340,
     1341, 1342, 1343, 1340, 1344, 1345, 1346, 1347, 1348, 1349,
     1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360,
     1362, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372,
     1376, 1378, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1389,
     1390, 1394, 1397, 1398, 1399, 1401, 1403, 1404, 1405, 1406,
     1407, 1408, 1409, 1410, 1411, 1412, 1413, 1415, 1416, 1417,
     1418, 1420, 1421, 1422, 1419, 1423, 1424, 1425, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1419, 1426,

     1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
     1437, 1438, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,
     1446, 1447, 1446, 1448, 1449, 1446, 1450, 1451, 1452, 1453,
     1455, 1451, 1456, 1446, 1457, 1458, 1460, 1457, 1461, 1446,
     1446, 1446, 1459, 1459, 1462, 1463, 1464, 1465, 1466, 1463,
     1467, 1468, 1469, 1470, 1471, 1472, 1474, 1475, 1476, 1477,
     1478, 1479, 1480, 1481, 1482, 1483, 1485, 1487, 1488, 1489,
     1490, 1491, 1492, 1493, 1494, 1495, 1499, 1501, 1504, 1505,
     1506, 1507, 1508, 1509, 1510, 1512, 1513, 1517, 1520, 1521,
     1522, 1524, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1534,

     1535, 1537, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1540, 1541, 1543, 1544, 1547, 1548, 1549, 1552,
     1553, 1555, 1539, 1556, 1557, 1539, 1539, 1539, 1558, 1559,
     1560, 1561, 1562, 1563, 1564, 1565, 1567, 1568, 1569, 1570,
     1571, 1572, 1573, 1574, 1575, 1565, 1576, 1539, 1577, 1578,
     1539, 1539, 1579, 1539, 1580, 1581, 1582, 1583, 1584, 1585,
     1586, 1587, 1588, 1589, 1590, 1591, 1592, 1596, 1597, 1598,
     1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608,
     1609, 1610, 1612, 1604, 1613, 1614, 1617, 1618, 1619, 1620,

     1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1631,
     1632, 1633, 1634, 1635, 1637, 1640, 1642, 1643, 1645, 1646,
     1647, 1648, 1649, 1650, 1652, 1653, 1655, 1657, 1658, 1659,
     1660, 1661, 1663, 1664, 1665, 1666, 1668, 1669, 1670, 1671,
     1672, 1673, 1674, 1675, 1676, 1677, 1678, 1680, 1681, 1682,
     1683, 1684, 1685, 1686, 1687, 1688, 1678, 1689, 1690, 1691,
     1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701,
     1702, 1703, 1704, 1705, 1709, 1710, 1711, 1712, 1713, 1714,
     1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1725,
     1717, 1726, 1727, 1730, 1731, 1732, 1733, 1734, 1735, 1736,

     1737, 1738, 1739, 1740, 1741, 1742, 1744, 1745, 1746, 1747,
     1748, 1750, 1753, 1755, 1756, 1758, 1759, 1760, 1761, 1762,
     1763, 1765, 1766, 1768, 1770, 1771, 1773, 1775, 1776, 1778,
     1780, 1781, 1782, 1786, 1788, 1786, 1789, 1790, 1786, 1791,
     1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
     1802, 1803, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
     1813, 1814, 1815, 1816, 1817, 1818, 1819, 1821, 1823, 1824,
     1825, 1826, 1827, 1828, 1829, 1830, 1832, 1833, 1834, 1835,
     1836, 1837, 1838, 1839, 1843, 1844, 1846, 1847, 1849, 1850,
     1851, 1852, 1853, 1854, 1856, 1857, 1861, 1864, 1867, 1869,

     1873, 1875, 1876, 1877, 1878, 1879, 1883, 1885, 1883, 1886,
     1887, 1883, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
     1896, 1897, 1898, 1899, 1900, 1902, 1903, 1904, 1905, 1906,
     1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916,
     1918, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1929,
     1930, 1931, 1932, 1933, 1934, 1935, 1936, 1940, 1941, 1943,
     1944, 1946, 1947, 1948, 1949, 1950, 1951, 1953, 1954, 1958,
     1961, 1964, 1966, 1970, 1972, 1973, 1974, 1975, 1976, 1977,
     1978, 1979, 1980, 1982, 1983, 1984, 1985, 1986, 1987, 1988,
     1989, 1990, 1992, 1994, 1995, 1996, 1997, 1999, 2000, 2001,

     2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
     2012, 2013, 2014, 2015, 2016, 2017, 2019, 2020, 2021, 2022,
     2021, 2023, 2024, 2025, 2027, 2028, 2029, 2031, 2032, 2033,
     2034, 2035, 2038, 2042, 2043, 2044, 2045, 2046, 2047, 2048,
     2049, 2050, 2051, 2052, 2053, 2055, 2056, 2057, 2058, 2059,
     2060, 2061, 2062, 2063, 2065, 2067, 2068, 2069, 2070, 2072,
     2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082,
     2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2092, 2093,
     2094, 2095, 2094, 2096, 2097, 2098, 2100, 2101, 2102, 2104,
     2105, 2106, 2107, 2108, 2111, 2115, 2116, 2117, 2118, 2119,

     2120, 2121, 2122, 2123, 2127, 2128, 2129, 2130, 2130, 2131,
     2132, 2130, 2130, 2133, 2134, 2135, 2136, 2139, 2142, 2143,
     2144, 2146, 2147, 2148, 2149, 2150, 2130, 2151, 2152, 2135,
     2154, 2155, 2157, 2158, 2135, 2160, 2135, 2161, 2162, 2163,
     2164, 2165, 2167, 2168, 2169, 2171, 2173, 2174, 2175, 2176,
     2177, 2178, 2179, 2181, 2182, 2183, 2184, 2185, 2189, 2190,
     2191, 2192, 2192, 2193, 2194, 2192, 2192, 2195, 2196, 2197,
     2198, 2201, 2204, 2205, 2206, 2208, 2209, 2210, 2211, 2212,
     2192, 2213, 2214, 2197, 2216, 2217, 2219, 2220, 2197, 2222,
     2197, 2223, 2224, 2225, 2226, 2227, 2229, 2230, 2231, 2233,

     2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2245, 2246,
     2248, 2249, 2251, 2252, 2251, 2253, 2254, 2255, 2259, 2252,
     2260, 2261, 2262, 2263, 2265, 2266, 2267, 2268, 2269, 2270,
     2271, 2272, 2273, 2275, 2276, 2277, 2278, 2279, 2280, 2281,
     2282, 2283, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2293,
     2294, 2295, 2297, 2298, 2299, 2302, 2303, 2305, 2306, 2305,
     2307, 2308, 2309, 2313, 2306, 2314, 2315, 2316, 2317, 2319,
     2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2329, 2330,
     2331, 2332, 2333, 2334, 2335, 2336, 2337, 2339, 2340, 2341,
     2342, 2343, 2344, 2345, 2347, 2348, 2349, 2350, 2351, 2353,

     2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363,
     2364, 2365, 2366, 2367, 2368, 2369, 2372, 2373, 2374, 2375,
     2376, 2377, 2378, 2380, 2381, 2382, 2383, 2384, 2385, 2386,
     2387, 2390, 2391, 2393, 2394, 2396, 2397, 2398, 2399, 2400,
     2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410,
     2411, 2412, 2413, 2414, 2417, 2418, 2419, 2420, 2421, 2422,
     2423, 2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2435,
     2436, 2438, 2439, 2442, 2443, 2444, 2446, 2447, 2448, 2449,
     2450, 2451, 2452, 2454, 2455, 2456, 2457, 2460, 2461, 2462,
     2463, 2464, 2465, 2467, 2469, 2470, 2471, 2472, 2473, 2474,

     2475, 2476, 2477, 2479, 2480, 2481, 2482, 2484, 2485, 2486,
     2487, 2488, 2489, 2490, 2492, 2493, 2494, 2495, 2498, 2499,
     2500, 2501, 2502, 2503, 2505, 2507, 2508, 2509, 2510, 2511,
     2512, 2513, 2514, 2515, 2517, 2518, 2520, 2521, 2522, 2524,
     2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2532,
     2533, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2542, 2543,
     2544, 2545, 2546, 2547, 2548, 2549, 2551, 2552, 2553, 2555,
     2556, 2557, 2558, 2559, 2560, 2561, 2562, 2563, 2564, 2563,
     2564, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2573, 2574,
     2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584,

     2585, 2586, 2587, 2588, 2589, 2591, 2592, 2593, 2594, 2595,
     2596, 2597, 2599, 2600, 2601, 2602, 2603, 2604, 2607, 2609,
     2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619,
     2621, 2622, 2623, 2624, 2625, 2626, 2627, 2629, 2630, 2631,
     2632, 2633, 2634, 2638, 2639, 2641, 2644, 2645, 2646, 2647,
     2649, 2650, 2651, 2650, 2652, 2653, 2652, 2654, 2655, 2656,
     2657, 2659, 2661, 2662, 2663, 2664, 2666, 2669, 2670, 2671,
     2672, 2674, 2675, 2676, 2675, 2677, 2678, 2677, 2679, 2680,
     2681, 2682, 2684, 2686, 2687, 2688, 2689, 2690, 2692, 2693,
     2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703,

     2704, 2705, 2707, 2709, 2710, 2711, 2713, 2714, 2715, 2716,
     2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726,
     2728, 2730, 2731, 2733, 2734, 2735, 2737, 2738, 2740, 2741,
     2742, 2743, 2744, 2745, 2746, 2748, 2749, 2751, 2752, 2753,
     2755, 2756, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2766,
     2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2776, 2777,
     2778, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788,
     2790, 2791, 2792, 2793, 2794, 2796, 2798, 2799, 2800, 2801,
     2803, 2804, 2805, 2806, 2808, 2810, 2811, 2812, 2813, 2815,
     2816, 2817, 2818, 2819, 2820, 2821, 2823, 2824, 2826, 2827,

     2828, 2829, 2830, 2832, 2833, 2834, 2836, 2837, 2838, 2839,
     2840, 2841, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850,
     2851, 2852, 2853, 2854, 2856, 2857, 2858, 2859, 2860, 2862,
     2863, 2864, 2865, 2868, 2869, 2870, 2873, 2874, 2877, 2880,
     2881, 2882, 2883, 2884, 2885, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 2890, 2890, 2890, 2890, 2890, 2891, 2891, 2891,
     2891, 2891, 2891, 2891, 2891, 2891, 2891, 2891, 2891, 2892,
     2892, 2892, 2892, 2892, 2892, 2892, 2892, 2892, 2892, 2892,
     2892, 2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893,
     2893, 2893, 2893, 2894, 2894, 2894, 2894, 2894, 2894, 2894,

     2894, 2894, 2894, 2894, 2894, 2895, 2895, 2895, 2895, 2895,
     2895, 2895, 2895, 2895, 2895, 2895, 2895, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2897,
     2897, 2897, 2897, 2897, 2897, 2897, 2897, 2897, 2897, 2897,
     2897, 2898, 2898, 2898, 2898, 2898, 2898, 2898, 2898, 2898,
     2898, 2898, 2898, 2899, 2899, 2899, 2899, 2899, 2899, 2899,
     2899, 2899, 2899, 2899, 2899, 2900, 2900, 2900, 2900, 2900,
     2900, 2900, 2900, 2900, 2900, 2900, 2900, 2901, 2901, 2901,
     2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903,
     2903, 2903, 2903, 2904,  885, 2904, 2904, 2904, 2904, 2904,
     2904, 2904, 2904, 2904, 2904, 2905,  884, 2905, 2905, 2905,
     2905, 2905, 2905, 2905, 2905, 2905, 2905, 2906,  883,  882,
      881, 2906, 2906, 2906, 2906, 2907,  876, 2907,  875, 2907,
     2907, 2907, 2907, 2907, 2907, 2907, 2907, 2908,  874, 2908,
     2908,  872, 2908, 2908, 2908, 2908, 2908, 2908, 2908, 2909,
      871, 2909, 2909, 2909, 2909, 2909, 2909, 2909, 2909, 2909,
     2909, 2910,  870, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2911,  869, 2911, 2911, 2911, 2911, 2911,

     2911, 2911, 2911, 2911, 2911, 2912, 2912, 2912, 2912, 2912,
     2912, 2912, 2912, 2912, 2912, 2912, 2913,  868, 2913, 2913,
     2913, 2913, 2913, 2913, 2913, 2913, 2914,  867,  866,  864,
     2914, 2914, 2914, 2914, 2915,  863,  862,  860, 2915, 2915,
     2915, 2915, 2916, 2916, 2916, 2916, 2916, 2916, 2916, 2916,
     2916, 2916, 2916, 2916, 2917, 2917, 2918, 2918, 2919,  859,
     2919, 2919,  858, 2919, 2919, 2919, 2919, 2919, 2919, 2919,
     2920,  857, 2920, 2920, 2920, 2920, 2920, 2920, 2920, 2920,
     2920, 2920, 2921,  855, 2921, 2921, 2921, 2921, 2921, 2921,
     2921, 2921, 2921, 2921, 2922,  854, 2922, 2922, 2922, 2922,

     2922, 2922, 2922, 2922, 2922, 2922, 2923, 2923, 2923, 2923,
     2923, 2923, 2923, 2923, 2923, 2923, 2923, 2923, 2924, 2924,
     2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2925,
      852, 2925, 2925, 2925, 2925, 2925, 2925, 2925, 2925, 2926,
      851,  850,  849, 2926, 2926, 2926, 2926, 2927, 2927, 2928,
     2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928,
     2928, 2929,  848, 2929, 2929, 2929, 2929, 2929, 2929, 2929,
     2929, 2929, 2929, 2930, 2930, 2930, 2930, 2930, 2931, 2931,
      847, 2931, 2932,  846, 2932, 2932, 2932, 2932, 2932, 2932,
     2932, 2932, 2932, 2932, 2933,  845, 2933, 2933, 2933, 2933,

     2933, 2933, 2933, 2933, 2933, 2933, 2934,  844, 2934, 2934,
     2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934, 2935,  843,
     2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935,
      842,  841,  840,  839,  838,  837,  836,  835,  833,  832,
      830,  829,  828,  827,  826,  825,  822,  821,  820,  819,
      818,  817,  816,  814,  812,  809,  808,  807,  806,  805,
      804,  803,  802,  801,  800,  799,  798,  797,  796,  795,
      794,  793,  792,  791,  789,  788,  787,  786,  785,  784,
      783,  782,  781,  779,  778,  777,  776,  775,  774,  773,
      772,  770,  768,  767,  766,  765,  764,  763,  762,  761,

      760,  759,  758,  757,  756,  755,  754,  753,  752,  751,
      750,  749,  748,  747,  746,  745,  744,  743,  742,  741,
      740,  737,  736,  725,  724,  723,  722,  721,  719,  718,
      717,  716,  715,  714,  713,  712,  711,  710,  709,  708,
      705,  704,  703,  702,  701,  700,  699,  698,  697,  696,
      695,  694,  693,  692,  691,  690,  689,  687,  686,  685,
      684,  682,  681,  680,  678,  677,  676,  675,  674,  673,
      672,  671,  670,  669,  668,  666,  665,  664,  663,  662,
      661,  660,  658,  657,  656,  655,  654,  653,  648,  646,
      643,  642,  640,  639,  637,  635,  634,  633,  632,  631,

      630,  629,  628,  627,  626,  625,  624,  623,  621,  620,
      617,  616,  612,  611,  610,  609,  608,  607,  606,  605,
      604,  603,  602,  595,  594,  593,  592,  591,  590,  589,
      588,  587,  584,  583,  582,  581,  580,  579,  578,  577,
      576,  575,  574,  573,  572,  571,  570,  569,  568,  566,
      565,  564,  563,  561,  560,  559,  557,  556,  555,  554,
      553,  552,  551,  550,  549,  548,  547,  545,  544,  543,
      542,  541,  540,  539,  537,  536,  535,  534,  533,  532,
      527,  525,  522,  521,  519,  518,  516,  514,  513,  512,
      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,

      501,  500,  499,  498,  497,  496,  494,  493,  492,  491,
      488,  485,  484,  481,  480,  467,  466,  465,  464,  463,
      456,  455,  454,  452,  450,  449,  448,  446,  445,  443,
      442,  440,  439,  436,  434,  432,  431,  430,  429,  428,
      427,  426,  425,  422,  421,  420,  419,  418,  416,  415,
      414,  412,  411,  410,  408,  407,  406,  405,  404,  403,
      402,  401,  400,  399,  397,  396,  395,  394,  393,  392,
      391,  390,  372,  371,  370,  369,  368,  367,  363,  359,
      354,  351,  336,  335,  333,  332,  330,  329,  328,  326,
      325,  322,  320,  318,  317,  316,  315,  314,  313,  312,

      311,  308,  307,  306,  305,  304,  302,  301,  300,  298,
      297,  296,  294,  293,  292,  291,  290,  289,  288,  287,
      286,  285,  283,  282,  281,  280,  279,  278,  277,  276,
      273,  271,  269,  268,  267,  266,  264,  262,  260,  258,
      257,  256,  238,  236,  230,  224,  223,  222,  221,  220,
      201,  200,  199,  198,  194,  192,  188,  176,  172,  169,
      161,  157,  155,  152,  147,  143,  137,  135,  134,  133,
      132,  131,  130,  129,  124,  122,  118,  101,  100,   91,
       90,   80,   76,   73,   65,   60,   57,   50,   49,   47,
       37,   12,   11,    8,    7, 2889, 2889, 2889, 2889, 2889,

     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yyansi_c_flex_debug;
int yyansi_c_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yyansi_ctext;
#line 1 "scanner.l"
#line 4 "scanner.l"

/*
 * This scanner is based on:
 *
 * cpp5.l, a C/C++ scanner written by James A. Roskind.
 * "Portions Copyright (c) 1989, 1990 James A. Roskind".
 * (http://www.idiom.com/free-compilers/,
 * ftp://ftp.infoseek.com/ftp/pub/c++grammar/,
 * ftp://ftp.sra.co.jp/.a/pub/cmd/c++grammar2.0.tar.gz)
 */

#ifdef _WIN32
#define YY_NO_UNISTD_H
static int isatty(int) { return 0; }
#endif

#include <expr.h>
#include <arith_tools.h>
#include <config.h>

#include <ansi-c/c_types.h>
#include <ansi-c/preprocessor_line.h>

#include <ansi-c/literals/convert_float_literal.h>
#include <ansi-c/literals/convert_integer_literal.h>
#include <ansi-c/literals/convert_character_literal.h>
#include <ansi-c/literals/convert_string_literal.h>

#define PARSER ansi_c_parser
#define YYSTYPE unsigned
#undef  ECHO
#define ECHO

#include "ansi_c_parser.h"
#include "y.tab.h"

#define loc() \
  { newstack(yyansi_clval); PARSER.set_location(stack(yyansi_clval)); }

int make_identifier()
{
  loc();

  std::string base_name(yyansi_ctext);
  std::string identifier(base_name);

  // figure out if this is a typedef or something else
  ansi_c_id_classt result=
    PARSER.lookup(identifier, PARSER.tag_following, false);

  PARSER.tag_following=false;

  stack(yyansi_clval).id(ID_symbol);
  stack(yyansi_clval).set(ID_C_base_name, base_name);
  stack(yyansi_clval).set(ID_identifier, identifier);
  stack(yyansi_clval).set(ID_C_id_class, result);

  if(result==ANSI_C_TYPEDEF)
    return TOK_TYPEDEFNAME;
  else
    return TOK_IDENTIFIER;
}

int MSC_Keyword(int token)
{
  if(PARSER.mode==ansi_c_parsert::MSC)
  {
    loc();
    PARSER.tag_following=false;
    return token;
  }
  else
    return make_identifier();
}

int cpp_keyword(int token)
{
  if(PARSER.cpp)
  {
    loc();
    return token;
  }
  else
    return make_identifier();
}

int MSC_cpp_keyword(int token)
{
  if(PARSER.cpp && PARSER.mode==ansi_c_parsert::MSC)
  {
    loc();
    return token;
  }
  else
    return make_identifier();
}

int cpp_operator(int token)
{
  if(PARSER.cpp)
  {
    loc();
    return token;
  }
  else
  {
    yyansi_cerror("C++ operator not allowed in C mode");
    return TOK_SCANNER_ERROR;
  }
}

/*** macros for easier rule definition **********************************/

















#line 186 "scanner.l"
void ansi_c_scanner_init()
{
  YY_FLUSH_BUFFER;
  BEGIN(0);
}
#line 2559 "lex.yy.cpp"

#define INITIAL 0
#define GRAMMAR 1
#define COMMENT1 2
#define COMMENT2 3
#define STRING_LITERAL 4
#define ASM_BLOCK 5
#define MSC_ASM 6
#define MSC_DECLSPEC 7
#define MSC_PRAGMA 8
#define MSC_ANNOTATION 9
#define GCC_ATTRIBUTE1 10
#define GCC_ATTRIBUTE2 11
#define GCC_ATTRIBUTE3 12
#define GCC_ATTRIBUTE4 13
#define GCC_ATTRIBUTE5 14
#define GCC_ASM 15
#define GCC_ASM_VOLATILE 16
#define GCC_ASM_PAREN 17

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yyansi_clex_destroy (void );

int yyansi_cget_debug (void );

void yyansi_cset_debug (int debug_flag  );

YY_EXTRA_TYPE yyansi_cget_extra (void );

void yyansi_cset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyansi_cget_in (void );

void yyansi_cset_in  (FILE * in_str  );

FILE *yyansi_cget_out (void );

void yyansi_cset_out  (FILE * out_str  );

int yyansi_cget_leng (void );

char *yyansi_cget_text (void );

int yyansi_cget_lineno (void );

void yyansi_cset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yyansi_cwrap (void );
#else
extern int yyansi_cwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yyansi_ctext, yyansi_cleng, 1, yyansi_cout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyansi_cin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyansi_cin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyansi_cin))==0 && ferror(yyansi_cin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyansi_cin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yyansi_clex (void);

#define YY_DECL int yyansi_clex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yyansi_ctext and yyansi_cleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 193 "scanner.l"


#line 2759 "lex.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyansi_cin )
			yyansi_cin = stdin;

		if ( ! yyansi_cout )
			yyansi_cout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyansi_censure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE );
		}

		yyansi_c_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yyansi_ctext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2890 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4396 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 195 "scanner.l"
{ BEGIN(GRAMMAR);
		  yyless(0);		/* start again with this character */
		  //yy_current_buffer->yy_at_bol = 1; /* at beginning of line */
		  switch(PARSER.grammar)
		   {
                   case ansi_c_parsert::EXPRESSION: return TOK_PARSE_EXPRESSION;
                   case ansi_c_parsert::LANGUAGE: return TOK_PARSE_LANGUAGE;
		   default: assert(0);
		   }
		 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 206 "scanner.l"
{ BEGIN(COMMENT1); } /* begin C comment state */
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 209 "scanner.l"
{ BEGIN(GRAMMAR); } /* end comment state, back GRAMMAR */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 210 "scanner.l"
{ yyansi_cerror("Probably nested comments"); }
	YY_BREAK
case YY_STATE_EOF(COMMENT1):
#line 211 "scanner.l"
{ yyansi_cerror("Unterminated comment"); return TOK_SCANNER_ERROR; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 212 "scanner.l"
{ /* ignore every char except '*' and NL (performance!) */ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 213 "scanner.l"
{ } /* all single characters within comments are ignored */
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 214 "scanner.l"
{ }
	YY_BREAK

case 8:
YY_RULE_SETUP
#line 217 "scanner.l"
{ BEGIN(COMMENT2); }	/* begin C++ comment state */
	YY_BREAK

case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 220 "scanner.l"
{ BEGIN(GRAMMAR); }	/* end comment state, back GRAMMAR */
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 221 "scanner.l"
{ } /* all characters within comments are ignored */
	YY_BREAK

case 11:
YY_RULE_SETUP
#line 224 "scanner.l"
{
                  newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_character_literal(yyansi_ctext, true);
                  PARSER.set_location(stack(yyansi_clval));
                  return TOK_CHARACTER;
                }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 231 "scanner.l"
{
                  PARSER.string_literal.clear();
                  PARSER.string_literal.append(yyansi_ctext);
                  newstack(yyansi_clval);
                  PARSER.set_location(stack(yyansi_clval));
                  // String literals can be continued in
                  // the next line
                  BEGIN(STRING_LITERAL);
                }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 241 "scanner.l"
{ PARSER.string_literal.append(yyansi_ctext); }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 242 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 243 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 244 "scanner.l"
{
                  preprocessor_line(yyansi_ctext, PARSER.line_no, PARSER.filename);
                  PARSER.line_no--;
		 }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 248 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 249 "scanner.l"
{ 
                  stack(yyansi_clval)=convert_string_literal(PARSER.string_literal);
                  BEGIN(GRAMMAR); // back to normal
                  yyless(0); // put back
                  return TOK_STRING;
                }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 256 "scanner.l"
{ } /* skipped */
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 257 "scanner.l"
{ } /* skipped */
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 259 "scanner.l"
{
                  preprocessor_line(yyansi_ctext, PARSER.line_no, PARSER.filename);
                  PARSER.line_no--;
		 }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 263 "scanner.l"
{
                  #if 0
		  TmpString.form(
			"'pragma' directive found:" GL_WARN_MSG_NEWLINE
			"%s" GL_WARN_MSG_NEWLINE
			"Directive ignored",
			&PRS_text[0]);
		  PRS_PrintWarning(GL_WARN_INFORMATIVE, TmpString.chars());
		  TmpString = "";
                  #endif
		 }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 274 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 275 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 276 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 277 "scanner.l"
{
		  yyansi_cerror("Preprocessor directive found");
		  return TOK_SCANNER_ERROR;
		 }
	YY_BREAK

/*** keywords ***/


case 27:
YY_RULE_SETUP
#line 287 "scanner.l"
{ loc(); return TOK_AUTO; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 288 "scanner.l"
{ loc(); return TOK_BOOL; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 289 "scanner.l"
{ loc(); return TOK_BREAK; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 290 "scanner.l"
{ loc(); return TOK_CASE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 291 "scanner.l"
{ loc(); return TOK_CHAR; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 292 "scanner.l"
{ loc(); return TOK_COMPLEX; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 293 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 294 "scanner.l"
{ loc(); return TOK_CONTINUE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 295 "scanner.l"
{ loc(); return TOK_DEFAULT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 296 "scanner.l"
{ loc(); return TOK_DO; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 297 "scanner.l"
{ loc(); return TOK_DOUBLE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 298 "scanner.l"
{ loc(); return TOK_ELSE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 299 "scanner.l"
{ loc(); PARSER.tag_following=true; return TOK_ENUM; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 300 "scanner.l"
{ loc(); return TOK_EXTERN; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 301 "scanner.l"
{ loc(); return TOK_FLOAT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 302 "scanner.l"
{ loc(); return TOK_FOR; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 303 "scanner.l"
{ loc(); return TOK_GOTO; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 304 "scanner.l"
{ loc(); return TOK_IF; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 305 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 306 "scanner.l"
{ loc(); return TOK_INT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 307 "scanner.l"
{ loc(); return TOK_LONG; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 308 "scanner.l"
{ loc(); return TOK_REGISTER; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 309 "scanner.l"
{ /* C99, ignore for now */ }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 310 "scanner.l"
{ loc(); return TOK_RETURN; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 311 "scanner.l"
{ loc(); return TOK_SHORT; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 312 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 313 "scanner.l"
{ loc(); return TOK_SIZEOF; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 314 "scanner.l"
{ loc(); return TOK_STATIC; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 315 "scanner.l"
{ loc(); PARSER.tag_following=true; return TOK_STRUCT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 316 "scanner.l"
{ loc(); return TOK_SWITCH; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 317 "scanner.l"
{ loc(); return TOK_TYPEDEF; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 318 "scanner.l"
{ loc(); PARSER.tag_following=true; return TOK_UNION; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 319 "scanner.l"
{ loc(); return TOK_UNSIGNED; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 320 "scanner.l"
{ loc(); return TOK_VOID; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 321 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 322 "scanner.l"
{ loc(); return TOK_WHILE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 324 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                    { loc(); return TOK_GCC_FLOAT128; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 330 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                    { loc(); return TOK_GCC_INT128; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 336 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                    { loc(); return TOK_GCC_DECIMAL32; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 342 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                    { loc(); return TOK_GCC_DECIMAL64; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 348 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                    { loc(); return TOK_GCC_DECIMAL128; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 354 "scanner.l"
{ return MSC_Keyword(TOK_INT8); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 355 "scanner.l"
{ return MSC_Keyword(TOK_INT16); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 356 "scanner.l"
{ return MSC_Keyword(TOK_INT32); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 358 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::ARM ||
                     PARSER.mode==ansi_c_parsert::CW)
                    { loc(); return TOK_INT64; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 365 "scanner.l"
{ return MSC_Keyword(TOK_PTR32); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 366 "scanner.l"
{ return MSC_Keyword(TOK_PTR64); }
	YY_BREAK

/*
"__stdcall"     { return MSC_Keyword(TOK_STDCALL); }
"__fastcall"    { return MSC_Keyword(TOK_FASTCALL); }
"__clrcall"     { return MSC_Keyword(TOK_CLRCALL); }
*/

case 74:
#line 377 "scanner.l"
case 75:
YY_RULE_SETUP
#line 377 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_COMPLEX; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 76:
#line 385 "scanner.l"
case 77:
YY_RULE_SETUP
#line 385 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_REAL; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 78:
#line 393 "scanner.l"
case 79:
YY_RULE_SETUP
#line 393 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_IMAG; }
                  else
                    return make_identifier();
                }
	YY_BREAK

/* note: "wchar_t" should be in the list above, but it is left out */
/*       because it is a 'typedef' in some standard header files   */

case 80:
YY_RULE_SETUP
#line 405 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::CW)
                    { loc(); return TOK_CW_VAR_ARG_TYPEOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 411 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                        PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_BUILTIN_VA_ARG; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 82:
#line 419 "scanner.l"
case 83:
#line 420 "scanner.l"
case 84:
YY_RULE_SETUP
#line 420 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_OFFSETOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 427 "scanner.l"
{
                  if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_GCC_BUILTIN_TYPES_COMPATIBLE_P; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 435 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 442 "scanner.l"
{ // MS supports __alignof:
                  // http://msdn.microsoft.com/en-us/library/45t0s5f4%28v=vs.71%29.aspx
                  if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 452 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 458 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                         PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 465 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                  {
                    loc();
                    BEGIN(MSC_ASM);
                    return TOK_MSC_ASM;
                  }
                  else
                    BEGIN(GCC_ASM);
                }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 475 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::CW)
                    BEGIN(GCC_ASM);
                  else
                    return make_identifier();
                }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 482 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    BEGIN(GCC_ASM);
                  else
                    return make_identifier();
                }
	YY_BREAK

/* C++ Keywords and Operators */

case 93:
YY_RULE_SETUP
#line 494 "scanner.l"
{ return cpp_keyword(TOK_BOOL); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 495 "scanner.l"
{ return cpp_keyword(TOK_CATCH); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 496 "scanner.l"
{ return cpp_keyword(TOK_CLASS); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 497 "scanner.l"
{ return cpp_keyword(TOK_CONSTEXPR); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 498 "scanner.l"
{ return cpp_keyword(TOK_DELETE); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 499 "scanner.l"
{ return cpp_keyword(TOK_DECLTYPE); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 500 "scanner.l"
{ return cpp_keyword(TOK_EXPLICIT); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 501 "scanner.l"
{ return cpp_keyword(TOK_FRIEND); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 502 "scanner.l"
{ return cpp_keyword(TOK_MUTABLE); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 503 "scanner.l"
{ return cpp_keyword(TOK_NAMESPACE); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 504 "scanner.l"
{ return cpp_keyword(TOK_NEW); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 505 "scanner.l"
{ return cpp_keyword(TOK_NULLPTR); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 506 "scanner.l"
{ return cpp_keyword(TOK_OPERATOR); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 507 "scanner.l"
{ return cpp_keyword(TOK_PRIVATE); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 508 "scanner.l"
{ return cpp_keyword(TOK_PROTECTED); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 509 "scanner.l"
{ return cpp_keyword(TOK_PUBLIC); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 510 "scanner.l"
{ return cpp_keyword(TOK_STATIC_ASSERT); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 511 "scanner.l"
{ return cpp_keyword(TOK_TEMPLATE); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 512 "scanner.l"
{ return cpp_keyword(TOK_THIS); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 513 "scanner.l"
{ return cpp_keyword(TOK_THREAD_LOCAL); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 514 "scanner.l"
{ return cpp_keyword(TOK_THROW); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 515 "scanner.l"
{ return cpp_keyword(TOK_TYPEID); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 516 "scanner.l"
{ return cpp_keyword(TOK_TYPENAME); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 517 "scanner.l"
{ return cpp_keyword(TOK_USING); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 518 "scanner.l"
{ return cpp_keyword(TOK_VIRTUAL); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 519 "scanner.l"
{ // CodeWarrior doesn't have wchar_t built in
                      if(PARSER.mode==ansi_c_parsert::CW)
                        return make_identifier();
                      else
                        return cpp_keyword(TOK_WCHAR_T);
                    }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 525 "scanner.l"
{ return cpp_operator(TOK_DOTPM); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 526 "scanner.l"
{ return cpp_operator(TOK_ARROWPM); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 527 "scanner.l"
{ if(PARSER.cpp)
                        return cpp_operator(TOK_SCOPE);
                      else
                      {
                        yyless(1); // puts all but one : back into stream
                        loc();
                        PARSER.tag_following=false;
                        return ':';
                      }
                    }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 538 "scanner.l"
{ if(PARSER.cpp && PARSER.mode==ansi_c_parsert::GCC)
                        return cpp_keyword(TOK_DECLTYPE);
                      else
                        return make_identifier();
                    }
	YY_BREAK

/* a huge batch of MS C++ extensions
   http://msdn.microsoft.com/en-us/library/ms177194(v=vs.80).aspx */

case 123:
YY_RULE_SETUP
#line 549 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 550 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 551 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 552 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 553 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 554 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 555 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 556 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 557 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 558 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 559 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 560 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 561 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 562 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_BINARY_TYPE_PREDICATE); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 563 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 564 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_BINARY_TYPE_PREDICATE); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 565 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 566 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 567 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 568 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 569 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 570 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 571 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 572 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 573 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 574 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 575 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 576 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 578 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_IF_EXISTS); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 579 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_IF_NOT_EXISTS); }
	YY_BREAK
case 153:
#line 582 "scanner.l"
case 154:
#line 583 "scanner.l"
case 155:
#line 584 "scanner.l"
case 156:
#line 585 "scanner.l"
case 157:
#line 586 "scanner.l"
case 158:
#line 587 "scanner.l"
case 159:
#line 588 "scanner.l"
case 160:
#line 589 "scanner.l"
case 161:
#line 590 "scanner.l"
case 162:
#line 591 "scanner.l"
case 163:
YY_RULE_SETUP
#line 591 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
	             BEGIN(MSC_ANNOTATION);
                   else
	           {
	             yyless(1); // puts all but [ back into stream
	             loc();
	             PARSER.tag_following=false;
	             return yyansi_ctext[0]; // returns the [
	           }
                 }
	YY_BREAK
case 164:
#line 603 "scanner.l"
case 165:
YY_RULE_SETUP
#line 603 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 614 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                  {
                    BEGIN(MSC_PRAGMA);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 167:
#line 624 "scanner.l"
case 168:
YY_RULE_SETUP
#line 624 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    BEGIN(GCC_ATTRIBUTE1);
                  else
                    return make_identifier();
                }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 632 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 633 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 635 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 637 "scanner.l"
{ /* gcc, ignore */ }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 638 "scanner.l"
{ /* gcc, ignore */ }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 640 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 641 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 642 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 643 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 644 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 645 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 646 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 647 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 649 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 650 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 652 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 653 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 655 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 656 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 658 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 667 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 677 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 687 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 696 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 705 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 714 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 723 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 732 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 741 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 751 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 761 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 771 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 781 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 790 "scanner.l"
{ if(PARSER.cpp ||
                     PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ICC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_TYPEOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 799 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ICC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_TYPEOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 807 "scanner.l"
{ loc(); return TOK_TYPEOF; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 809 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_INLINE; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 816 "scanner.l"
{ // http://msdn.microsoft.com/en-us/library/z8y1yy88.aspx
                  if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_INLINE; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 823 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 824 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 826 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_GCC_LABEL; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 833 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_TRY; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 839 "scanner.l"
{ if(PARSER.cpp) // C++?
                    { loc(); return TOK_TRY; }
                  else if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_TRY; }                    
                  else
                    return make_identifier();
                }
	YY_BREAK
case 212:
#line 848 "scanner.l"
case 213:
YY_RULE_SETUP
#line 848 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_FINALLY; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 214:
#line 855 "scanner.l"
case 215:
YY_RULE_SETUP
#line 855 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_EXCEPT; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 216:
#line 862 "scanner.l"
case 217:
YY_RULE_SETUP
#line 862 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_LEAVE; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 868 "scanner.l"
{ loc(); return TOK_CPROVER_ATOMIC; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 869 "scanner.l"
{ loc(); return TOK_FORALL; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 870 "scanner.l"
{ loc(); return TOK_EXISTS; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 871 "scanner.l"
{ loc(); return TOK_ARRAY_OF; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 872 "scanner.l"
{ loc(); return TOK_THREAD_LOCAL; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 873 "scanner.l"
{ loc(); return TOK_CPROVER_BITVECTOR; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 874 "scanner.l"
{ loc(); return TOK_CPROVER_BOOL; }
	YY_BREAK
case 225:
#line 877 "scanner.l"
case 226:
YY_RULE_SETUP
#line 877 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_ACSL_FORALL;
                }
	YY_BREAK
case 227:
#line 882 "scanner.l"
case 228:
YY_RULE_SETUP
#line 882 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_ACSL_EXISTS;
                }
	YY_BREAK
case 229:
#line 886 "scanner.l"
case 230:
YY_RULE_SETUP
#line 886 "scanner.l"
{ /* Non-standard, obviously. Found in Spec# and ACSL syntax. */
                  loc(); return TOK_IMPLIES;
                }
	YY_BREAK
case 231:
#line 891 "scanner.l"
case 232:
YY_RULE_SETUP
#line 891 "scanner.l"
{ /* Non-standard, obviously. Found in Spec# and ACSL syntax. */
                  loc(); return TOK_EQUIVALENT;
                }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 895 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_GE;
                }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 899 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_LE;
                }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 903 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_ANDAND;
                }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 907 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_OROR;
                }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 911 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_TRUE;
                }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 915 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_FALSE;
                }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 919 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_THREAD_LOCAL; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 240:
YY_RULE_SETUP
#line 928 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNAS; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 241:
YY_RULE_SETUP
#line 937 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 242:
YY_RULE_SETUP
#line 946 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ATOMIC; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 243:
YY_RULE_SETUP
#line 955 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_GENERIC; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 244:
YY_RULE_SETUP
#line 964 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_IMAGINARY; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 245:
YY_RULE_SETUP
#line 973 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_NORETURN; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 246:
YY_RULE_SETUP
#line 982 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                      PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_STATIC_ASSERT; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 247:
YY_RULE_SETUP
#line 991 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_THREAD_LOCAL; }
                  else
                    return make_identifier();
                }
	YY_BREAK

/* operators following */

case 248:
YY_RULE_SETUP
#line 1003 "scanner.l"
{ loc(); return TOK_ARROW; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 1004 "scanner.l"
{ loc(); return TOK_INCR; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 1005 "scanner.l"
{ loc(); return TOK_DECR; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 1006 "scanner.l"
{ loc(); return TOK_SHIFTLEFT; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 1007 "scanner.l"
{ loc(); return TOK_SHIFTRIGHT; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 1008 "scanner.l"
{ loc(); return TOK_LE; }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 1009 "scanner.l"
{ loc(); return TOK_GE; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 1010 "scanner.l"
{ loc(); return TOK_EQ; }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 1011 "scanner.l"
{ loc(); return TOK_NE; }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 1012 "scanner.l"
{ loc(); return TOK_ANDAND; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 1013 "scanner.l"
{ loc(); return TOK_OROR; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 1014 "scanner.l"
{ loc(); return TOK_ELLIPSIS; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 1016 "scanner.l"
{ loc(); return TOK_MULTASSIGN; }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 1017 "scanner.l"
{ loc(); return TOK_DIVASSIGN; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 1018 "scanner.l"
{ loc(); return TOK_MODASSIGN; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 1019 "scanner.l"
{ loc(); return TOK_PLUSASSIGN; }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 1020 "scanner.l"
{ loc(); return TOK_MINUSASSIGN; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 1021 "scanner.l"
{ loc(); return TOK_SHLASSIGN; }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 1022 "scanner.l"
{ loc(); return TOK_SHRASSIGN; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 1023 "scanner.l"
{ loc(); return TOK_ANDASSIGN; }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 1024 "scanner.l"
{ loc(); return TOK_XORASSIGN; }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 1025 "scanner.l"
{ loc(); return TOK_ORASSIGN; }
	YY_BREAK


case 270:
YY_RULE_SETUP
#line 1030 "scanner.l"
{ return make_identifier(); }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 1032 "scanner.l"
{ newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_integer_literal(yyansi_ctext);
                  PARSER.set_location(stack(yyansi_clval));
                  return TOK_INTEGER;
                }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 1038 "scanner.l"
{ newstack(yyansi_clval); 
                  stack(yyansi_clval)=convert_float_literal(yyansi_ctext);
                  PARSER.set_location(stack(yyansi_clval));
		  return TOK_FLOATING;
		}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 1044 "scanner.l"
{ 
                  PARSER.tag_following=false;
                  if(PARSER.asm_block_following) { BEGIN(ASM_BLOCK); }
                  loc();
                  return yyansi_ctext[0];
                }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 1051 "scanner.l"
{ PARSER.asm_block_following=false;
                  PARSER.tag_following=false;
                  loc();
                  return yyansi_ctext[0];
                }
	YY_BREAK
/* This catches all one-character operators */
case 275:
YY_RULE_SETUP
#line 1058 "scanner.l"
{ loc(); PARSER.tag_following=false; return yyansi_ctext[0]; }
	YY_BREAK

case 276:
YY_RULE_SETUP
#line 1061 "scanner.l"
{ BEGIN(GRAMMAR); }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 1062 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 1064 "scanner.l"
{ BEGIN(ASM_BLOCK); loc(); return '{'; }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 1065 "scanner.l"
{ loc();
                  stack(yyansi_clval).set(ID_value, yyansi_ctext);
                  stack(yyansi_clval).id(ID_string_constant);
                  BEGIN(GRAMMAR);
                  return TOK_ASM_STRING;
                }
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 1072 "scanner.l"
{ loc();
                  stack(yyansi_clval).set(ID_value, yyansi_ctext);
                  stack(yyansi_clval).id(ID_string_constant);
                  return TOK_ASM_STRING; }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 1076 "scanner.l"
{ PARSER.asm_block_following=false;
                  BEGIN(GRAMMAR); loc(); return '}'; }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 1079 "scanner.l"
{ PARSER.parenthesis_counter--;
                        if(PARSER.parenthesis_counter==0)
                          BEGIN(GRAMMAR); }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 1082 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 1083 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 1085 "scanner.l"
{ PARSER.parenthesis_counter--;
                        if(PARSER.parenthesis_counter==0)
                          BEGIN(GRAMMAR); }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 1088 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 1089 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
/* The following ugly stuff avoids two-token lookahead in the parser;
     e.g., asm void f()  vs.  asm ("xyz") or asm { ... } */

case 288:
YY_RULE_SETUP
#line 1094 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 1095 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 1096 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); PARSER.asm_block_following=true; return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 1097 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 1098 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 1099 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 1100 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 1101 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 1102 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); PARSER.asm_block_following=true; return TOK_GCC_ASM; }
	YY_BREAK


case 297:
YY_RULE_SETUP
#line 1106 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE2); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 1107 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 1108 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 1109 "scanner.l"
{ BEGIN(GRAMMAR); loc(); return yyansi_ctext[0]; }
	YY_BREAK

// an attribute is following -- these may be keywords!
case 301:
#line 1115 "scanner.l"
case 302:
YY_RULE_SETUP
#line 1115 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_ALIGNED; }
	YY_BREAK
case 303:
#line 1118 "scanner.l"
case 304:
YY_RULE_SETUP
#line 1118 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_PACKED; }
	YY_BREAK
case 305:
#line 1121 "scanner.l"
case 306:
YY_RULE_SETUP
#line 1121 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_TRANSPARENT_UNION; }
	YY_BREAK
case 307:
#line 1124 "scanner.l"
case 308:
YY_RULE_SETUP
#line 1124 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_VECTOR_SIZE; }
	YY_BREAK
case 309:
#line 1127 "scanner.l"
case 310:
YY_RULE_SETUP
#line 1127 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_MODE; }
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 1129 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 1130 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 1131 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE4); }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 1132 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE5); }
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 1133 "scanner.l"
{ /* ignore */ }
	YY_BREAK

// an attribute we do process
case 316:
YY_RULE_SETUP
#line 1137 "scanner.l"
{ PARSER.parenthesis_counter++; loc(); return '('; }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 1138 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                  {
                    BEGIN(GCC_ATTRIBUTE5);
                    loc();
                    return TOK_GCC_ATTRIBUTE_END;
                  }
                  else
                  {
                    PARSER.parenthesis_counter--;
                    loc();
                    return ')';
                  }
                }
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 1151 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                  {
                    BEGIN(GCC_ATTRIBUTE2);
                    loc();
                    return TOK_GCC_ATTRIBUTE_END;
                  }
                  else
                  {
                    loc();
                    return ',';
                  }
                }
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 1163 "scanner.l"
{ newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_integer_literal(yyansi_ctext);
                  PARSER.set_location(stack(yyansi_clval));
                  return TOK_INTEGER;
                }
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 1168 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 1169 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 1170 "scanner.l"
{ return make_identifier(); }
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 1171 "scanner.l"
{ loc(); return yyansi_ctext[0]; }
	YY_BREAK

// an attribute we just ignore
case 324:
YY_RULE_SETUP
#line 1175 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 1176 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                    BEGIN(GCC_ATTRIBUTE5);
                  else
                    PARSER.parenthesis_counter--;
                }
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 1181 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                    BEGIN(GCC_ATTRIBUTE2); }
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 1183 "scanner.l"
{ /* Throw away */ }
	YY_BREAK

// end bit: the closing parenthesis
case 328:
YY_RULE_SETUP
#line 1187 "scanner.l"
{ BEGIN(GRAMMAR); }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 1188 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 1189 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 1190 "scanner.l"
{ BEGIN(GRAMMAR); loc(); return yyansi_ctext[0]; }
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(GRAMMAR):
case YY_STATE_EOF(COMMENT2):
case YY_STATE_EOF(STRING_LITERAL):
case YY_STATE_EOF(ASM_BLOCK):
case YY_STATE_EOF(MSC_ASM):
case YY_STATE_EOF(MSC_DECLSPEC):
case YY_STATE_EOF(MSC_PRAGMA):
case YY_STATE_EOF(MSC_ANNOTATION):
case YY_STATE_EOF(GCC_ATTRIBUTE1):
case YY_STATE_EOF(GCC_ATTRIBUTE2):
case YY_STATE_EOF(GCC_ATTRIBUTE3):
case YY_STATE_EOF(GCC_ATTRIBUTE4):
case YY_STATE_EOF(GCC_ATTRIBUTE5):
case YY_STATE_EOF(GCC_ASM):
case YY_STATE_EOF(GCC_ASM_VOLATILE):
case YY_STATE_EOF(GCC_ASM_PAREN):
#line 1193 "scanner.l"
{ yyterminate(); /* done! */ }
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 1195 "scanner.l"
ECHO;
	YY_BREAK
#line 4986 "lex.yy.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyansi_cin at a new source and called
			 * yyansi_clex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyansi_cin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yyansi_cwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yyansi_ctext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yyansi_clex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyansi_crealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyansi_crestart(yyansi_cin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyansi_crealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 92);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2890 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 92;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2890 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2889);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyansi_crestart(yyansi_cin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yyansi_cwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yyansi_ctext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyansi_crestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyansi_censure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE );
	}

	yyansi_c_init_buffer(YY_CURRENT_BUFFER,input_file );
	yyansi_c_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyansi_c_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yyansi_cpop_buffer_state();
	 *		yyansi_cpush_buffer_state(new_buffer);
     */
	yyansi_censure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yyansi_c_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yyansi_cwrap()) processing, but the only time this flag
	 * is looked at is after yyansi_cwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yyansi_c_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyansi_cin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyansi_c_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyansi_calloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyansi_calloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yyansi_c_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yyansi_c_create_buffer()
 * 
 */
    void yyansi_c_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyansi_cfree((void *) b->yy_ch_buf  );

	yyansi_cfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyansi_crestart() or at EOF.
 */
    static void yyansi_c_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yyansi_c_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yyansi_c_init_buffer was _probably_
     * called from yyansi_crestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyansi_c_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yyansi_c_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyansi_cpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyansi_censure_buffer_stack();

	/* This block is copied from yyansi_c_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yyansi_c_switch_to_buffer. */
	yyansi_c_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyansi_cpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yyansi_c_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yyansi_c_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyansi_censure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyansi_calloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyansi_censure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyansi_crealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyansi_censure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yyansi_c_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyansi_calloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yyansi_c_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yyansi_clex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yyansi_c_scan_bytes() instead.
 */
YY_BUFFER_STATE yyansi_c_scan_string (yyconst char * yystr )
{
    
	return yyansi_c_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yyansi_clex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yyansi_c_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyansi_calloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yyansi_c_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yyansi_c_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yyansi_ctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yyansi_ctext[yyansi_cleng] = (yy_hold_char); \
		(yy_c_buf_p) = yyansi_ctext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyansi_cleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyansi_cget_lineno  (void)
{
        
    return yyansi_clineno;
}

/** Get the input stream.
 * 
 */
FILE *yyansi_cget_in  (void)
{
        return yyansi_cin;
}

/** Get the output stream.
 * 
 */
FILE *yyansi_cget_out  (void)
{
        return yyansi_cout;
}

/** Get the length of the current token.
 * 
 */
int yyansi_cget_leng  (void)
{
        return yyansi_cleng;
}

/** Get the current token.
 * 
 */

char *yyansi_cget_text  (void)
{
        return yyansi_ctext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyansi_cset_lineno (int  line_number )
{
    
    yyansi_clineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yyansi_c_switch_to_buffer
 */
void yyansi_cset_in (FILE *  in_str )
{
        yyansi_cin = in_str ;
}

void yyansi_cset_out (FILE *  out_str )
{
        yyansi_cout = out_str ;
}

int yyansi_cget_debug  (void)
{
        return yyansi_c_flex_debug;
}

void yyansi_cset_debug (int  bdebug )
{
        yyansi_c_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yyansi_clex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyansi_cin = stdin;
    yyansi_cout = stdout;
#else
    yyansi_cin = (FILE *) 0;
    yyansi_cout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yyansi_clex_init()
     */
    return 0;
}

/* yyansi_clex_destroy is for both reentrant and non-reentrant scanners. */
int yyansi_clex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yyansi_c_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yyansi_cpop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyansi_cfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yyansi_clex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyansi_calloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyansi_crealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyansi_cfree (void * ptr )
{
	free( (char *) ptr );	/* see yyansi_crealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1195 "scanner.l"



int yyansi_cwrap() { return 1; }

