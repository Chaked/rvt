#line 2 "lex.yy.cpp"

#line 4 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer yycpp_create_buffer
#define yy_delete_buffer yycpp_delete_buffer
#define yy_flex_debug yycpp_flex_debug
#define yy_init_buffer yycpp_init_buffer
#define yy_flush_buffer yycpp_flush_buffer
#define yy_load_buffer_state yycpp_load_buffer_state
#define yy_switch_to_buffer yycpp_switch_to_buffer
#define yyin yycppin
#define yyleng yycppleng
#define yylex yycpplex
#define yylineno yycpplineno
#define yyout yycppout
#define yyrestart yycpprestart
#define yytext yycpptext
#define yywrap yycppwrap
#define yyalloc yycppalloc
#define yyrealloc yycpprealloc
#define yyfree yycppfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yycpprestart(yycppin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yycppleng;

extern FILE *yycppin, *yycppout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yycpptext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yycpptext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yycpprestart()), so that the user can continue scanning by
	 * just pointing yycppin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yycpptext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yycppleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yycppwrap()'s to do buffer switches
 * instead of setting up a fresh yycppin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yycpprestart (FILE *input_file  );
void yycpp_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yycpp_create_buffer (FILE *file,int size  );
void yycpp_delete_buffer (YY_BUFFER_STATE b  );
void yycpp_flush_buffer (YY_BUFFER_STATE b  );
void yycpppush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yycpppop_buffer_state (void );

static void yycppensure_buffer_stack (void );
static void yycpp_load_buffer_state (void );
static void yycpp_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yycpp_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yycpp_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yycpp_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yycpp_scan_bytes (yyconst char *bytes,int len  );

void *yycppalloc (yy_size_t  );
void *yycpprealloc (void *,yy_size_t  );
void yycppfree (void *  );

#define yy_new_buffer yycpp_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yycppensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yycpp_create_buffer(yycppin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yycppensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yycpp_create_buffer(yycppin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yycppin = (FILE *) 0, *yycppout = (FILE *) 0;

typedef int yy_state_type;

extern int yycpplineno;

int yycpplineno = 1;

extern char *yycpptext;
#define yytext_ptr yycpptext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yycpptext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yycppleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 254
#define YY_END_OF_BUFFER 255
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1187] =
    {   0,
        0,    0,    4,    4,    9,    9,    0,    0,   29,   29,
       28,   28,    0,    0,    0,    0,    0,    0,  255,  253,
       37,   39,   38,  216,  253,  204,  192,  218,  211,  253,
      199,  200,  212,  213,  201,  214,  210,  217,  194,  193,
      224,  227,  219,  225,  220,  223,  192,  208,  209,  221,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  226,  222,  207,  215,    4,    6,    5,    5,    9,
        8,   12,  254,   11,   10,   29,   30,   28,   28,   27,
       33,   32,   31,   36,   35,   34,   26,   25,   37,   39,

        0,   38,  239,    0,  198,    0,    0,    0,  205,  206,
        0,    0,    0,  192,  244,  240,  249,    0,    0,  242,
      232,  245,  233,  246,  231,  228,    0,  196,    1,    7,
      243,  196,  194,    0,    0,  196,  194,    0,    0,  193,
      193,    0,  230,  234,  236,  238,  237,  235,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  250,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  102,  192,  192,  192,  192,
      192,  192,  192,  112,  192,  192,  192,  192,  192,  192,
      192,  184,  192,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      251,  241,    4,    2,    3,    9,   29,   28,   28,   27,
      198,  198,    0,    0,    0,    0,    0,  202,    0,    0,
        0,  197,    0,    0,  229,  252,    0,  196,  196,    0,
        0,  196,  195,    0,    0,    0,  194,    0,    0,    0,
      193,  247,  248,    0,    0,    0,    0,    0,    0,    0,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  181,   42,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  109,  192,  192,  192,  114,  192,  192,
      192,  118,  192,  189,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  137,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  187,    0,    0,    0,    0,    0,    0,    0,  196,
        0,  196,    0,  195,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  192,   89,  192,  192,   90,  192,   92,
      192,   94,  192,  192,  192,  192,  192,  192,  192,  192,
      104,  105,  192,  192,  192,  192,  111,  192,  115,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  134,  192,
      192,  192,  192,  192,  192,  192,  145,  192,  192,  192,
      192,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      196,    0,    0,    0,  195,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   20,  192,  192,  192,   41,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,   84,  192,  192,  192,
      192,   79,  192,  192,  192,  192,  192,  192,  185,   91,
       93,   95,  191,   96,  192,  192,  192,  192,  192,  192,
      192,  108,  192,  192,  192,  192,  192,  192,  192,  186,
      192,  192,  192,  192,  192,  192,  126,  192,  192,  192,
      192,  192,  192,  192,  136,  192,  192,  192,  192,  141,
      192,  143,  192,  192,  192,  150,  192,    0,    0,    0,
        0,  196,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,   72,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,   46,  192,  192,  192,  183,  182,
      192,  192,  192,   99,  103,  192,  107,  110,  113,  192,
      192,  192,  190,  192,  192,  192,  123,  192,  192,  125,
      127,  128,  129,  131,  132,  192,  192,  192,  139,  192,
       69,  192,  192,  192,  192,  188,    0,    0,  196,    0,
        0,   16,    0,    0,   23,   22,    0,    0,    0,  192,

      192,  192,   43,  192,  192,  192,   47,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,   73,   74,   75,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,   86,  192,  192,   76,   77,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
       52,   68,  192,  192,   98,  192,  116,  192,  192,  192,
      121,  192,  192,  192,  192,  192,  192,  138,  192,  192,
      144,  192,  147,    0,    0,   17,    0,   21,    0,    0,
        0,   80,  192,  192,  192,  192,  192,  192,  192,   85,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,   83,   53,  149,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  173,  192,  192,  192,
      192,  192,  192,  192,   24,   82,  192,   64,  192,  192,
       70,   88,   66,  192,  192,   97,  100,  106,  192,  119,
      120,  192,  124,   58,  192,  133,  192,  140,  142,  146,
        0,  203,    0,    0,    0,    0,    0,  192,  192,  192,
       63,  192,  192,  192,  192,  192,   87,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  171,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  192,   61,  192,  192,
      192,   48,  117,  122,  192,  192,    0,    0,    0,    0,
        0,  192,  192,  192,  192,  101,  192,   62,  148,  192,
      192,  154,  192,  192,  192,  192,  192,  192,  192,   54,
      192,  192,  192,  167,  192,  192,  170,  192,  192,  192,
      192,  192,  192,  179,  192,  192,   60,   65,   78,   71,
      192,  192,  192,    0,   19,   13,    0,    0,  192,  192,
       40,   44,   81,  192,  192,  192,  192,  192,  192,  192,
      192,   50,  192,   55,  192,  192,  192,  192,  192,  192,
      192,  192,  177,  192,  192,  192,  192,  192,  192,  192,

        0,   15,    0,  192,  192,  192,  192,  192,  153,  192,
      192,  192,  192,  192,  192,  192,  166,  192,  192,  192,
      192,  192,  192,  192,  192,   57,   59,   67,  192,  135,
        0,    0,  192,  192,   45,   49,   56,  192,  192,  192,
      192,  192,  192,  165,  192,  169,  192,  192,  192,  192,
      192,  192,  130,    0,    0,  152,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  175,  176,  192,  192,
        0,    0,  192,  155,  192,  192,  192,  192,  192,  192,
      192,   51,  192,  192,  192,  192,  192,   18,    0,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  174,

      192,  180,    0,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,    0,  192,  192,  192,
      158,  192,  192,  161,  192,  192,  192,  192,  192,  192,
        0,  192,  192,  192,  192,  192,  192,  192,  192,  168,
      192,  192,    0,  192,  156,  192,  159,  192,  192,  192,
      192,  172,  192,    0,  192,  192,  192,  192,  163,  192,
      192,    0,  151,  192,  192,  192,  192,  192,    0,  192,
      192,  192,  192,  178,    0,  192,  192,  162,  164,    0,
      157,  160,    0,    0,   14,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,    1,   38,   39,   40,   39,   41,   42,
       11,   11,   11,   11,   11,   43,   11,   11,   44,   45,
       11,   46,   47,   11,   48,   49,   11,   50,   11,   11,
       51,   52,   53,   54,   55,    1,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   11,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,   82,   83,   84,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[85] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        3,    1,    1,    4,    1,    1,    5,    1,    1,    1,
        6,    5,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1,    1,    1,    8,    8,    8,
        9,    7,   10,    3,   11,    3,    3,    3,    3,    3,
        1,    1,    1,   12,    3,    8,    8,    8,    8,    9,
        7,    3,    3,    3,    3,   10,    3,    3,    3,   11,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
       12,    1,   13,    1
    } ;

static yyconst flex_int16_t yy_base[1218] =
    {   0,
        0,    0,   82,   83, 1933, 1932,   86,   91, 1851, 1850,
       85,   88,   93,   95,  100,  109,   90,   94, 1932, 1937,
      115, 1937,  124, 1896,  104,  170,    0, 1895,  101, 1877,
     1937, 1937, 1893,  105, 1937,  113,  134,  115,  220,  278,
     1895, 1937,  100, 1891,  109, 1937,  132,  218, 1937, 1890,
      127,  108,  106,  146,  119,  138,  118, 1855,  142, 1854,
     1847,  157,   82,  117, 1861,  144,  151,  151,  158,  170,
     1851, 1937,  170, 1937, 1937,    0, 1937, 1897, 1901,    0,
     1937, 1937, 1937, 1937, 1937,    0, 1937,    0,  230, 1937,
     1937, 1937, 1937, 1937, 1937, 1937, 1937, 1937,  251, 1937,

      269,  310, 1937,  225,  320,  364, 1914,  441, 1937, 1913,
      331,  228,  256,    0, 1937, 1937, 1937,  215,  503, 1937,
     1937, 1937, 1937, 1937, 1898, 1937, 1893,  304, 1937, 1937,
     1937,  308,  188,  354,  379, 1937,  375,    0,  306,    0,
      381,  353, 1937, 1878, 1937, 1937, 1937, 1877,  230, 1859,
      415, 1872,  216, 1840, 1848, 1838, 1831, 1937, 1836,  542,
     1845, 1843, 1834, 1837, 1841, 1832, 1824, 1823, 1827, 1835,
      214, 1838, 1837,  229,  282, 1817, 1818, 1815,  190, 1820,
     1816, 1823, 1812,    0,  244, 1817, 1810, 1816, 1805,  259,
     1821, 1825,  302, 1822,  338, 1809,  305,  363, 1813, 1809,

      312, 1796, 1804,  364, 1809, 1800,  367, 1808, 1806, 1797,
     1937, 1937,    0, 1937, 1937,    0,    0,    0,  379, 1937,
      450,  492, 1859, 1864,  495,    0, 1863, 1937,  560,  232,
      338, 1937,  597,    0, 1937, 1937,  609, 1937,  473,  627,
      636,  437,  625,  401, 1840, 1837, 1937,  448, 1838, 1835,
     1937, 1937, 1937, 1806, 1796, 1789, 1799,  404, 1782, 1792,
     1788, 1809,  410,  392, 1793, 1774,  444, 1795,  475, 1790,
     1780,  417, 1788,  205,  474, 1772,  481, 1817, 1785, 1786,
     1777, 1780, 1786,    0, 1771,  436, 1773, 1782, 1777, 1778,
     1763, 1761, 1763,  412, 1766, 1775, 1770, 1772, 1768, 1760,

     1760, 1765, 1768,    0, 1763, 1753, 1757,    0, 1758, 1763,
     1758,    0, 1757, 1761, 1743, 1754, 1737, 1738, 1745, 1746,
     1735, 1733, 1735, 1738, 1745, 1730, 1728, 1728, 1731, 1727,
      485,    0, 1739, 1729, 1733, 1728, 1721, 1735, 1737, 1736,
     1725, 1735,  678,  722,  446,  506,  657,  770,  687,  531,
      696,  632,  506,  690,  814,  532, 1759, 1758,  525, 1713,
     1717, 1710, 1724, 1708, 1710, 1722, 1710, 1733, 1714, 1710,
     1702, 1715, 1702,  498, 1715,  520, 1699, 1703, 1701, 1697,
     1695, 1712, 1710,  483, 1710, 1708, 1691, 1706, 1689,  390,
     1698, 1700, 1694, 1678, 1686, 1691, 1696, 1687, 1725, 1693,

     1684, 1685, 1680, 1687,    0, 1678, 1673,    0, 1679,    0,
     1680,    0, 1669, 1675, 1666, 1675, 1664, 1662, 1662, 1669,
        0,    0, 1670, 1661, 1658, 1663,    0, 1662,    0, 1672,
     1655, 1653, 1666, 1669, 1653, 1667, 1662, 1657, 1647, 1647,
     1646, 1643, 1656, 1646, 1650, 1655, 1654, 1645,    0, 1654,
     1632,  673, 1640, 1645, 1644, 1630,    0, 1630, 1631, 1642,
     1641,  328,    0,  844,  577,  555,    0,  624,  830,  790,
      724,  570, 1675, 1672, 1937, 1629,  524, 1622, 1632, 1623,
     1628, 1637, 1620, 1633, 1937, 1624, 1645, 1626, 1632, 1614,
     1627, 1626, 1613, 1609, 1615, 1620, 1619, 1604, 1621, 1620,

     1617, 1619,  628, 1611, 1608,  710,  820, 1595, 1610, 1607,
      602, 1602, 1593, 1598, 1607, 1591,    0, 1603, 1603, 1587,
     1604,    0, 1593, 1585, 1589, 1587, 1584, 1595,    0,    0,
        0,    0,    0,    0, 1585, 1573, 1585, 1590, 1589, 1590,
     1579,    0, 1587, 1585, 1578, 1573, 1567, 1570, 1566,    0,
     1565, 1580, 1579, 1562, 1571, 1566,    0, 1574, 1571, 1573,
     1556, 1566, 1572, 1568,    0, 1566, 1566, 1568, 1562,    0,
     1554,    0, 1565, 1556, 1564,    0, 1547,  895,  673,  909,
      918,  726, 1587, 1544, 1542, 1554, 1555, 1553, 1537, 1550,
     1535, 1540, 1547, 1546, 1556, 1536, 1548, 1538, 1535, 1544,

     1533, 1524,  568, 1527, 1528, 1537, 1528, 1519, 1532,  833,
     1513, 1521, 1534, 1520,  584, 1562, 1559,    0, 1513, 1527,
     1527,  689, 1522,  610, 1513, 1511, 1519,  711, 1510, 1521,
     1516, 1501, 1507, 1548, 1545, 1516, 1498, 1509, 1512, 1509,
     1497, 1496, 1495, 1489,    0, 1492, 1501, 1499,    0,    0,
     1484, 1488, 1483,    0,    0, 1492,    0,    0,    0, 1495,
     1498, 1481,    0, 1483, 1491, 1476,    0, 1489, 1490,    0,
        0,    0, 1492,    0,    0, 1472, 1490, 1483,    0, 1476,
        0, 1482, 1475, 1474, 1465,    0,  770,  927,  820, 1471,
     1463, 1937, 1478, 1469, 1937, 1937, 1478, 1457, 1477, 1453,

     1489, 1460,    0, 1471, 1461, 1466,    0, 1455, 1445, 1449,
     1449, 1465, 1454, 1495, 1454, 1444, 1447, 1451, 1445, 1441,
     1439, 1447, 1446, 1435, 1453, 1447, 1476,    0,    0,    0,
     1444, 1431, 1430, 1446, 1433, 1434, 1429, 1423, 1423,  368,
     1435, 1439, 1427, 1429, 1426,    0, 1416, 1434,    0,    0,
     1434, 1424, 1428, 1420, 1429, 1423, 1422, 1410, 1417, 1420,
        0,    0, 1419, 1418,    0, 1403,    0, 1418, 1407, 1402,
        0, 1413, 1400, 1397, 1414, 1409, 1402,    0, 1407, 1407,
        0, 1405,    0, 1461, 1393, 1937, 1388, 1937, 1388, 1388,
     1385,    0, 1394, 1376, 1357, 1365, 1350, 1367, 1354,    0,

     1359, 1345, 1327, 1377, 1310, 1280, 1273, 1272, 1255, 1263,
     1260, 1247, 1245, 1237,    0,   83,    0,   97,  168,  229,
      279,  322,  353,  407,  458,  478,    0,  473,  549,  564,
      573,  579,  597,  607,    0,    0,  632,  637,  631,  633,
      653,    0,    0,  662,  677,    0,    0,    0,  683,    0,
        0,  685,    0,    0,  684,    0,  690,    0,    0,    0,
      773, 1937,  712,  715,  723,  725,  734,  748,  749,  731,
        0,  751,  749,  763,  755,  759,    0,  803,  769,  772,
      770,  796,  801,  789,  794,  808,  809,  825,  832,  830,
      827,  845,  830,  844,  843,  827,    0,  839,  845,  857,

      854,  850,  849,  868,  862,  857,  904,    0,  894,  906,
      902,    0,    0,    0,  890,  906,  918,  893,  907,  893,
      901,  913,  916,  912,  918,    0,  906,    0,    0,  911,
      914,    0,  911,  906,  915,  925,  906,  909,  905,    0,
      924,  929,  917,    0,  916,  933,    0,  929,  922,  920,
      927,  935,  935,    0,  941,  942,  943,    0,    0,    0,
      944,  940,  945,  928, 1937, 1937,  943,  935,  936,  943,
        0,  952,    0,  953,  941,  942,  947,  943,  957,  955,
      959,    0,  952,    0,  959,  957,  945,  946,  965,  950,
      951,  968,    0,  970,  968,  972,  973,  974,  958,  965,

      960, 1937,  959,  965,  963,  981,  982,  978,    0,  959,
      963,  975,  982,  977,  971,  971,    0,  982,  987,  990,
      979,  994,  978,  976,  987,    0,    0,    0,  980,    0,
      991, 1000,  991,  998,    0,    0,    0,  999, 1005, 1006,
      989, 1008,  990,    0, 1008,    0, 1006, 1004,  989,  996,
     1014, 1015,    0, 1004,  999,    0, 1018, 1003, 1020, 1021,
     1007, 1023, 1010, 1018, 1030, 1022,    0,    0, 1021, 1015,
     1027, 1026, 1032,    0, 1019, 1024, 1021, 1026, 1036, 1025,
     1038,    0, 1039, 1042, 1043, 1027, 1030, 1937, 1035, 1050,
     1033, 1039, 1035, 1042, 1038, 1038, 1041, 1060, 1050,    0,

     1057,    0, 1050, 1053, 1056, 1048, 1043, 1059, 1051, 1046,
     1052, 1069, 1054, 1055, 1074, 1076, 1077, 1064, 1072, 1061,
        0, 1074, 1063,    0, 1066, 1065, 1068, 1072, 1069, 1085,
     1088, 1087, 1078, 1075, 1080, 1077, 1075, 1082, 1077,    0,
     1080, 1088, 1081, 1100,    0, 1082,    0, 1083, 1101, 1088,
     1103,    0, 1106, 1089, 1098, 1107, 1108, 1093,    0, 1094,
     1096, 1098,    0, 1097, 1098, 1104, 1105, 1102, 1112, 1108,
     1109, 1107, 1108,    0, 1124, 1110, 1111,    0,    0, 1109,
        0,    0, 1111, 1126, 1937, 1937, 1186, 1199, 1212, 1225,
     1238, 1251, 1264, 1277, 1290, 1303, 1314, 1325, 1338, 1351,

     1364, 1376, 1387, 1394, 1398, 1403, 1406, 1409, 1412, 1415,
     1419, 1423, 1427, 1432, 1436, 1440, 1450
    } ;

static yyconst flex_int16_t yy_def[1218] =
    {   0,
     1186,    1, 1187, 1187, 1188, 1188, 1189, 1189, 1190, 1190,
     1191, 1191, 1192, 1192, 1193, 1193, 1194, 1194, 1186, 1186,
     1186, 1186, 1186, 1186, 1195, 1196, 1197, 1186, 1186, 1198,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1197, 1186, 1186, 1186,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1186, 1186, 1186, 1186, 1199, 1186, 1186, 1186, 1200,
     1186, 1186, 1186, 1186, 1186, 1201, 1186, 1202, 1202, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1195, 1186, 1186, 1196, 1196, 1186, 1196,
     1203, 1196, 1196, 1197, 1186, 1186, 1186, 1198, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1204, 1186, 1186,
     1186, 1205,   39, 1206, 1186, 1186, 1186, 1207, 1186,   40,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1195, 1198,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,

     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1186, 1186, 1199, 1186, 1186, 1200, 1201, 1202, 1202, 1186,
     1186, 1186, 1186, 1186, 1195, 1208, 1203, 1186, 1203, 1196,
     1196, 1186, 1198, 1209, 1186, 1186, 1186, 1186, 1205, 1186,
     1186, 1210, 1207, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,

     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1195, 1195, 1196, 1196, 1198, 1198, 1186, 1211,
     1186, 1212, 1213, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,

     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1195,  344, 1196, 1196, 1198,  348, 1213, 1186, 1186,
     1214, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,

     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1196, 1196, 1186,
     1186, 1215, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1197, 1197, 1197, 1197, 1197, 1197, 1197,

     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1196, 1186, 1216, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1197,

     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1217, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,

     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1217, 1186, 1186, 1186, 1186, 1186, 1186, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,

     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1186, 1186, 1186, 1186,
     1186, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1186, 1186, 1186, 1186, 1186, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,

     1186, 1186, 1186, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1186, 1186, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1186, 1186, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1186, 1186, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1186, 1186, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,

     1197, 1197, 1186, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1186, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1186, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1186, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1186, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1186, 1197, 1197, 1197, 1197, 1197, 1197, 1186, 1197,
     1197, 1197, 1197, 1197, 1186, 1197, 1197, 1197, 1197, 1186,
     1197, 1197, 1186, 1186, 1186,    0, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186
    } ;

static yyconst flex_int16_t yy_nxt[2022] =
    {   0,
       20,   21,   22,   23,   23,   23,   21,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   40,   40,   40,   40,   40,   40,
       40,   41,   42,   43,   44,   45,   46,   27,   27,   27,
       27,   27,   47,   27,   27,   27,   27,   27,   27,   27,
       48,   20,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   27,   59,   27,   60,   61,   62,   63,   64,
       27,   65,   66,   67,   68,   69,   70,   71,   27,   27,
       72,   73,   74,   75,   77,   77,   89,   83,   83,   89,
       83,   89,   83,   83,   89,   83,   83,   83,   78,   78,

       84,   85,   83,   79,   79,   84,   85,   92,   93,   92,
       93,   83,  105,  116,   95,   96,   99,  100,  101,  101,
      101,   99,  121,   95,   96,  101,  100,  102,  102,  102,
      101,  129,  123,  144,  145,  117,  130,  889,   83,  122,
      149,   83,   98,  147,  148,  150,   98,  124,  125,  131,
      126,  191,  890,  192,  127,  106,  128,  128,  128,  128,
      128,  128,  128,  128,  128,   90,  159,   83,   90,  168,
       83,  108,  109,  164,  169,  165,  108,  170,  175,  110,
      166,  160,  167,  180,  161,  162,  181,  176,  193,  182,
      163,  194,  111,  111,  111,  111,  111,  111,  111,  111,

      111,  171,  184,  177,  211,  178,  196,  197,  172,  185,
      200,  173,  188,  201,  174,  179,  189,  198,  204,  151,
      199,  206,  202,  205,  151,  190,  207,  208,  232,  203,
      109,  219,  209,  105,  109,  112,  219, 1186,  105,  113,
      132,  891,  133,  133,  133,  133,  133,  133,  133,  134,
      134,  212,   99,  100,  101,  101,  101,   99,  109,  301,
      135,  136,  137,  302,  152, 1186,  119,  137,  391,  138,
      101,  100,  101,  101,  101,  101,  106,  153,  392,  135,
      136,  106,  255,  139,  154,  137,  289,  290,  892,  155,
      156,  230,  157,  256,  137,  293,  294,  138,  132,  345,

      140,  140,  140,  140,  140,  140,  140,  140,  140,  307,
      220,  101,  100,  102,  102,  102,  101,  308,  135,  136,
      141,  221,  222,  222,  222,  141,  221,  231,  149,  244,
      313,  245,  314,  228,  246,  247,  105,  135,  136,  295,
      109,  142,  296,  141,  237,  136,  238,  297,  240,  136,
      238,  893,  141,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  223,  237,  136,  317,  324,  240,  136,  238,
      318,  224,  104,  238,  132,  330,  248,  104,  249,  106,
      219,  250,  251,  331,  325,  219,  225,  225,  225,  225,
      225,  225,  225,  346,  135,  136,  241,  894,  241,  320,

      104,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      321,  322,  895,  135,  136,  104,  151,  137,  326,  104,
      104,  151,  137,  141,  104,  357,  827,  334,  141,  247,
      338,  104,  339,  828,  327,  104,  335,  104,  139,  104,
      137,  226,  108,  109,  142,  512,  141,  108,  109,  137,
      372,  221,  222,  222,  222,  141,  221,  373,  149,  220,
      374,  152,  513,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  358,  363,  153,  369,  251,  364,  136,  238,
      896,  154,  370,  371,  415,  416,  155,  156,  388,  157,
      389,  406,  223,  221,  222,  222,  222,  136,  221,  377,

      149,  224,  238,  105,  407,  464,  112,  378,  109,  379,
      113,  118,  380,  240,  136,  238,  118,  343,  343,  343,
      343,  343,  343,  343,  897,  233,  233,  233,  233,  233,
      233,  233,  240,  136,  223,  382,  393,  898,  238,  118,
      397,  383,  384,  224,  450,  394,  106,  385,  505,  398,
      469,  899,  395,  451,  118,  472,  506,  473,  118,  118,
      474,  475,  228,  118,  493,  494,  476,  465,  232,  477,
      118,  478,  136,  238,  118,  469,  118,  496,  118,  109,
      234,  262,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  136,  585,  497,  583,  586,  238,  263,  475,  264,

      265,  266,  267,  900,  268,  269,  119,  270,  727,  271,
      232,  272,  728,  273,  274,  275,  276,  277,  278,  347,
      347,  347,  347,  347,  347,  347,  349,  634,  349,  901,
      635,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      708,  709,  902,  579,  351,  353,  351,  903,  119,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  354,  580,  355,
      232,  904,  354,  136,  238,  109,  737,  738,  905,  466,
      466,  466,  466,  466,  466,  466,  105,  611,  356,  906,
      354,  907,  136,  580,  355,  612,  908,  238,  909,  354,

      462,  462,  462,  462,  462,  462,  462,  910,  119,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  911,  687,  106,
      105,  566,  354,  615,  912,  616,  567,  354,  617,  618,
      568,  569,  913,  914,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  356,  734,  354,  915,  735,  916,  463,
      463,  463,  463,  463,  354,  136,  238,  136,  238,  619,
      742,  784,  109,  106,  743,  862,  784,  463,  463,  463,
      463,  463,  463,  232,  136,  917,  136,  918,  919,  238,
      920,  238,  467,  467,  467,  467,  467,  467,  467,  467,

      467,  921,  922,  923,  924,  925,  912,  467,  467,  467,
      467,  467,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  119,  926,  927,  928,  467,  467,  467,  467,  467,
      467,  470,  929,  470,  930,  931,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  578,  109,  581,  932,  581,
      578,  933,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  136,  238,  934,  935,  936,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  620,  621,  622,  623,  624,
      136,  937,  938,  625,  939,  238,  940,  941,  716,  626,
      717,  627,  628,  718,  629,  630,  578,  109,  942,  943,

      719,  578,  944,  945,  946,  947,  720,  721,  722,  112,
      948,  949,  950,  952,  951,  953,  954,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  688,  955,  688,  956,
      957,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  958,  959,
      960,  961,  962,  963,  964,  965,  966,  967,  968,  969,
      971,  972,  973,  974,  975,  976,  977,  978,  979,  980,
      981,  982,  983,  984,  985,  986,  970,  987,  988,  989,
      990,  991,  992,  993,  994,  995,  996,  997,  998,  999,

     1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
     1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
     1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
     1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
     1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
     1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
     1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
     1070, 1071, 1072, 1073, 1074, 1075, 1077, 1076, 1078, 1079,
     1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
     1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,

     1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1107, 1109,
     1111, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
     1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
     1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
     1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
     1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
     1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
     1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
     1180, 1181, 1182, 1183, 1184, 1185,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   80,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
      104,  888,  104,  104,  104,  104,  104,  104,  104,  104,

      104,  104,  104,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  114,  887,  886,  885,
      114,  114,  114,  114,  114,  118,  884,  118,  883,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  213,  882,
      213,  213,  881,  213,  213,  213,  213,  213,  213,  213,
      213,  216,  880,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  218,  879,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,

      128,  878,  128,  128,  239,  877,  239,  239,  134,  134,
      876,  134,  243,  243,  243,  344,  344,  344,  348,  348,
      348,  242,  875,  874,  242,  350,  873,  872,  350,  352,
      871,  870,  352,  468,  468,  468,  869,  468,  471,  868,
      867,  471,  582,  866,  865,  582,  689,  864,  863,  689,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  862,  860,  859,  858,  857,  856,  855,
      854,  853,  852,  851,  850,  849,  848,  847,  846,  845,
      844,  843,  842,  841,  840,  839,  838,  837,  836,  835,
      834,  833,  832,  831,  830,  829,  826,  825,  824,  823,

      822,  821,  820,  819,  818,  817,  816,  815,  814,  813,
      812,  811,  810,  809,  808,  807,  806,  805,  804,  803,
      802,  801,  800,  799,  798,  797,  796,  795,  794,  793,
      792,  791,  790,  789,  788,  787,  786,  785,  783,  782,
      781,  780,  779,  778,  777,  776,  775,  774,  773,  772,
      771,  770,  769,  768,  767,  766,  765,  764,  763,  762,
      761,  760,  759,  758,  757,  756,  755,  754,  753,  752,
      751,  750,  749,  748,  747,  746,  745,  744,  741,  740,
      739,  736,  733,  732,  731,  730,  729,  726,  725,  724,
      723,  715,  714,  713,  712,  711,  710,  707,  706,  705,

      645,  704,  703,  702,  701,  700,  699,  698,  697,  696,
      695,  694,  693,  692,  691,  690,  475,  686,  685,  684,
      683,  682,  681,  680,  679,  678,  677,  676,  675,  674,
      673,  672,  671,  670,  669,  668,  667,  666,  665,  664,
      663,  662,  661,  660,  659,  658,  657,  656,  655,  654,
      653,  652,  651,  650,  649,  648,  647,  646,  645,  644,
      643,  642,  641,  640,  639,  638,  637,  636,  633,  632,
      631,  614,  613,  610,  609,  608,  607,  606,  605,  604,
      603,  602,  601,  600,  599,  598,  597,  596,  595,  594,
      593,  592,  591,  590,  589,  588,  587,  584,  475,  475,

      577,  576,  575,  574,  573,  572,  571,  570,  565,  564,
      563,  562,  561,  560,  559,  558,  557,  556,  555,  554,
      553,  552,  551,  550,  549,  548,  547,  546,  545,  544,
      543,  542,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  532,  531,  530,  529,  528,  527,  526,  525,  524,
      523,  522,  521,  520,  519,  518,  517,  516,  515,  514,
      511,  510,  509,  508,  507,  504,  503,  502,  501,  500,
      499,  498,  495,  492,  491,  490,  489,  488,  487,  486,
      485,  484,  483,  482,  481,  480,  479,  251,  247,  461,
      460,  459,  458,  457,  456,  455,  454,  453,  452,  449,

      448,  447,  446,  445,  444,  443,  442,  441,  440,  439,
      438,  437,  436,  435,  434,  433,  432,  431,  430,  429,
      428,  427,  426,  425,  424,  423,  422,  421,  420,  419,
      418,  417,  414,  413,  412,  411,  410,  409,  408,  405,
      404,  403,  402,  401,  400,  399,  396,  390,  387,  386,
      381,  376,  375,  368,  367,  366,  365,  362,  361,  360,
      359,  251,  251,  247,  247,  228,  222,  149,  342,  341,
      340,  337,  336,  333,  332,  329,  328,  323,  319,  316,
      315,  312,  311,  310,  309,  306,  305,  304,  303,  300,
      299,  298,  292,  291,  288,  287,  286,  285,  284,  283,

      282,  281,  280,  279,  261,  260,  259,  258,  257,  254,
      119,  253,  252,  236,  235,  109,  109,  215,  214,  210,
      195,  187,  186,  183,  158,  146,  143,  120,  119,  115,
      103, 1186,   87,   87,   81,   81,   19, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186
    } ;

static yyconst flex_int16_t yy_chk[2022] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,   11,   11,    7,   12,
       12,   11,   17,    8,   12,   13,   18,   14,    3,    4,

        7,    7,   15,    3,    4,    8,    8,   13,   13,   14,
       14,   16,   25,   29,   15,   15,   21,   21,   21,   21,
       21,   21,   34,   16,   16,   23,   23,   23,   23,   23,
       23,   38,   36,   43,   43,   29,   38,  816,   11,   34,
       47,   12,   17,   45,   45,   47,   18,   36,   36,   38,
       37,   63,  818,   63,   37,   25,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   11,   51,   11,   12,   53,
       12,   26,   26,   52,   53,   52,   26,   53,   55,   26,
       52,   51,   52,   57,   51,   51,   57,   55,   64,   57,
       51,   64,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   54,   59,   56,   73,   56,   66,   66,   54,   59,
       67,   54,   62,   67,   54,   56,   62,   66,   68,   48,
       66,   69,   67,   68,   48,   62,   69,   70,  118,   67,
      112,   89,   70,  104,  230,   26,   89,  133,  149,   26,
       39,  819,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   73,   99,   99,   99,   99,   99,   99,  113,  179,
       39,   39,   39,  179,   48,  133,  118,   39,  274,   39,
      101,  101,  101,  101,  101,  101,  104,   48,  274,   39,
       39,  149,  153,   39,   48,   39,  171,  171,  820,   48,
       48,  112,   48,  153,   39,  174,  174,   39,   40,  230,

       40,   40,   40,   40,   40,   40,   40,   40,   40,  185,
       89,  102,  102,  102,  102,  102,  102,  185,   40,   40,
       40,  105,  105,  105,  105,   40,  105,  113,  105,  139,
      190,  139,  190,  111,  139,  139,  462,   40,   40,  175,
      231,   40,  175,   40,  128,  128,  128,  175,  132,  132,
      132,  821,   40,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  105,  128,  128,  193,  197,  132,  132,  128,
      193,  105,  106,  132,  134,  201,  142,  106,  142,  462,
      219,  142,  142,  201,  197,  219,  106,  106,  106,  106,
      106,  106,  106,  231,  134,  134,  135,  822,  135,  195,

      106,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      195,  195,  823,  134,  134,  106,  151,  137,  198,  106,
      106,  151,  137,  141,  106,  244,  740,  204,  141,  244,
      207,  106,  207,  740,  198,  106,  204,  106,  137,  106,
      137,  106,  108,  108,  141,  390,  141,  108,  345,  137,
      264,  221,  221,  221,  221,  141,  221,  264,  221,  219,
      264,  151,  390,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  248,  258,  151,  263,  248,  258,  242,  242,
      824,  151,  263,  263,  294,  294,  151,  151,  272,  151,
      272,  286,  221,  222,  222,  222,  222,  242,  222,  267,

      222,  221,  242,  225,  286,  345,  108,  267,  346,  267,
      108,  119,  267,  239,  239,  239,  119,  225,  225,  225,
      225,  225,  225,  225,  825,  119,  119,  119,  119,  119,
      119,  119,  239,  239,  222,  269,  275,  826,  239,  119,
      277,  269,  269,  222,  331,  275,  225,  269,  384,  277,
      353,  828,  275,  331,  119,  356,  384,  356,  119,  119,
      356,  356,  229,  119,  374,  374,  359,  346,  466,  359,
      119,  359,  350,  350,  119,  353,  119,  376,  119,  465,
      119,  160,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  350,  477,  376,  472,  477,  350,  160,  472,  160,

      160,  160,  160,  829,  160,  160,  466,  160,  615,  160,
      233,  160,  615,  160,  160,  160,  160,  160,  160,  233,
      233,  233,  233,  233,  233,  233,  237,  511,  237,  830,
      511,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      603,  603,  831,  465,  240,  243,  240,  832,  233,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  243,  468,  243,
      347,  833,  243,  352,  352,  579,  624,  624,  834,  347,
      347,  347,  347,  347,  347,  347,  343,  503,  243,  837,
      243,  838,  352,  468,  243,  503,  839,  352,  840,  243,

      343,  343,  343,  343,  343,  343,  343,  841,  347,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  844,  579,  343,
      344,  452,  354,  506,  845,  506,  452,  354,  506,  506,
      452,  452,  849,  852,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  354,  622,  354,  855,  622,  857,  344,
      344,  344,  344,  344,  354,  471,  471,  582,  582,  506,
      628,  687,  687,  344,  628,  861,  687,  344,  344,  344,
      344,  344,  344,  348,  471,  863,  582,  864,  865,  471,
      866,  582,  348,  348,  348,  348,  348,  348,  348,  348,

      348,  867,  868,  869,  870,  872,  873,  348,  348,  348,
      348,  348,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  348,  874,  875,  876,  348,  348,  348,  348,  348,
      348,  355,  878,  355,  879,  880,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  464,  464,  469,  881,  469,
      464,  882,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  689,  689,  883,  884,  885,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  507,  507,  507,  507,  507,
      689,  886,  887,  507,  888,  689,  889,  890,  610,  507,
      610,  507,  507,  610,  507,  507,  578,  578,  891,  892,

      610,  578,  893,  894,  895,  896,  610,  610,  610,  464,
      898,  899,  900,  901,  900,  902,  903,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  580,  904,  580,  905,
      906,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  907,  909,
      910,  911,  915,  916,  917,  918,  919,  920,  921,  922,
      923,  924,  925,  927,  930,  931,  933,  934,  935,  936,
      937,  938,  939,  941,  942,  943,  922,  945,  946,  948,
      949,  950,  951,  952,  953,  955,  956,  957,  961,  962,

      963,  964,  967,  968,  969,  970,  972,  974,  975,  976,
      977,  978,  979,  980,  981,  983,  985,  986,  987,  988,
      989,  990,  991,  992,  994,  995,  996,  997,  998,  999,
     1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011,
     1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022,
     1023, 1024, 1025, 1029, 1031, 1032, 1033, 1034, 1038, 1039,
     1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051,
     1052, 1054, 1055, 1057, 1058, 1059, 1060, 1059, 1060, 1060,
     1061, 1062, 1063, 1064, 1065, 1066, 1069, 1070, 1071, 1072,
     1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084,

     1085, 1086, 1087, 1089, 1090, 1091, 1092, 1093, 1092, 1094,
     1095, 1094, 1096, 1097, 1098, 1099, 1101, 1103, 1104, 1105,
     1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115,
     1116, 1117, 1118, 1119, 1120, 1122, 1123, 1125, 1126, 1127,
     1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
     1138, 1139, 1141, 1142, 1143, 1144, 1146, 1148, 1149, 1150,
     1151, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1161, 1162,
     1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173,
     1175, 1176, 1177, 1180, 1183, 1184, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1195,  814, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,

     1195, 1195, 1195, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1197,  813,  812,  811,
     1197, 1197, 1197, 1197, 1197, 1198,  810, 1198,  809, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1199,  808,
     1199, 1199,  807, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1200,  806, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1202,  805, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,

     1204,  804, 1204, 1204, 1205,  803, 1205, 1205, 1206, 1206,
      802, 1206, 1207, 1207, 1207, 1208, 1208, 1208, 1209, 1209,
     1209, 1210,  801,  799, 1210, 1211,  798,  797, 1211, 1212,
      796,  795, 1212, 1213, 1213, 1213,  794, 1213, 1214,  793,
      791, 1214, 1215,  790,  789, 1215, 1216,  787,  785, 1216,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217,  784,  782,  780,  779,  777,  776,  775,
      774,  773,  772,  770,  769,  768,  766,  764,  763,  760,
      759,  758,  757,  756,  755,  754,  753,  752,  751,  748,
      747,  745,  744,  743,  742,  741,  739,  738,  737,  736,

      735,  734,  733,  732,  731,  727,  726,  725,  724,  723,
      722,  721,  720,  719,  718,  717,  716,  715,  714,  713,
      712,  711,  710,  709,  708,  706,  705,  704,  702,  701,
      700,  699,  698,  697,  694,  693,  691,  690,  685,  684,
      683,  682,  680,  678,  677,  676,  673,  669,  668,  666,
      665,  664,  662,  661,  660,  656,  653,  652,  651,  648,
      647,  646,  644,  643,  642,  641,  640,  639,  638,  637,
      636,  635,  634,  633,  632,  631,  630,  629,  627,  626,
      625,  623,  621,  620,  619,  617,  616,  614,  613,  612,
      611,  609,  608,  607,  606,  605,  604,  602,  601,  600,

      599,  598,  597,  596,  595,  594,  593,  592,  591,  590,
      589,  588,  587,  586,  585,  584,  583,  577,  575,  574,
      573,  571,  569,  568,  567,  566,  564,  563,  562,  561,
      560,  559,  558,  556,  555,  554,  553,  552,  551,  549,
      548,  547,  546,  545,  544,  543,  541,  540,  539,  538,
      537,  536,  535,  528,  527,  526,  525,  524,  523,  521,
      520,  519,  518,  516,  515,  514,  513,  512,  510,  509,
      508,  505,  504,  502,  501,  500,  499,  498,  497,  496,
      495,  494,  493,  492,  491,  490,  489,  488,  487,  486,
      484,  483,  482,  481,  480,  479,  478,  476,  474,  473,

      461,  460,  459,  458,  456,  455,  454,  453,  451,  450,
      448,  447,  446,  445,  444,  443,  442,  441,  440,  439,
      438,  437,  436,  435,  434,  433,  432,  431,  430,  428,
      426,  425,  424,  423,  420,  419,  418,  417,  416,  415,
      414,  413,  411,  409,  407,  406,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      389,  388,  387,  386,  385,  383,  382,  381,  380,  379,
      378,  377,  375,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  358,  357,  342,
      341,  340,  339,  338,  337,  336,  335,  334,  333,  330,

      329,  328,  327,  326,  325,  324,  323,  322,  321,  320,
      319,  318,  317,  316,  315,  314,  313,  311,  310,  309,
      307,  306,  305,  303,  302,  301,  300,  299,  298,  297,
      296,  295,  293,  292,  291,  290,  289,  288,  287,  285,
      283,  282,  281,  280,  279,  278,  276,  273,  271,  270,
      268,  266,  265,  262,  261,  260,  259,  257,  256,  255,
      254,  250,  249,  246,  245,  227,  224,  223,  210,  209,
      208,  206,  205,  203,  202,  200,  199,  196,  194,  192,
      191,  189,  188,  187,  186,  183,  182,  181,  180,  178,
      177,  176,  173,  172,  170,  169,  168,  167,  166,  165,

      164,  163,  162,  161,  159,  157,  156,  155,  154,  152,
      150,  148,  144,  127,  125,  110,  107,   79,   78,   71,
       65,   61,   60,   58,   50,   44,   41,   33,   30,   28,
       24,   19,   10,    9,    6,    5, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yycpp_flex_debug;
int yycpp_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yycpptext;
#line 1 "scanner.l"
#line 4 "scanner.l"

/*************** Includes and Defines *****************************/

#ifdef _WIN32
#define YY_NO_UNISTD_H
static int isatty(int) { return 0; }
#endif

#include <expr.h>
#include <arith_tools.h>
#include <config.h>

#include <ansi-c/c_types.h>
#include <ansi-c/preprocessor_line.h>

#include <ansi-c/literals/convert_float_literal.h>
#include <ansi-c/literals/convert_integer_literal.h>
#include <ansi-c/literals/unescape_string.h>
#include <ansi-c/literals/convert_character_literal.h>
#include <ansi-c/literals/convert_string_literal.h>

#define PARSER cpp_parser
#define YYSTYPE unsigned
#undef  ECHO
#define ECHO

#include "cpp_parser.h"
#include "tokens.h"

void set_line_no();
int yycpperror(const std::string &error);









#line 48 "scanner.l"
void cpp_scanner_init()
{
  YY_FLUSH_BUFFER;
  BEGIN(0); // this is INITIAL, hopefully
}
#line 1363 "lex.yy.cpp"

#define INITIAL 0
#define COMMENT1 1
#define COMMENT2 2
#define GCC_ATTRIBUTE 3
#define ASM_BLOCK 4
#define MSC_ASM 5
#define MSC_DECLSPEC 6
#define MSC_PRAGMA 7
#define MSC_ANNOTATION 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yycpplex_destroy (void );

int yycppget_debug (void );

void yycppset_debug (int debug_flag  );

YY_EXTRA_TYPE yycppget_extra (void );

void yycppset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yycppget_in (void );

void yycppset_in  (FILE * in_str  );

FILE *yycppget_out (void );

void yycppset_out  (FILE * out_str  );

int yycppget_leng (void );

char *yycppget_text (void );

int yycppget_lineno (void );

void yycppset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yycppwrap (void );
#else
extern int yycppwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yycpptext, yycppleng, 1, yycppout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yycppin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yycppin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yycppin))==0 && ferror(yycppin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yycppin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yycpplex (void);

#define YY_DECL int yycpplex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yycpptext and yycppleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 110 "scanner.l"



#define loc() (PARSER.current_token().text=yycpptext,PARSER.set_location())
#define MSC_Keyword(x) (PARSER.mode==cpp_parsert::MSC?x:TOK_IDENTIFIER)


#line 1559 "lex.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yycppin )
			yycppin = stdin;

		if ( ! yycppout )
			yycppout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yycppensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yycpp_create_buffer(yycppin,YY_BUF_SIZE );
		}

		yycpp_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yycpptext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1187 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1937 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 117 "scanner.l"
{ BEGIN(COMMENT1); }	/* begin C comment state */
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 120 "scanner.l"
{ BEGIN(INITIAL); }	/* end comment state, back to INITIAL */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "scanner.l"
{ yycpperror("Probably nested comments"); }
	YY_BREAK
case YY_STATE_EOF(COMMENT1):
#line 122 "scanner.l"
{ yycpperror("Unterminated comment"); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 123 "scanner.l"
{ /* ignore every char except '*' and NL (performance!) */ }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 124 "scanner.l"
{ } /* all single characters within comments are ignored */
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 125 "scanner.l"
{ } 
	YY_BREAK

case 7:
YY_RULE_SETUP
#line 128 "scanner.l"
{ BEGIN(COMMENT2); }	/* begin C++ comment state */
	YY_BREAK

case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 131 "scanner.l"
{ BEGIN(INITIAL); }	/* end comment state, back to INITIAL */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 132 "scanner.l"
{ } /* all characters within comments are ignored */
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 136 "scanner.l"
{ PARSER.parenthesis_counter--;
         if(PARSER.parenthesis_counter==0)
         BEGIN(INITIAL); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 139 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 140 "scanner.l"
{ /* Throw away */ }
	YY_BREAK

case 13:
YY_RULE_SETUP
#line 143 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 144 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 145 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 146 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 147 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 148 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 149 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 150 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 151 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 152 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 153 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 155 "scanner.l"
{ BEGIN(MSC_PRAGMA); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 157 "scanner.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 158 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 160 "scanner.l"
{ BEGIN(ASM_BLOCK); loc(); return '{'; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 161 "scanner.l"
{ loc();
                    PARSER.current_token().data=exprt(yycpptext);
                    BEGIN(INITIAL);
                    return TOK_ASM_STRING; }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 166 "scanner.l"
{ loc();
                  PARSER.current_token().data=exprt(yycpptext);
                  return TOK_ASM_STRING; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 169 "scanner.l"
{ PARSER.asm_block_following=false;
                  BEGIN(INITIAL); loc(); return '}'; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 172 "scanner.l"
{ PARSER.parenthesis_counter--;
                        if(PARSER.parenthesis_counter==0)
                          BEGIN(INITIAL); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 175 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 176 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 178 "scanner.l"
{ PARSER.parenthesis_counter--;
                        if(PARSER.parenthesis_counter==0)
                          BEGIN(INITIAL); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 181 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 182 "scanner.l"
{ /* Throw away */ }
	YY_BREAK

case 37:
YY_RULE_SETUP
#line 185 "scanner.l"

	YY_BREAK
case 38:
YY_RULE_SETUP
#line 186 "scanner.l"

	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 187 "scanner.l"

	YY_BREAK
case 40:
YY_RULE_SETUP
#line 189 "scanner.l"
{ loc(); return TOK_ALIGNOF; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 191 "scanner.l"
{ if(PARSER.mode==cpp_parsert::MSC)
                  {
                    loc();
                    BEGIN(MSC_ASM);
                    return TOK_MSC_ASM;
                  }
                  else
                  {
                    loc();
                    PARSER.asm_block_following=true;
                    return TOK_GCC_ASM;
                  }
                }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 205 "scanner.l"
{ if(PARSER.mode==cpp_parsert::GCC ||
                     PARSER.mode==cpp_parsert::CW)
                  {
                    loc();
                    PARSER.asm_block_following=true;
                    return TOK_GCC_ASM;
                  }
                  else
                  {
                    loc();
                    return TOK_IDENTIFIER;
                  }
                }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 219 "scanner.l"
{ if(PARSER.mode==cpp_parsert::GCC ||
                     PARSER.mode==cpp_parsert::CW ||
                     PARSER.mode==cpp_parsert::ARM)
                  {
                    loc();
                    PARSER.asm_block_following=true;
                    return TOK_GCC_ASM;
                  }
                  else
                  {
                    loc();
                    return TOK_IDENTIFIER;
                  }
                }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 234 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 235 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 236 "scanner.l"
{ loc(); return MSC_Keyword(TOK_CDECL); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 237 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 238 "scanner.l"
{ BEGIN(MSC_DECLSPEC); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 239 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 240 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_IF_EXISTS); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 241 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_IF_NOT_EXISTS); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 242 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 243 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 244 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 245 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INTERFACE); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 246 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INLINE); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 247 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 248 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 249 "scanner.l"
{ /* ignroe */ }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 250 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 251 "scanner.l"
{ loc(); return MSC_Keyword(TOK_STDCALL); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 252 "scanner.l"
{ loc(); return MSC_Keyword(TOK_FASTCALL); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 253 "scanner.l"
{ loc(); return MSC_Keyword(TOK_CLRCALL); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 254 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 255 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 256 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 257 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 258 "scanner.l"
{ loc(); return TOK_ALIGNOF; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 259 "scanner.l"
{ loc(); return TOK_TYPEOF; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 260 "scanner.l"
{ loc(); return TOK_TYPEOF; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 261 "scanner.l"
{ loc(); return TOK_TYPEOF; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 262 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INT8); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 263 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INT16); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 264 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INT32); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 265 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INT64); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 266 "scanner.l"
{ loc(); return MSC_Keyword(TOK_PTR32); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 267 "scanner.l"
{ loc(); return MSC_Keyword(TOK_PTR64); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 268 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 269 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 270 "scanner.l"
{ loc(); return TOK_COMPLEX; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 271 "scanner.l"
{ loc(); return TOK_COMPLEX; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 272 "scanner.l"
{ loc(); return TOK_REAL; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 273 "scanner.l"
{ loc(); return TOK_IMAG; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 274 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TRY); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 275 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_EXCEPT); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 276 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_LEAVE); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 277 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_FINALLY); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 278 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UUIDOF); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 279 "scanner.l"
{ loc(); return TOK_AUTO; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 280 "scanner.l"
{ loc(); return TOK_BOOL; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 281 "scanner.l"
{ loc(); return TOK_BREAK; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 282 "scanner.l"
{ loc(); return TOK_CASE; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 283 "scanner.l"
{ loc(); return TOK_CATCH; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 284 "scanner.l"
{ loc(); return TOK_CHAR; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 285 "scanner.l"
{ loc(); return TOK_CLASS; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 286 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 287 "scanner.l"
{ loc(); return TOK_CONTINUE; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 288 "scanner.l"
{ loc(); return TOK_DEFAULT; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 289 "scanner.l"
{ loc(); return TOK_DELETE; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 290 "scanner.l"
{ loc(); return TOK_DECLTYPE; } // C++11
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 291 "scanner.l"
{ loc(); return TOK_DECLTYPE; } // gcc
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 292 "scanner.l"
{ loc(); return TOK_DO; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 293 "scanner.l"
{ loc(); return TOK_DOUBLE; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 294 "scanner.l"
{ loc(); return TOK_ELSE; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 295 "scanner.l"
{ loc(); return TOK_ENUM; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 296 "scanner.l"
{ loc(); return TOK_EXPLICIT; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 297 "scanner.l"
{ loc(); return TOK_EXTERN; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 298 "scanner.l"
{ loc(); return TOK_FLOAT; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 299 "scanner.l"
{ loc(); return TOK_FOR; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 300 "scanner.l"
{ loc(); return TOK_FRIEND; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 301 "scanner.l"
{ loc(); return TOK_GOTO; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 302 "scanner.l"
{ loc(); return TOK_IF; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 303 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 304 "scanner.l"
{ loc(); return TOK_INT; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 305 "scanner.l"
{ loc(); return TOK_LONG; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 306 "scanner.l"
{ loc(); return TOK_MUTABLE; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 307 "scanner.l"
{ loc(); return TOK_NAMESPACE; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 308 "scanner.l"
{ loc(); return TOK_NEW; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 309 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 310 "scanner.l"
{ loc(); return TOK_OPERATOR; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 311 "scanner.l"
{ loc(); return TOK_PRIVATE; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 312 "scanner.l"
{ loc(); return TOK_PROTECTED; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 313 "scanner.l"
{ loc(); return TOK_PUBLIC; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 314 "scanner.l"
{ loc(); return TOK_REGISTER; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 315 "scanner.l"
{ loc(); return TOK_RETURN; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 316 "scanner.l"
{ loc(); return TOK_SHORT; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 317 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 318 "scanner.l"
{ loc(); return TOK_SIZEOF; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 319 "scanner.l"
{ loc(); return TOK_STATIC; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 320 "scanner.l"
{ loc(); return TOK_STATIC_ASSERT; } // C++11
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 321 "scanner.l"
{ loc(); return TOK_STRUCT; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 322 "scanner.l"
{ loc(); return TOK_SWITCH; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 323 "scanner.l"
{ loc(); return TOK_TEMPLATE; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 324 "scanner.l"
{ loc(); return TOK_THIS; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 325 "scanner.l"
{ loc(); return TOK_THREAD_LOCAL; } // C++11
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 326 "scanner.l"
{ loc(); return TOK_THROW; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 327 "scanner.l"
{ loc(); return TOK_TRY; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 328 "scanner.l"
{ loc(); return TOK_TYPEDEF; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 329 "scanner.l"
{ loc(); return TOK_TYPEID; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 330 "scanner.l"
{ loc(); return TOK_TYPENAME; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 331 "scanner.l"
{ loc(); return TOK_UNION; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 332 "scanner.l"
{ loc(); return TOK_UNSIGNED; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 333 "scanner.l"
{ loc(); return TOK_USING; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 334 "scanner.l"
{ loc(); return TOK_VIRTUAL; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 335 "scanner.l"
{ loc(); return TOK_VOID; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 336 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 337 "scanner.l"
{ // CodeWarrior has an option to
                      // enable/disable wchar_t
                      loc();
                      if(PARSER.mode==cpp_parsert::CW &&
                         !PARSER.recognize_wchar_t)
                        return TOK_IDENTIFIER;
                      else
                        return TOK_WCHAR_T;
                    }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 346 "scanner.l"
{ loc();
                      if(PARSER.mode==cpp_parsert::GCC)
                        return TOK_GCC_FLOAT128;
                      else
                        return TOK_IDENTIFIER;
                    }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 352 "scanner.l"
{ loc();
                      if(PARSER.mode==cpp_parsert::GCC)
                        return TOK_GCC_INT128;
                      else
                        return TOK_IDENTIFIER;
                    }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 358 "scanner.l"
{ loc(); return TOK_WHILE; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 359 "scanner.l"
{ loc(); return TOK_THREAD_LOCAL; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 360 "scanner.l"
{ loc(); return TOK_CPROVER_BOOL; }
	YY_BREAK

/* a huge batch of MS extensions
   http://msdn.microsoft.com/en-us/library/ms177194(v=vs.80).aspx */

case 153:
YY_RULE_SETUP
#line 367 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 368 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 369 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 370 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 371 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 372 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 373 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 374 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 375 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 376 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 377 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 378 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 379 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 380 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_BINARY_TYPE_PREDICATE); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 381 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 382 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_BINARY_TYPE_PREDICATE); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 383 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 384 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 385 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 386 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 387 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 388 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 389 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 390 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 391 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 392 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 393 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 394 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 396 "scanner.l"
{ loc(); return TOK_ANDAND; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 397 "scanner.l"
{ loc(); return '&'; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 398 "scanner.l"
{ loc(); return TOK_ANDASSIGN; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 399 "scanner.l"
{ loc(); return TOK_OROR; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 400 "scanner.l"
{ loc(); return '|'; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 401 "scanner.l"
{ loc(); return TOK_ORASSIGN; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 402 "scanner.l"
{ loc(); return '^'; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 403 "scanner.l"
{ loc(); return TOK_XORASSIGN; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 404 "scanner.l"
{ loc(); return '!'; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 405 "scanner.l"
{ loc(); return TOK_NE; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 406 "scanner.l"
{ loc(); return '~'; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 408 "scanner.l"
{ loc();
                      return TOK_IDENTIFIER; // or TYPDEFname
                    }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 412 "scanner.l"
{ loc();
                      PARSER.current_token().data=convert_integer_literal(yycpptext);
                      return TOK_INTEGER;
                    }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 417 "scanner.l"
{ loc();
                      PARSER.current_token().data=convert_integer_literal(yycpptext);
                      return TOK_INTEGER;
                    }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 422 "scanner.l"
{ loc();
                      PARSER.current_token().data=convert_integer_literal(yycpptext);
                      return TOK_INTEGER;
                    }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 427 "scanner.l"
{
                      loc();
                      PARSER.current_token().data=convert_float_literal(yycpptext);
                      return TOK_FLOATING;
                    }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 433 "scanner.l"
{ 
                      loc();
                      PARSER.current_token().data=convert_character_literal(yycpptext, false);
                      return TOK_CHARACTER;
                    }
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 439 "scanner.l"
{
                      loc();
                      PARSER.current_token().data=convert_string_literal(yycpptext);
                      return TOK_STRING;
                    }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 445 "scanner.l"
{ loc(); return yycpptext[0]; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 446 "scanner.l"
{ loc(); return yycpptext[0]; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 447 "scanner.l"
{ loc(); return yycpptext[0]; }
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 449 "scanner.l"
{ set_line_no(); }
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 450 "scanner.l"
{ /* ignore it */ }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 452 "scanner.l"

	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 454 "scanner.l"
{ yycpperror("unknown preprocessor directive"); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 456 "scanner.l"
{ }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 458 "scanner.l"
{ loc(); return '}'; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 459 "scanner.l"
{ loc(); return '['; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 460 "scanner.l"
{ loc(); return ']'; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 461 "scanner.l"
{ loc(); return '.'; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 462 "scanner.l"
{ loc(); return '&'; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 463 "scanner.l"
{ loc(); return '*'; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 464 "scanner.l"
{ loc(); return '+'; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 465 "scanner.l"
{ loc(); return '-'; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 466 "scanner.l"
{ loc(); return '~'; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 467 "scanner.l"
{ loc(); return '!'; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 468 "scanner.l"
{ loc(); return '/'; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 469 "scanner.l"
{ loc(); return '%'; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 470 "scanner.l"
{ loc(); return '<'; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 471 "scanner.l"
{ loc(); return '>'; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 472 "scanner.l"
{ loc(); return '^'; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 473 "scanner.l"
{ loc(); return '|'; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 474 "scanner.l"
{ loc(); return '?'; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 475 "scanner.l"
{ loc(); return ':'; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 476 "scanner.l"
{ loc(); return '='; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 478 "scanner.l"
{ 
                      if(PARSER.asm_block_following) { BEGIN(ASM_BLOCK); }
                      loc();
                      return '{';
                    }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 484 "scanner.l"
{ PARSER.asm_block_following=false;
                      loc();
                      return ';';
                    }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 489 "scanner.l"
{ loc(); return TOK_DOTPM; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 490 "scanner.l"
{ loc(); return TOK_ARROWPM; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 491 "scanner.l"
{ loc(); return TOK_SCOPE; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 492 "scanner.l"
{ loc(); return TOK_ARROW; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 493 "scanner.l"
{ loc(); return TOK_INCR; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 494 "scanner.l"
{ loc(); return TOK_DECR; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 495 "scanner.l"
{ loc(); return TOK_SHIFTLEFT; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 496 "scanner.l"
{ loc(); return TOK_SHIFTRIGHT; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 497 "scanner.l"
{ loc(); return TOK_LE; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 498 "scanner.l"
{ loc(); return TOK_GE; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 499 "scanner.l"
{ loc(); return TOK_EQ; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 500 "scanner.l"
{ loc(); return TOK_NE; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 501 "scanner.l"
{ loc(); return TOK_ANDAND; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 502 "scanner.l"
{ loc(); return TOK_OROR; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 503 "scanner.l"
{ loc(); return TOK_MULTASSIGN; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 504 "scanner.l"
{ loc(); return TOK_DIVASSIGN; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 505 "scanner.l"
{ loc(); return TOK_MODASSIGN; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 506 "scanner.l"
{ loc(); return TOK_PLUSASSIGN; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 507 "scanner.l"
{ loc(); return TOK_MINUSASSIGN; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 508 "scanner.l"
{ loc(); return TOK_SHLASSIGN; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 509 "scanner.l"
{ loc(); return TOK_SHRASSIGN; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 510 "scanner.l"
{ loc(); return TOK_ANDASSIGN; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 511 "scanner.l"
{ loc(); return TOK_XORASSIGN; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 512 "scanner.l"
{ loc(); return TOK_ORASSIGN; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 513 "scanner.l"
{ loc(); return TOK_ELLIPSIS; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 515 "scanner.l"
{ yycpperror("unknown character"); }
	YY_BREAK

case 254:
YY_RULE_SETUP
#line 518 "scanner.l"
ECHO;
	YY_BREAK
#line 3033 "lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT2):
case YY_STATE_EOF(GCC_ATTRIBUTE):
case YY_STATE_EOF(ASM_BLOCK):
case YY_STATE_EOF(MSC_ASM):
case YY_STATE_EOF(MSC_DECLSPEC):
case YY_STATE_EOF(MSC_PRAGMA):
case YY_STATE_EOF(MSC_ANNOTATION):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yycppin at a new source and called
			 * yycpplex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yycppin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yycppwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yycpptext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yycpplex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yycpprealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yycpprestart(yycppin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yycpprealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1187 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1187 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1186);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yycpprestart(yycppin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yycppwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yycpptext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yycpprestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yycppensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yycpp_create_buffer(yycppin,YY_BUF_SIZE );
	}

	yycpp_init_buffer(YY_CURRENT_BUFFER,input_file );
	yycpp_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yycpp_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yycpppop_buffer_state();
	 *		yycpppush_buffer_state(new_buffer);
     */
	yycppensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yycpp_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yycppwrap()) processing, but the only time this flag
	 * is looked at is after yycppwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yycpp_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yycppin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yycpp_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yycppalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yycpp_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yycppalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yycpp_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yycpp_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yycpp_create_buffer()
 * 
 */
    void yycpp_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yycppfree((void *) b->yy_ch_buf  );

	yycppfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yycpprestart() or at EOF.
 */
    static void yycpp_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yycpp_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yycpp_init_buffer was _probably_
     * called from yycpprestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yycpp_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yycpp_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yycpppush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yycppensure_buffer_stack();

	/* This block is copied from yycpp_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yycpp_switch_to_buffer. */
	yycpp_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yycpppop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yycpp_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yycpp_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yycppensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yycppalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yycppensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yycpprealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yycppensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yycpp_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yycppalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yycpp_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yycpp_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yycpplex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yycpp_scan_bytes() instead.
 */
YY_BUFFER_STATE yycpp_scan_string (yyconst char * yystr )
{
    
	return yycpp_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yycpplex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yycpp_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yycppalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yycpp_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yycpp_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yycpp_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yycpptext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yycpptext[yycppleng] = (yy_hold_char); \
		(yy_c_buf_p) = yycpptext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yycppleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yycppget_lineno  (void)
{
        
    return yycpplineno;
}

/** Get the input stream.
 * 
 */
FILE *yycppget_in  (void)
{
        return yycppin;
}

/** Get the output stream.
 * 
 */
FILE *yycppget_out  (void)
{
        return yycppout;
}

/** Get the length of the current token.
 * 
 */
int yycppget_leng  (void)
{
        return yycppleng;
}

/** Get the current token.
 * 
 */

char *yycppget_text  (void)
{
        return yycpptext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yycppset_lineno (int  line_number )
{
    
    yycpplineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yycpp_switch_to_buffer
 */
void yycppset_in (FILE *  in_str )
{
        yycppin = in_str ;
}

void yycppset_out (FILE *  out_str )
{
        yycppout = out_str ;
}

int yycppget_debug  (void)
{
        return yycpp_flex_debug;
}

void yycppset_debug (int  bdebug )
{
        yycpp_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yycpplex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yycppin = stdin;
    yycppout = stdout;
#else
    yycppin = (FILE *) 0;
    yycppout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yycpplex_init()
     */
    return 0;
}

/* yycpplex_destroy is for both reentrant and non-reentrant scanners. */
int yycpplex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yycpp_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yycpppop_buffer_state();
	}

	/* Destroy the stack itself. */
	yycppfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yycpplex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yycppalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yycpprealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yycppfree (void * ptr )
{
	free( (char *) ptr );	/* see yycpprealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 518 "scanner.l"



int yycppwrap() { return 1; }

void set_line_no()
{
  preprocessor_line(yycpptext, PARSER.line_no, PARSER.filename);
}

int yycpperror(const std::string &error)
{
  cpp_parser.parse_error(error, yycpptext);
  return error.size()+1;
}

