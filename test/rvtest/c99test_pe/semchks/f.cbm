f.rv.c
Adding CPROVER library
First symex 1
First symex 2
Modified: unitrv::$return_value
Global input: c::__CPROVER_dead_object
Harness:
        // 0 no location
        $return_value=chk0_f(n$argument_input);
        // 1 file harness-save-outputs
        $return_value$f1_output = $return_value;
        // 2 no location
        $return_value=chk1_f(n$argument_input);
        // 3 file harness-assertions
        ASSERT $return_value$f1_output == $return_value
        // 4 no location
        END_FUNCTION
Symex on harness

Thread 0
LOCATION
Guard: TRUE
--------------
Thread 0
FUNCTION_CALL
Guard: TRUE
--------------
Thread 0
ASSIGNMENT (STATE)
n!0@1#1 == n$argument_input!0#0
Guard: TRUE
--------------
Thread 0 file f.rv.c line 29 function chk0_f
DECL
rvretval!0@1#1
Guard: TRUE
--------------
Thread 0 file f.rv.c line 29 function chk0_f
ASSIGNMENT (STATE)
rvretval!0@1#2 == 0
Guard: TRUE
--------------
Thread 0 file f.rv.c line 31 function chk0_f
DECL
return_value_rvs0_checkInput$1!0@1#1
Guard: TRUE
--------------
Thread 0 file f.rv.c line 31 function chk0_f
LOCATION
Guard: TRUE
--------------
Thread 0 file f.rv.c line 31 function chk0_f
FUNCTION_CALL
Guard: TRUE
--------------
Thread 0 file f.rv.c line 31 function chk0_f
ASSIGNMENT (STATE)
n!0@1#1 == n!0@1#1
Guard: TRUE
--------------
Thread 0 file f.rv.c line 136 function rvs0_checkInput
DECL
retval!0@1#1
Guard: TRUE
--------------
Thread 0 file f.rv.c line 142 function rvs0_checkInput
ASSIGNMENT (STATE)
retval!0@1#2 == __CPROVER_uninterpreted_1_retval(n!0@1#1)
Guard: TRUE
--------------
Thread 0 file f.rv.c line 144 function rvs0_checkInput
LOCATION
Guard: TRUE
--------------
Thread 0 file f.rv.c line 144 function rvs0_checkInput
ASSIGNMENT (STATE)
return_value_rvs0_checkInput$1!0@1#2 == retval!0@1#2
Guard: TRUE
--------------
Thread 0 file f.rv.c line 145 function rvs0_checkInput
ASSIGNMENT (PHI)
retval!0@1#4 == retval!0@1#2
Guard: TRUE
--------------
Thread 0 file f.rv.c line 145 function rvs0_checkInput
FUNCTION_RETURN
Guard: TRUE
--------------
Thread 0 file f.rv.c line 31 function chk0_f
LOCATION
Guard: TRUE
--------------
Thread 0 file f.rv.c line 33 function chk0_f
ASSIGNMENT (GUARD)
\guard#1 == !(return_value_rvs0_checkInput$1!0@1#2 == 0)
Guard: TRUE
--------------
Thread 0 file f.rv.c line 33 function chk0_f
LOCATION
Guard: \guard#1
--------------
Thread 0 file f.rv.c line 33 function chk0_f
SHARED WRITE
$return_value#1
Guard: \guard#1
--------------
Thread 0 file f.rv.c line 33 function chk0_f
ASSIGNMENT (STATE)
$return_value#1 == 0
Guard: \guard#1
--------------
Thread 0 file f.rv.c line 36 function chk0_f
ASSIGNMENT (PHI)
$return_value#2 == $return_value#0
Guard: TRUE
--------------
Thread 0 file f.rv.c line 36 function chk0_f
DECL
i!0@1#1
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 37 function chk0_f
DECL
sum!0@1#1
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 37 function chk0_f
ASSIGNMENT (STATE)
sum!0@1#2 == 0
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 39 function chk0_f
ASSIGNMENT (STATE)
i!0@1#2 == 1
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 40 function chk0_f
LOCATION
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 40 function chk0_f
FUNCTION_CALL
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 40 function chk0_f
ASSIGNMENT (STATE)
n!0@1#1 == n!0@1#1
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 40 function chk0_f
ASSIGNMENT (STATE)
rvp_i!0@1#1 == &i!0@1
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 40 function chk0_f
ASSIGNMENT (STATE)
rvp_sum!0@1#1 == &sum!0@1
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 40 function chk0_f
ASSIGNMENT (STATE)
rvp_rvretval!0@1#1 == &rvretval!0@1
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 81 function rvs0_Loop_f_for1
DECL
retval!0@1#1
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 84 function rvs0_Loop_f_for1
DECL
rv_D0_0!0@1#1
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 85 function rvs0_Loop_f_for1
DECL
rv_D1_0!0@1#1
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 88 function rvs0_Loop_f_for1
LOCATION
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 91 function rvs0_Loop_f_for1
LOCATION
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 96 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_deallocated#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 96 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_dead_object#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 96 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(__CPROVER_malloc_size#0 < 4) || !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_malloc_object#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 96 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_deallocated#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 96 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_dead_object#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 96 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(__CPROVER_malloc_size#0 < 4) || !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_malloc_object#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 96 function rvs0_Loop_f_for1
ASSIGNMENT (STATE)
i!0@1#3 == __CPROVER_uninterpreted_rvp_i(n!0@1#1, 1, 0)
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 97 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_deallocated#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 97 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_dead_object#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 97 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(__CPROVER_malloc_size#0 < 4) || !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_malloc_object#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 97 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_deallocated#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 97 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_dead_object#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 97 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(__CPROVER_malloc_size#0 < 4) || !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_malloc_object#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 97 function rvs0_Loop_f_for1
ASSIGNMENT (STATE)
sum!0@1#3 == __CPROVER_uninterpreted_rvp_sum(n!0@1#1, i!0@1#3, 0)
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 98 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_deallocated#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 98 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_dead_object#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 98 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(__CPROVER_malloc_size#0 < 4) || !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_malloc_object#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 98 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_deallocated#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 98 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_dead_object#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 98 function rvs0_Loop_f_for1
ASSUME
!\guard#1 ==> !(__CPROVER_malloc_size#0 < 4) || !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_malloc_object#0))
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 98 function rvs0_Loop_f_for1
ASSIGNMENT (STATE)
retval!0@1#2 == __CPROVER_uninterpreted_retval(n!0@1#1, i!0@1#3, sum!0@1#3)
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 100 function rvs0_Loop_f_for1
LOCATION
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 101 function rvs0_Loop_f_for1
ASSIGNMENT (PHI)
retval!0@1#4 == retval!0@1#2
Guard: TRUE
--------------
Thread 0 file f.rv.c line 101 function rvs0_Loop_f_for1
ASSIGNMENT (PHI)
rv_D0_0!0@1#3 == rv_D0_0!0@1#1
Guard: TRUE
--------------
Thread 0 file f.rv.c line 101 function rvs0_Loop_f_for1
ASSIGNMENT (PHI)
rv_D1_0!0@1#3 == rv_D1_0!0@1#1
Guard: TRUE
--------------
Thread 0 file f.rv.c line 101 function rvs0_Loop_f_for1
FUNCTION_RETURN
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 43 function chk0_f
LOCATION
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 43 function chk0_f
SHARED WRITE
$return_value#3
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 43 function chk0_f
ASSIGNMENT (STATE)
$return_value#3 == sum!0@1#3
Guard: !\guard#1
--------------
Thread 0 file f.rv.c line 44 function chk0_f
ASSIGNMENT (PHI)
rvretval!0@1#4 == 0
Guard: TRUE
--------------
Thread 0 file f.rv.c line 44 function chk0_f
ASSIGNMENT (PHI)
i!0@1#5 == i!0@1#3
Guard: TRUE
--------------
Thread 0 file f.rv.c line 44 function chk0_f
ASSIGNMENT (PHI)
sum!0@1#5 == sum!0@1#3
Guard: TRUE
--------------
Thread 0 file f.rv.c line 44 function chk0_f
ASSIGNMENT (PHI)
return_value_rvs0_checkInput$1!0@1#4 == return_value_rvs0_checkInput$1!0@1#2
Guard: TRUE
--------------
Thread 0 file f.rv.c line 44 function chk0_f
ASSIGNMENT (PHI)
$return_value#4 == (\guard#1 ? 0 : $return_value#3)
Guard: TRUE
--------------
Thread 0 file f.rv.c line 44 function chk0_f
ASSIGNMENT (PHI)
rvretval!0@1#5 == 0
Guard: TRUE
--------------
Thread 0 file f.rv.c line 44 function chk0_f
ASSIGNMENT (PHI)
i!0@1#6 == (\guard#1 ? i!0@1#0 : i!0@1#5)
Guard: TRUE
--------------
Thread 0 file f.rv.c line 44 function chk0_f
ASSIGNMENT (PHI)
sum!0@1#6 == (\guard#1 ? sum!0@1#0 : sum!0@1#5)
Guard: TRUE
--------------
Thread 0 file f.rv.c line 44 function chk0_f
ASSIGNMENT (PHI)
return_value_rvs0_checkInput$1!0@1#5 == (\guard#1 ? return_value_rvs0_checkInput$1!0@1#2 : return_value_rvs0_checkInput$1!0@1#4)
Guard: TRUE
--------------
Thread 0 file f.rv.c line 44 function chk0_f
FUNCTION_RETURN
Guard: TRUE
--------------
Thread 0 file harness-save-outputs
SHARED WRITE
$return_value$f1_output#1
Guard: TRUE
--------------
Thread 0 file harness-save-outputs
ASSIGNMENT (STATE)
$return_value$f1_output#1 == $return_value#4
Guard: TRUE
--------------
Thread 0
LOCATION
Guard: TRUE
--------------
Thread 0
FUNCTION_CALL
Guard: TRUE
--------------
Thread 0
ASSIGNMENT (STATE)
n!0@1#1 == n$argument_input!0#0
Guard: TRUE
--------------
Thread 0 file f.rv.c line 50 function chk1_f
DECL
rvretval!0@1#1
Guard: TRUE
--------------
Thread 0 file f.rv.c line 50 function chk1_f
ASSIGNMENT (STATE)
rvretval!0@1#2 == 0
Guard: TRUE
--------------
Thread 0 file f.rv.c line 52 function chk1_f
DECL
return_value_rvs1_checkInput$1!0@1#1
Guard: TRUE
--------------
Thread 0 file f.rv.c line 52 function chk1_f
LOCATION
Guard: TRUE
--------------
Thread 0 file f.rv.c line 52 function chk1_f
FUNCTION_CALL
Guard: TRUE
--------------
Thread 0 file f.rv.c line 52 function chk1_f
ASSIGNMENT (STATE)
n!0@1#1 == n!0@1#1
Guard: TRUE
--------------
Thread 0 file f.rv.c line 151 function rvs1_checkInput
DECL
retval!0@1#1
Guard: TRUE
--------------
Thread 0 file f.rv.c line 157 function rvs1_checkInput
ASSIGNMENT (STATE)
retval!0@1#2 == __CPROVER_uninterpreted_1_retval(n!0@1#1)
Guard: TRUE
--------------
Thread 0 file f.rv.c line 159 function rvs1_checkInput
LOCATION
Guard: TRUE
--------------
Thread 0 file f.rv.c line 159 function rvs1_checkInput
ASSIGNMENT (STATE)
return_value_rvs1_checkInput$1!0@1#2 == retval!0@1#2
Guard: TRUE
--------------
Thread 0 file f.rv.c line 160 function rvs1_checkInput
ASSIGNMENT (PHI)
retval!0@1#4 == retval!0@1#2
Guard: TRUE
--------------
Thread 0 file f.rv.c line 160 function rvs1_checkInput
FUNCTION_RETURN
Guard: TRUE
--------------
Thread 0 file f.rv.c line 52 function chk1_f
LOCATION
Guard: TRUE
--------------
Thread 0 file f.rv.c line 54 function chk1_f
ASSIGNMENT (GUARD)
\guard#2 == !(return_value_rvs1_checkInput$1!0@1#2 == 0)
Guard: TRUE
--------------
Thread 0 file f.rv.c line 54 function chk1_f
LOCATION
Guard: \guard#2
--------------
Thread 0 file f.rv.c line 54 function chk1_f
SHARED WRITE
$return_value#5
Guard: \guard#2
--------------
Thread 0 file f.rv.c line 54 function chk1_f
ASSIGNMENT (STATE)
$return_value#5 == 0
Guard: \guard#2
--------------
Thread 0 file f.rv.c line 57 function chk1_f
ASSIGNMENT (PHI)
$return_value#6 == $return_value#4
Guard: TRUE
--------------
Thread 0 file f.rv.c line 57 function chk1_f
DECL
sum!0@1#1
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 57 function chk1_f
ASSIGNMENT (STATE)
sum!0@1#2 == 0
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 59 function chk1_f
DECL
i!0@1#1
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 59 function chk1_f
ASSIGNMENT (STATE)
i!0@1#2 == 1
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 62 function chk1_f
LOCATION
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 62 function chk1_f
FUNCTION_CALL
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 62 function chk1_f
ASSIGNMENT (STATE)
n!0@1#1 == n!0@1#1
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 62 function chk1_f
ASSIGNMENT (STATE)
rvp_i!0@1#1 == &i!0@1
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 62 function chk1_f
ASSIGNMENT (STATE)
rvp_sum!0@1#1 == &sum!0@1
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 62 function chk1_f
ASSIGNMENT (STATE)
rvp_rvretval!0@1#1 == &rvretval!0@1
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 107 function rvs1_Loop_f_for1
DECL
retval!0@1#1
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 110 function rvs1_Loop_f_for1
DECL
rv_D2_0!0@1#1
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 111 function rvs1_Loop_f_for1
DECL
rv_D3_0!0@1#1
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 114 function rvs1_Loop_f_for1
LOCATION
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 117 function rvs1_Loop_f_for1
LOCATION
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 122 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_deallocated#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 122 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_dead_object#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 122 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(__CPROVER_malloc_size#0 < 4) || !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_malloc_object#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 122 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_deallocated#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 122 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_dead_object#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 122 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(__CPROVER_malloc_size#0 < 4) || !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_malloc_object#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 122 function rvs1_Loop_f_for1
ASSIGNMENT (STATE)
i!0@1#3 == __CPROVER_uninterpreted_rvp_i(n!0@1#1, 1, 0)
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 123 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_deallocated#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 123 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_dead_object#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 123 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(__CPROVER_malloc_size#0 < 4) || !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_malloc_object#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 123 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_deallocated#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 123 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_dead_object#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 123 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(__CPROVER_malloc_size#0 < 4) || !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_malloc_object#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 123 function rvs1_Loop_f_for1
ASSIGNMENT (STATE)
sum!0@1#3 == __CPROVER_uninterpreted_rvp_sum(n!0@1#1, i!0@1#3, 0)
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 124 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_deallocated#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 124 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_dead_object#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 124 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(__CPROVER_malloc_size#0 < 4) || !(POINTER_OBJECT(&i!0@1) == POINTER_OBJECT(__CPROVER_malloc_object#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 124 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_deallocated#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 124 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_dead_object#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 124 function rvs1_Loop_f_for1
ASSUME
!\guard#2 ==> !(__CPROVER_malloc_size#0 < 4) || !(POINTER_OBJECT(&sum!0@1) == POINTER_OBJECT(__CPROVER_malloc_object#0))
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 124 function rvs1_Loop_f_for1
ASSIGNMENT (STATE)
retval!0@1#2 == __CPROVER_uninterpreted_retval(n!0@1#1, i!0@1#3, sum!0@1#3)
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 126 function rvs1_Loop_f_for1
LOCATION
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 127 function rvs1_Loop_f_for1
ASSIGNMENT (PHI)
retval!0@1#4 == retval!0@1#2
Guard: TRUE
--------------
Thread 0 file f.rv.c line 127 function rvs1_Loop_f_for1
ASSIGNMENT (PHI)
rv_D2_0!0@1#3 == rv_D2_0!0@1#1
Guard: TRUE
--------------
Thread 0 file f.rv.c line 127 function rvs1_Loop_f_for1
ASSIGNMENT (PHI)
rv_D3_0!0@1#3 == rv_D3_0!0@1#1
Guard: TRUE
--------------
Thread 0 file f.rv.c line 127 function rvs1_Loop_f_for1
FUNCTION_RETURN
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 65 function chk1_f
SHARED WRITE
__CPROVER_dead_object#1
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 65 function chk1_f
ASSIGNMENT (STATE)
__CPROVER_dead_object#1 == (nondet_symbol(symex::nondet1) ? &i!0@1 : __CPROVER_dead_object#0)
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 67 function chk1_f
LOCATION
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 67 function chk1_f
SHARED WRITE
$return_value#7
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 67 function chk1_f
ASSIGNMENT (STATE)
$return_value#7 == sum!0@1#3
Guard: !\guard#2
--------------
Thread 0 file f.rv.c line 68 function chk1_f
ASSIGNMENT (PHI)
rvretval!0@1#4 == 0
Guard: TRUE
--------------
Thread 0 file f.rv.c line 68 function chk1_f
ASSIGNMENT (PHI)
sum!0@1#5 == sum!0@1#3
Guard: TRUE
--------------
Thread 0 file f.rv.c line 68 function chk1_f
ASSIGNMENT (PHI)
return_value_rvs1_checkInput$1!0@1#4 == return_value_rvs1_checkInput$1!0@1#2
Guard: TRUE
--------------
Thread 0 file f.rv.c line 68 function chk1_f
ASSIGNMENT (PHI)
__CPROVER_dead_object#2 == (\guard#2 ? __CPROVER_dead_object#0 : __CPROVER_dead_object#1)
Guard: TRUE
--------------
Thread 0 file f.rv.c line 68 function chk1_f
ASSIGNMENT (PHI)
$return_value#8 == (\guard#2 ? 0 : $return_value#7)
Guard: TRUE
--------------
Thread 0 file f.rv.c line 68 function chk1_f
ASSIGNMENT (PHI)
rvretval!0@1#5 == 0
Guard: TRUE
--------------
Thread 0 file f.rv.c line 68 function chk1_f
ASSIGNMENT (PHI)
sum!0@1#6 == (\guard#2 ? sum!0@1#0 : sum!0@1#5)
Guard: TRUE
--------------
Thread 0 file f.rv.c line 68 function chk1_f
ASSIGNMENT (PHI)
i!0@1#5 == (\guard#2 ? i!0@1#0 : i!0@1#4)
Guard: TRUE
--------------
Thread 0 file f.rv.c line 68 function chk1_f
ASSIGNMENT (PHI)
return_value_rvs1_checkInput$1!0@1#5 == (\guard#2 ? return_value_rvs1_checkInput$1!0@1#2 : return_value_rvs1_checkInput$1!0@1#4)
Guard: TRUE
--------------
Thread 0 file f.rv.c line 68 function chk1_f
FUNCTION_RETURN
Guard: TRUE
--------------
Thread 0 file harness-assertions
ASSERT
$return_value$f1_output#1 == $return_value#8
assertion
Guard: TRUE
--------------
Thread 0
FUNCTION_RETURN
Guard: TRUE
--------------

Post-processing
Solving with MiniSAT 2.2.0 with simplifier
1563 variables, 2311 clauses
SAT checker: negated claim is UNSATISFIABLE, i.e., holds
PROGRAMS ARE EQUIVALENT
