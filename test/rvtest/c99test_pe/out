/usr/bin/gcc -fsyntax-only -std=c99 .//c99test.c
/usr/bin/gcc -fsyntax-only -std=c99 .//c99test1.c
/usr/bin/cpp -D__FUNCTION__="<unknown>" -I /cygdrive/c/NewRVT/debug/../tools/scripts/../ansi-c-lib -x c .//c99test.c .//S0.c
/usr/bin/cpp -D__FUNCTION__="<unknown>" -I /cygdrive/c/NewRVT/debug/../tools/scripts/../ansi-c-lib -x c .//c99test1.c .//S1.c
int  checkInput(int  n)
{
  return (n >= 0) ? (1) : (0);
}
int  checkInput(int  n)
{
  return (n >= 0) ? (1) : (0);
}

Dataflow analysis WriteVar starts.
----------------------------------------------
Chaotic iteration #0:
Processing: #0: DN_Start
in = {}
Killgen yields: {}
====> No change
Processing: #3: i < n
in = {} from #0: DN_Start, {} from #6: ++i
The intersect of in's elements results in: {}
Killgen yields: {}
====> No change
Processing: #4: sum += i
in = {} from #3: i < n
The intersect of in's elements results in: {}
Killgen yields: {[sum]}
====> Changed
Processing: #6: ++i
in = {[sum]} from #4: sum += i
The intersect of in's elements results in: {[sum]}
Killgen yields: {[i], [sum]}
====> Changed
Processing: #7: End of for loop
in = {} from #3: i < n
The intersect of in's elements results in: {}
Killgen yields: {}
====> No change
Processing: #8: DN_Finish
in = {} from #7: End of for loop
The intersect of in's elements results in: {}
Killgen yields: {}
====> No change
----------------------------------------------
Chaotic iteration #1:
Skipping #0: DN_Start
Processing: #3: i < n
in = {} from #0: DN_Start, {[i], [sum]} from #6: ++i
The intersect of in's elements results in: {}
Killgen yields: {}
====> No change
Processing: #4: sum += i
in = {} from #3: i < n
The intersect of in's elements results in: {}
Killgen yields: {[sum]}
====> No change
Processing: #6: ++i
in = {[sum]} from #4: sum += i
The intersect of in's elements results in: {[sum]}
Killgen yields: {[i], [sum]}
====> No change
Skipping #7: End of for loop
Skipping #8: DN_Finish
Dataflow analysis WriteVar ended.

Forward dataflow analysis UninitVar Loop_f_for1_side0 starts.
----------------------------------------------
Chaotic iteration #0:
Processing: #0: DN_Start
in = {}
Killgen yields: {}
====> No change
Processing: #3: i < n
in = {} from #0: DN_Start, {} from #6: ++i
The union of in's elements results in: {}
Killgen yields: {[i], [n]}
====> Changed
Processing: #4: sum += i
in = {[i], [n]} from #3: i < n
The union of in's elements results in: {[i], [n]}
Killgen yields: {[i], [n], [sum]}
====> Changed
Processing: #6: ++i
in = {[i], [n], [sum]} from #4: sum += i
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> Changed
Processing: #7: End of for loop
in = {[i], [n]} from #3: i < n
The union of in's elements results in: {[i], [n]}
Killgen yields: {[i], [n]}
====> Changed
Processing: #8: DN_Finish
in = {[i], [n]} from #7: End of for loop
The union of in's elements results in: {[i], [n]}
Killgen yields: {[i], [n]}
====> Changed
----------------------------------------------
Chaotic iteration #1:
Skipping #0: DN_Start
Processing: #3: i < n
in = {} from #0: DN_Start, {[i], [n], [sum]} from #6: ++i
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> Changed
Processing: #4: sum += i
in = {[i], [n], [sum]} from #3: i < n
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> No change
Processing: #6: ++i
in = {[i], [n], [sum]} from #4: sum += i
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> No change
Processing: #7: End of for loop
in = {[i], [n], [sum]} from #3: i < n
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> Changed
Processing: #8: DN_Finish
in = {[i], [n], [sum]} from #7: End of for loop
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> Changed
----------------------------------------------
Chaotic iteration #2:
Skipping #0: DN_Start
Processing: #3: i < n
in = {} from #0: DN_Start, {[i], [n], [sum]} from #6: ++i
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> No change
Processing: #4: sum += i
in = {[i], [n], [sum]} from #3: i < n
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> No change
Skipping #6: ++i
Processing: #7: End of for loop
in = {[i], [n], [sum]} from #3: i < n
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> No change
Processing: #8: DN_Finish
in = {[i], [n], [sum]} from #7: End of for loop
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> No change
Forward dataflow analysis UninitVar Loop_f_for1_side0 ended.

Dataflow analysis WriteVar starts.
----------------------------------------------
Chaotic iteration #0:
Processing: #0: DN_Start
in = {}
Killgen yields: {}
====> No change
Processing: #3: i < n
in = {} from #0: DN_Start, {} from #6: ++i
The intersect of in's elements results in: {}
Killgen yields: {}
====> No change
Processing: #4: sum += i
in = {} from #3: i < n
The intersect of in's elements results in: {}
Killgen yields: {[sum]}
====> Changed
Processing: #6: ++i
in = {[sum]} from #4: sum += i
The intersect of in's elements results in: {[sum]}
Killgen yields: {[i], [sum]}
====> Changed
Processing: #7: End of for loop
in = {} from #3: i < n
The intersect of in's elements results in: {}
Killgen yields: {}
====> No change
Processing: #8: DN_Finish
in = {} from #7: End of for loop
The intersect of in's elements results in: {}
Killgen yields: {}
====> No change
----------------------------------------------
Chaotic iteration #1:
Skipping #0: DN_Start
Processing: #3: i < n
in = {} from #0: DN_Start, {[i], [sum]} from #6: ++i
The intersect of in's elements results in: {}
Killgen yields: {}
====> No change
Processing: #4: sum += i
in = {} from #3: i < n
The intersect of in's elements results in: {}
Killgen yields: {[sum]}
====> No change
Processing: #6: ++i
in = {[sum]} from #4: sum += i
The intersect of in's elements results in: {[sum]}
Killgen yields: {[i], [sum]}
====> No change
Skipping #7: End of for loop
Skipping #8: DN_Finish
Dataflow analysis WriteVar ended.

Forward dataflow analysis UninitVar Loop_f_for1_side1 starts.
----------------------------------------------
Chaotic iteration #0:
Processing: #0: DN_Start
in = {}
Killgen yields: {}
====> No change
Processing: #3: i < n
in = {} from #0: DN_Start, {} from #6: ++i
The union of in's elements results in: {}
Killgen yields: {[i], [n]}
====> Changed
Processing: #4: sum += i
in = {[i], [n]} from #3: i < n
The union of in's elements results in: {[i], [n]}
Killgen yields: {[i], [n], [sum]}
====> Changed
Processing: #6: ++i
in = {[i], [n], [sum]} from #4: sum += i
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> Changed
Processing: #7: End of for loop
in = {[i], [n]} from #3: i < n
The union of in's elements results in: {[i], [n]}
Killgen yields: {[i], [n]}
====> Changed
Processing: #8: DN_Finish
in = {[i], [n]} from #7: End of for loop
The union of in's elements results in: {[i], [n]}
Killgen yields: {[i], [n]}
====> Changed
----------------------------------------------
Chaotic iteration #1:
Skipping #0: DN_Start
Processing: #3: i < n
in = {} from #0: DN_Start, {[i], [n], [sum]} from #6: ++i
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> Changed
Processing: #4: sum += i
in = {[i], [n], [sum]} from #3: i < n
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> No change
Processing: #6: ++i
in = {[i], [n], [sum]} from #4: sum += i
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> No change
Processing: #7: End of for loop
in = {[i], [n], [sum]} from #3: i < n
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> Changed
Processing: #8: DN_Finish
in = {[i], [n], [sum]} from #7: End of for loop
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> Changed
----------------------------------------------
Chaotic iteration #2:
Skipping #0: DN_Start
Processing: #3: i < n
in = {} from #0: DN_Start, {[i], [n], [sum]} from #6: ++i
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> No change
Processing: #4: sum += i
in = {[i], [n], [sum]} from #3: i < n
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> No change
Skipping #6: ++i
Processing: #7: End of for loop
in = {[i], [n], [sum]} from #3: i < n
The unionint  checkInput(int  n);int  checkInput(int  n); of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> No change
Processing: #8: DN_Finish
in = {[i], [n], [sum]} from #7: End of for loop
The union of in's elements results in: {[i], [n], [sum]}
Killgen yields: {[i], [n], [sum]}
====> No change
Forward dataflow analysis UninitVar Loop_f_for1_side1 ended.
rm: No match.
RVIntraProcDataflowGraphBuilder::processing checkInput
RVIntraProcDataflowGraphBuilder::processing f
RVIntraProcDataflowGraphBuilder::processing Loop_f_for1
RVIntraProcDataflowGraphBuilder::processing main
RVIntraProcDataflowGraphBuilder::processing checkInput
RVIntraProcDataflowGraphBuilder::processing f
RVIntraProcDataflowGraphBuilder::processing Loop_f_for1
RVIntraProcDataflowGraphBuilder::processing main
( Loop_f_for1, Loop_f_for1 ) : passed
( checkInput, checkInput ) : passed

Dataflow analysis CallCountAnalysys starts.
----------------------------------------------
Chaotic iteration #0:
Processing: #0: DN_Start
in = {}
  Dataflow analysis CallCountAnalysys f starts.
  ----------------------------------------------
  Chaotic iteration #0:
  Processing: #0: DN_Start
  in = {}
  Killgen yields: {}
  ====> No change
  Processing: #2: rvretval:=0
  in = {} from #0: DN_Start
  The union of in's elements results in: {}
  Killgen yields: {}
  ====> No change
  Processing: #3: n
  in = {} from #2: rvretval:=0
  The union of in's elements results in: {}
  Killgen yields: {}
  ====> No change
  Processing: #4: $0:=checkInput(n)
  in = {} from #3: n
  The union of in's elements results in: {}
    Dataflow analysis CallCountAnalysys checkInput starts.
    ----------------------------------------------
    Chaotic iteration #0:
    Processing: #0: DN_Start
    in = {}
    Killgen yields: {}
    ====> No change
    Processing: #2: $0:=
    in = {} from #0: DN_Start
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #3: n >= 0
    in = {} from #2: $0:=
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #4: $0 = 1
    in = {} from #3: n >= 0
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #5: $0 = 0
    in = {} from #3: n >= 0
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #6: return $0
    in = {} from #5: $0 = 0, {} from #4: $0 = 1
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #7: DN_Finish
    in = {} from #6: return $0
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Dataflow analysis CallCountAnalysys checkInput ended.

  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #5: $0
  in = {[<"checkInput",1>]} from #4: $0:=checkInput(n)
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #6: return 0
  in = {[<"checkInput",1>]} from #5: $0
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #7: sum:=0
  in = {[<"checkInput",1>]} from #5: $0
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #8: i = 1
  in = {[<"checkInput",1>]} from #7: sum:=0
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #9: n
  in = {[<"checkInput",1>]} from #8: i = 1
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #10: &i
  in = {[<"checkInput",1>]} from #9: n
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #11: &sum
  in = {[<"checkInput",1>]} from #10: &i
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #12: &rvretval
  in = {[<"checkInput",1>]} from #11: &sum
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #13: Loop_f_for1(n,&i,&sum,&rvretval)
  in = {[<"checkInput",1>]} from #12: &rvretval
  The union of in's elements results in: {[<"checkInput",1>]}
    Dataflow analysis CallCountAnalysys Loop_f_for1 starts.
    ----------------------------------------------
    Chaotic iteration #0:
    Processing: #0: DN_Start
    in = {}
    Killgen yields: {}
    ====> No change
    Processing: #2: !(*rvp_i < n)
    in = {} from #0: DN_Start
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #3: return 0
    in = {} from #2: !(*rvp_i < n)
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #4: *rvp_sum += *rvp_i
    in = {} from #2: !(*rvp_i < n)
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #5: *rvp_sum
    in = {} from #4: *rvp_sum += *rvp_i
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #6: ++*rvp_i
    in = {} from #5: *rvp_sum
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #7: *rvp_i
    in = {} from #6: ++*rvp_i
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #8: return 0
    in = {} from #7: *rvp_i
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #9: DN_Finish
    in = {} from #3: return 0, {} from #8: return 0
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Dataflow analysis CallCountAnalysys Loop_f_for1 ended.

  Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  ====> Changed
  Processing: #14: return sum
  in = {[<"Loop_f_for1",1>], [<"checkInput",1>]} from #13: Loop_f_for1(n,&i,&sum,&rvretval)
  The union of in's elements results in: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  ====> Changed
  Processing: #15: DN_Finish
  in = {[<"checkInput",1>]} from #6: return 0, {[<"Loop_f_for1",1>], [<"checkInput",1>]} from #14: return sum
  The union of in's elements results in: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  ====> Changed
  ----------------------------------------------
  Chaotic iteration #1:
  Skipping #0: DN_Start
  Skipping #2: rvretval:=0
  Skipping #3: n
  Processing: #4: $0:=checkInput(n)
  in = {} from #3: n
  The union of in's elements results in: {}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #5: $0
  in = {[<"checkInput",1>]} from #4: $0:=checkInput(n)
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #6: return 0
  in = {[<"checkInput",1>]} from #5: $0
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #7: sum:=0
  in = {[<"checkInput",1>]} from #5: $0
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #8: i = 1
  in = {[<"checkInput",1>]} from #7: sum:=0
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #9: n
  in = {[<"checkInput",1>]} from #8: i = 1
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #10: &i
  in = {[<"checkInput",1>]} from #9: n
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #11: &sum
  in = {[<"checkInput",1>]} from #10: &i
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #12: &rvretval
  in = {[<"checkInput",1>]} from #11: &sum
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #13: Loop_f_for1(n,&i,&sum,&rvretval)
  in = {[<"checkInput",1>]} from #12: &rvretval
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  ====> No change
  Processing: #14: return sum
  in = {[<"Loop_f_for1",1>], [<"checkInput",1>]} from #13: Loop_f_for1(n,&i,&sum,&rvretval)
  The union of in's elements results in: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  ====> No change
  Processing: #15: DN_Finish
  in = {[<"checkInput",1>]} from #6: return 0, {[<"Loop_f_for1",1>], [<"checkInput",1>]} from #14: return sum
  The union of in's elements results in: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  ====> No change
  Dataflow analysis CallCountAnalysys f ended.

Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
====> Changed
Processing: #1: DN_Finish
in = {[<"Loop_f_for1",1>], [<"checkInput",1>]} from #0: DN_Start
The union of in's elements results in: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
====> Changed
----------------------------------------------
Chaotic iteration #1:
Processing: #0: DN_Start
in = {}
Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
====> No change
Processing: #1: DN_Finish
in = {[<"Loop_f_for1",1>], [<"checkInput",1>]} from #0: DN_Start
The union of in's elements results in: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
====> No change
Dataflow analysis CallCountAnalysys ended.

Dataflow analysis CallCountAnalysys starts.
----------------------------------------------
Chaotic iteration #0:
Processing: #0: DN_Start
in = {}
Killgen yields: {}
====> No change
Processing: #1: DN_Finish
in = {} from #0: DN_Start
The union of in's elements results in: {}
Killgen yields: {}
====> No change
Dataflow analysis CallCountAnalysys ended.

Dataflow analysis CallCountAnalysys starts.
----------------------------------------------
Chaotic iteration #0:
Processing: #0: DN_Start
in = {}
  Dataflow analysis CallCountAnalysys f starts.
  ----------------------------------------------
  Chaotic iteration #0:
  Processing: #0: DN_Start
  in = {}
  Killgen yields: {}
  ====> No change
  Processing: #2: rvretval:=0
  in = {} from #0: DN_Start
  The union of in's elements results in: {}
  Killgen yields: {}
  ====> No change
  Processing: #3: n
  in = {} from #2: rvretval:=0
  The union of in's elements results in: {}
  Killgen yields: {}
  ====> No change
  Processing: #4: $0:=checkInput(n)
  in = {} from #3: n
  The union of in's elements results in: {}
    Dataflow analysis CallCountAnalysys checkInput starts.
    ----------------------------------------------
    Chaotic iteration #0:
    Processing: #0: DN_Start
    in = {}
    Killgen yields: {}
    ====> No change
    Processing: #2: $0:=
    in = {} from #0: DN_Start
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #3: n >= 0
    in = {} from #2: $0:=
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #4: $0 = 1
    in = {} from #3: n >= 0
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #5: $0 = 0
    in = {} from #3: n >= 0
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #6: return $0
    in = {} from #5: $0 = 0, {} from #4: $0 = 1
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #7: DN_Finish
    in = {} from #6: return $0
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Dataflow analysis CallCountAnalysys checkInput ended.

  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #5: $0
  in = {[<"checkInput",1>]} from #4: $0:=checkInput(n)
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #6: return 0
  in = {[<"checkInput",1>]} from #5: $0
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #7: sum:=0
  in = {[<"checkInput",1>]} from #5: $0
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #8: i:=1
  in = {[<"checkInput",1>]} from #7: sum:=0
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #9: n
  in = {[<"checkInput",1>]} from #8: i:=1
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #10: &i
  in = {[<"checkInput",1>]} from #9: n
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #11: &sum
  in = {[<"checkInput",1>]} from #10: &i
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #12: &rvretval
  in = {[<"checkInput",1>]} from #11: &sum
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> Changed
  Processing: #13: Loop_f_for1(n,&i,&sum,&rvretval)
  in = {[<"checkInput",1>]} from #12: &rvretval
  The union of in's elements results in: {[<"checkInput",1>]}
    Dataflow analysis CallCountAnalysys Loop_f_for1 starts.
    ----------------------------------------------
    Chaotic iteration #0:
    Processing: #0: DN_Start
    in = {}
    Killgen yields: {}
    ====> No change
    Processing: #2: !(*rvp_i < n)
    in = {} from #0: DN_Start
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #3: return 0
    in = {} from #2: !(*rvp_i < n)
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #4: *rvp_sum += *rvp_i
    in = {} from #2: !(*rvp_i < n)
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #5: *rvp_sum
    in = {} from #4: *rvp_sum += *rvp_i
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #6: ++*rvp_i
    in = {} from #5: *rvp_sum
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #7: *rvp_i
    in = {} from #6: ++*rvp_i
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #8: return 0
    in = {} from #7: *rvp_i
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Processing: #9: DN_Finish
    in = {} from #3: return 0, {} from #8: return 0
    The union of in's elements results in: {}
    Killgen yields: {}
    ====> No change
    Dataflow analysis CallCountAnalysys Loop_f_for1 ended.

  Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  ====> Changed
  Processing: #14: return sum
  in = {[<"Loop_f_for1",1>], [<"checkInput",1>]} from #13: Loop_f_for1(n,&i,&sum,&rvretval)
  The union of in's elements results in: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  ====> Changed
  Processing: #15: DN_Finish
  in = {[<"checkInput",1>]} from #6: return 0, {[<"Loop_f_for1",1>], [<"checkInput",1>]} from #14: return sum
  The union of in's elements results in: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  ====> Changed
  ----------------------------------------------
  Chaotic iteration #1:
  Skipping #0: DN_Start
  Skipping #2: rvretval:=0
  Skipping #3: n
  Processing: #4: $0:=checkInput(n)
  in = {} from #3: n
  The union of in's elements results in: {}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #5: $0
  in = {[<"checkInput",1>]} from #4: $0:=checkInput(n)
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #6: return 0
  in = {[<"checkInput",1>]} from #5: $0
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #7: sum:=0
  in = {[<"checkInput",1>]} from #5: $0
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #8: i:=1
  in = {[<"checkInput",1>]} from #7: sum:=0
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #9: n
  in = {[<"checkInput",1>]} from #8: i:=1
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #10: &i
  in = {[<"checkInput",1>]} from #9: n
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #11: &sum
  in = {[<"checkInput",1>]} from #10: &i
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #12: &rvretval
  in = {[<"checkInput",1>]} from #11: &sum
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"checkInput",1>]}
  ====> No change
  Processing: #13: Loop_f_for1(n,&i,&sum,&rvretval)
  in = {[<"checkInput",1>]} from #12: &rvretval
  The union of in's elements results in: {[<"checkInput",1>]}
  Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  ====> No change
  Processing: #14: return sum
  in = {[<"Loop_f_for1",1>], [<"checkInput",1>]} from #13: Loop_f_for1(n,&i,&sum,&rvretval)
  The union of in's elements results in: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  ====> No change
  Processing: #15: DN_Finish
  in = {[<"checkInput",1>]} from #6: return 0, {[<"Loop_f_for1",1>], [<"checkInput",1>]} from #14: return sum
  The union of in's elements results in: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
  ====> No change
  Dataflow analysis CallCountAnalysys f ended.

Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
====> Changed
Processing: #1: DN_Finish
in = {[<"Loop_f_for1",1>], [<"checkInput",1>]} from #0: DN_Start
The union of in's elements results in: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
====> Changed
----------------------------------------------
Chaotic iteration #1:
Processing: #0: DN_Start
in = {}
Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
====> No change
Processing: #1: DN_Finish
in = {[<"Loop_f_for1",1>], [<"checkInput",1>]} from #0: DN_Start
The union of in's elements results in: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
====> No change
Dataflow analysis CallCountAnalysys ended.

Dataflow analysis CallCountAnalysys starts.
----------------------------------------------
Chaotic iteration #0:
Processing: #0: DN_Stthe value of mutual term check: 
art
in = {}
Killgen yields: {}
====> No change
Processing: #1: DN_Finish
in = {} from #0: DN_Start
The union of in's elements results in: {}
Killgen yields: {}
====> No change
Dataflow analysis CallCountAnalysys ended.

Dataflow analysis CallCountAnalysys starts.
----------------------------------------------
Chaotic iteration #0:
Processing: #0: DN_Start
in = {}
Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
====> Changed
Processing: #1: DN_Finish
in = {[<"Loop_f_for1",1>], [<"checkInput",1>]} from #0: DN_Start
The union of in's elements results in: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
====> Changed
----------------------------------------------
Chaotic iteration #1:
Processing: #0: DN_Start
in = {}
Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
====> No change
Processing: #1: DN_Finish
in = {[<"Loop_f_for1",1>], [<"checkInput",1>]} from #0: DN_Start
The union of in's elements results in: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
====> No change
Dataflow analysis CallCountAnalysys ended.

Dataflow analysis CallCountAnalysys starts.
----------------------------------------------
Chaotic iteration #0:
Processing: #0: DN_Start
in = {}
Killgen yields: {}
====> No change
Processing: #1: DN_Finish
in = {} from #0: DN_Start
The union of in's elements results in: {}
Killgen yields: {}
====> No change
Dataflow analysis CallCountAnalysys ended.

Dataflow analysis CallCountAnalysys starts.
----------------------------------------------
Chaotic iteration #0:
Processing: #0: DN_Start
in = {}
Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
====> Changed
Processing: #1: DN_Finish
in = {[<"Loop_f_for1",1>], [<"checkInput",1>]} from #0: DN_Start
The union of in's elements results in: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
====> Changed
----------------------------------------------
Chaotic iteration #1:
Processing: #0: DN_Start
in = {}
Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
====> No change
Processing: #1: DN_Finish
in = {[<"Loop_f_for1",1>], [<"checkInput",1>]} from #0: DN_Start
The union of in's elements results in: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
Killgen yields: {[<"Loop_f_for1",1>], [<"checkInput",1>]}
====> No change
Dataflow analysis CallCountAnalysys ended.

Dataflow analysis CallCountAnalysys starts.
----------------------------------------------
Chaotic iteration #0:
Processing: #0: DN_Start
in = {}
Killgen yields: {}
====> No change
Processing: #1: DN_Finish
in = {} from #0: DN_Start
The union of in's elements results in: {}
Killgen yields: {}
====> No change
Dataflow analysis CallCountAnalysys ended.
Setting environment for using Microsoft Visual Studio 2010 x86 tools.
-- Begin semantic check (semchk) ( .//semchks// f chk0_f chk1_f 1 )
running vcvars64
Setting environment for using Microsoft Visual Studio 2010 x86 tools.
running unitrv
( f, f ) : passed
( main, main ) : passed
Output graph written to rv_out.gv
